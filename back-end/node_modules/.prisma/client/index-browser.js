
Object.defineProperty(exports, "__esModule", { value: true });

const {
  Decimal
} = require('@prisma/client/runtime/index-browser')


const Prisma = {}

exports.Prisma = Prisma

/**
 * Prisma Client JS version: 3.15.2
 * Query Engine version: 461d6a05159055555eb7dfb337c9fb271cbd4d7e
 */
Prisma.prismaVersion = {
  client: "3.15.2",
  engine: "461d6a05159055555eb7dfb337c9fb271cbd4d7e"
}

Prisma.PrismaClientKnownRequestError = () => {
  throw new Error(`PrismaClientKnownRequestError is unable to be run in the browser.
In case this error is unexpected for you, please report it in https://github.com/prisma/prisma/issues`,
)};
Prisma.PrismaClientUnknownRequestError = () => {
  throw new Error(`PrismaClientUnknownRequestError is unable to be run in the browser.
In case this error is unexpected for you, please report it in https://github.com/prisma/prisma/issues`,
)}
Prisma.PrismaClientRustPanicError = () => {
  throw new Error(`PrismaClientRustPanicError is unable to be run in the browser.
In case this error is unexpected for you, please report it in https://github.com/prisma/prisma/issues`,
)}
Prisma.PrismaClientInitializationError = () => {
  throw new Error(`PrismaClientInitializationError is unable to be run in the browser.
In case this error is unexpected for you, please report it in https://github.com/prisma/prisma/issues`,
)}
Prisma.PrismaClientValidationError = () => {
  throw new Error(`PrismaClientValidationError is unable to be run in the browser.
In case this error is unexpected for you, please report it in https://github.com/prisma/prisma/issues`,
)}
Prisma.Decimal = Decimal

/**
 * Re-export of sql-template-tag
 */
Prisma.sql = () => {
  throw new Error(`sqltag is unable to be run in the browser.
In case this error is unexpected for you, please report it in https://github.com/prisma/prisma/issues`,
)}
Prisma.empty = () => {
  throw new Error(`empty is unable to be run in the browser.
In case this error is unexpected for you, please report it in https://github.com/prisma/prisma/issues`,
)}
Prisma.join = () => {
  throw new Error(`join is unable to be run in the browser.
In case this error is unexpected for you, please report it in https://github.com/prisma/prisma/issues`,
)}
Prisma.raw = () => {
  throw new Error(`raw is unable to be run in the browser.
In case this error is unexpected for you, please report it in https://github.com/prisma/prisma/issues`,
)}
Prisma.validator = () => (val) => val

/**
 * Shorthand utilities for JSON filtering
 */
Prisma.DbNull = 'DbNull'
Prisma.JsonNull = 'JsonNull'
Prisma.AnyNull = 'AnyNull'

/**
 * Enums
 */
// Based on
// https://github.com/microsoft/TypeScript/issues/3192#issuecomment-261720275
function makeEnum(x) { return x; }

exports.Prisma.ClientScalarFieldEnum = makeEnum({
  id: 'id',
  cpf: 'cpf',
  name: 'name',
  email: 'email',
  password: 'password',
  adress: 'adress',
  phone: 'phone',
  birthday: 'birthday',
  createdAt: 'createdAt',
  updatedAt: 'updatedAt'
});

exports.Prisma.SessionScalarFieldEnum = makeEnum({
  id: 'id',
  clientId: 'clientId',
  token: 'token',
  createdAt: 'createdAt',
  updatedAt: 'updatedAt'
});

exports.Prisma.ReceptionistScalarFieldEnum = makeEnum({
  id: 'id',
  cpf: 'cpf',
  name: 'name',
  email: 'email',
  password: 'password',
  adress: 'adress',
  phone: 'phone',
  birthday: 'birthday',
  createdAt: 'createdAt',
  updatedAt: 'updatedAt'
});

exports.Prisma.SessionReceptionistScalarFieldEnum = makeEnum({
  id: 'id',
  receptionistId: 'receptionistId',
  token: 'token',
  createdAt: 'createdAt',
  updatedAt: 'updatedAt'
});

exports.Prisma.MedicScalarFieldEnum = makeEnum({
  id: 'id',
  cpf: 'cpf',
  name: 'name',
  email: 'email',
  password: 'password',
  adress: 'adress',
  phone: 'phone',
  birthday: 'birthday',
  specialty: 'specialty',
  createdAt: 'createdAt',
  updatedAt: 'updatedAt'
});

exports.Prisma.AppointementScalarFieldEnum = makeEnum({
  id: 'id',
  clientId: 'clientId',
  medicId: 'medicId',
  appointementDate: 'appointementDate',
  createdAt: 'createdAt',
  updatedAt: 'updatedAt'
});

exports.Prisma.PrescriptionScalarFieldEnum = makeEnum({
  id: 'id',
  clientId: 'clientId',
  medicId: 'medicId',
  medications: 'medications',
  description: 'description',
  requestingRenewal: 'requestingRenewal',
  expirationDate: 'expirationDate',
  createdAt: 'createdAt',
  updatedAt: 'updatedAt'
});

exports.Prisma.ReportScalarFieldEnum = makeEnum({
  id: 'id',
  clientId: 'clientId',
  medicId: 'medicId',
  title: 'title',
  text: 'text',
  createdAt: 'createdAt',
  updatedAt: 'updatedAt'
});

exports.Prisma.SessionMedicScalarFieldEnum = makeEnum({
  id: 'id',
  medicId: 'medicId',
  token: 'token',
  createdAt: 'createdAt',
  updatedAt: 'updatedAt'
});

exports.Prisma.SortOrder = makeEnum({
  asc: 'asc',
  desc: 'desc'
});

exports.Prisma.JsonNullValueInput = makeEnum({
  JsonNull: 'JsonNull'
});

exports.Prisma.QueryMode = makeEnum({
  default: 'default',
  insensitive: 'insensitive'
});

exports.Prisma.JsonNullValueFilter = makeEnum({
  DbNull: 'DbNull',
  JsonNull: 'JsonNull',
  AnyNull: 'AnyNull'
});


exports.Prisma.ModelName = makeEnum({
  Client: 'Client',
  Session: 'Session',
  Receptionist: 'Receptionist',
  SessionReceptionist: 'SessionReceptionist',
  Medic: 'Medic',
  Appointement: 'Appointement',
  Prescription: 'Prescription',
  Report: 'Report',
  SessionMedic: 'SessionMedic'
});

/**
 * Create the Client
 */
class PrismaClient {
  constructor() {
    throw new Error(
      `PrismaClient is unable to be run in the browser.
In case this error is unexpected for you, please report it in https://github.com/prisma/prisma/issues`,
    )
  }
}
exports.PrismaClient = PrismaClient

Object.assign(exports, Prisma)
