
/**
 * Client
**/

import * as runtime from '@prisma/client/runtime/index';
declare const prisma: unique symbol
export type PrismaPromise<A> = Promise<A> & {[prisma]: true}
type UnwrapPromise<P extends any> = P extends Promise<infer R> ? R : P
type UnwrapTuple<Tuple extends readonly unknown[]> = {
  [K in keyof Tuple]: K extends `${number}` ? Tuple[K] extends PrismaPromise<infer X> ? X : UnwrapPromise<Tuple[K]> : UnwrapPromise<Tuple[K]>
};


/**
 * Model Client
 * 
 */
export type Client = {
  id: number
  cpf: string
  name: string
  email: string | null
  password: string
  adress: string | null
  phone: string | null
  birthday: Date | null
  createdAt: Date
  updatedAt: Date
}

/**
 * Model Session
 * 
 */
export type Session = {
  id: number
  clientId: number | null
  token: string
  createdAt: Date
  updatedAt: Date
}

/**
 * Model Receptionist
 * 
 */
export type Receptionist = {
  id: number
  cpf: string
  name: string
  email: string | null
  password: string
  adress: string | null
  phone: string | null
  birthday: Date | null
  createdAt: Date
  updatedAt: Date
}

/**
 * Model SessionReceptionist
 * 
 */
export type SessionReceptionist = {
  id: number
  receptionistId: number | null
  token: string
  createdAt: Date
  updatedAt: Date
}

/**
 * Model Medic
 * 
 */
export type Medic = {
  id: number
  cpf: string
  name: string
  email: string | null
  password: string
  adress: string | null
  phone: string | null
  birthday: Date | null
  specialty: string | null
  createdAt: Date
  updatedAt: Date
}

/**
 * Model Appointement
 * 
 */
export type Appointement = {
  id: number
  clientId: number | null
  medicId: number | null
  appointementDate: Date
  createdAt: Date
  updatedAt: Date
}

/**
 * Model Prescription
 * 
 */
export type Prescription = {
  id: number
  clientId: number | null
  medicId: number | null
  medications: Prisma.JsonValue
  description: string
  requestingRenewal: boolean
  expirationDate: Date
  createdAt: Date
  updatedAt: Date
}

/**
 * Model Report
 * 
 */
export type Report = {
  id: number
  clientId: number | null
  medicId: number | null
  title: string
  text: string
  createdAt: Date
  updatedAt: Date
}

/**
 * Model Exam
 * 
 */
export type Exam = {
  id: number
  clientId: number | null
  medicId: number | null
  title: string
  text: string
  createdAt: Date
  updatedAt: Date
}

/**
 * Model SessionMedic
 * 
 */
export type SessionMedic = {
  id: number
  medicId: number | null
  token: string
  createdAt: Date
  updatedAt: Date
}


/**
 * ##  Prisma Client ʲˢ
 * 
 * Type-safe database client for TypeScript & Node.js
 * @example
 * ```
 * const prisma = new PrismaClient()
 * // Fetch zero or more Clients
 * const clients = await prisma.client.findMany()
 * ```
 *
 * 
 * Read more in our [docs](https://www.prisma.io/docs/reference/tools-and-interfaces/prisma-client).
 */
export class PrismaClient<
  T extends Prisma.PrismaClientOptions = Prisma.PrismaClientOptions,
  U = 'log' extends keyof T ? T['log'] extends Array<Prisma.LogLevel | Prisma.LogDefinition> ? Prisma.GetEvents<T['log']> : never : never,
  GlobalReject = 'rejectOnNotFound' extends keyof T
    ? T['rejectOnNotFound']
    : false
      > {
      /**
       * @private
       */
      private fetcher;
      /**
       * @private
       */
      private readonly dmmf;
      /**
       * @private
       */
      private connectionPromise?;
      /**
       * @private
       */
      private disconnectionPromise?;
      /**
       * @private
       */
      private readonly engineConfig;
      /**
       * @private
       */
      private readonly measurePerformance;

    /**
   * ##  Prisma Client ʲˢ
   * 
   * Type-safe database client for TypeScript & Node.js
   * @example
   * ```
   * const prisma = new PrismaClient()
   * // Fetch zero or more Clients
   * const clients = await prisma.client.findMany()
   * ```
   *
   * 
   * Read more in our [docs](https://www.prisma.io/docs/reference/tools-and-interfaces/prisma-client).
   */

  constructor(optionsArg ?: Prisma.Subset<T, Prisma.PrismaClientOptions>);
  $on<V extends (U | 'beforeExit')>(eventType: V, callback: (event: V extends 'query' ? Prisma.QueryEvent : V extends 'beforeExit' ? () => Promise<void> : Prisma.LogEvent) => void): void;

  /**
   * Connect with the database
   */
  $connect(): Promise<void>;

  /**
   * Disconnect from the database
   */
  $disconnect(): Promise<void>;

  /**
   * Add a middleware
   */
  $use(cb: Prisma.Middleware): void

/**
   * Executes a prepared raw query and returns the number of affected rows.
   * @example
   * ```
   * const result = await prisma.$executeRaw`UPDATE User SET cool = ${true} WHERE email = ${'user@email.com'};`
   * ```
   * 
   * Read more in our [docs](https://www.prisma.io/docs/reference/tools-and-interfaces/prisma-client/raw-database-access).
   */
  $executeRaw<T = unknown>(query: TemplateStringsArray | Prisma.Sql, ...values: any[]): PrismaPromise<number>;

  /**
   * Executes a raw query and returns the number of affected rows.
   * Susceptible to SQL injections, see documentation.
   * @example
   * ```
   * const result = await prisma.$executeRawUnsafe('UPDATE User SET cool = $1 WHERE email = $2 ;', true, 'user@email.com')
   * ```
   * 
   * Read more in our [docs](https://www.prisma.io/docs/reference/tools-and-interfaces/prisma-client/raw-database-access).
   */
  $executeRawUnsafe<T = unknown>(query: string, ...values: any[]): PrismaPromise<number>;

  /**
   * Performs a prepared raw query and returns the `SELECT` data.
   * @example
   * ```
   * const result = await prisma.$queryRaw`SELECT * FROM User WHERE id = ${1} OR email = ${'user@email.com'};`
   * ```
   * 
   * Read more in our [docs](https://www.prisma.io/docs/reference/tools-and-interfaces/prisma-client/raw-database-access).
   */
  $queryRaw<T = unknown>(query: TemplateStringsArray | Prisma.Sql, ...values: any[]): PrismaPromise<T>;

  /**
   * Performs a raw query and returns the `SELECT` data.
   * Susceptible to SQL injections, see documentation.
   * @example
   * ```
   * const result = await prisma.$queryRawUnsafe('SELECT * FROM User WHERE id = $1 OR email = $2;', 1, 'user@email.com')
   * ```
   * 
   * Read more in our [docs](https://www.prisma.io/docs/reference/tools-and-interfaces/prisma-client/raw-database-access).
   */
  $queryRawUnsafe<T = unknown>(query: string, ...values: any[]): PrismaPromise<T>;

  /**
   * Allows the running of a sequence of read/write operations that are guaranteed to either succeed or fail as a whole.
   * @example
   * ```
   * const [george, bob, alice] = await prisma.$transaction([
   *   prisma.user.create({ data: { name: 'George' } }),
   *   prisma.user.create({ data: { name: 'Bob' } }),
   *   prisma.user.create({ data: { name: 'Alice' } }),
   * ])
   * ```
   * 
   * Read more in our [docs](https://www.prisma.io/docs/concepts/components/prisma-client/transactions).
   */
  $transaction<P extends PrismaPromise<any>[]>(arg: [...P]): Promise<UnwrapTuple<P>>;

      /**
   * `prisma.client`: Exposes CRUD operations for the **Client** model.
    * Example usage:
    * ```ts
    * // Fetch zero or more Clients
    * const clients = await prisma.client.findMany()
    * ```
    */
  get client(): Prisma.ClientDelegate<GlobalReject>;

  /**
   * `prisma.session`: Exposes CRUD operations for the **Session** model.
    * Example usage:
    * ```ts
    * // Fetch zero or more Sessions
    * const sessions = await prisma.session.findMany()
    * ```
    */
  get session(): Prisma.SessionDelegate<GlobalReject>;

  /**
   * `prisma.receptionist`: Exposes CRUD operations for the **Receptionist** model.
    * Example usage:
    * ```ts
    * // Fetch zero or more Receptionists
    * const receptionists = await prisma.receptionist.findMany()
    * ```
    */
  get receptionist(): Prisma.ReceptionistDelegate<GlobalReject>;

  /**
   * `prisma.sessionReceptionist`: Exposes CRUD operations for the **SessionReceptionist** model.
    * Example usage:
    * ```ts
    * // Fetch zero or more SessionReceptionists
    * const sessionReceptionists = await prisma.sessionReceptionist.findMany()
    * ```
    */
  get sessionReceptionist(): Prisma.SessionReceptionistDelegate<GlobalReject>;

  /**
   * `prisma.medic`: Exposes CRUD operations for the **Medic** model.
    * Example usage:
    * ```ts
    * // Fetch zero or more Medics
    * const medics = await prisma.medic.findMany()
    * ```
    */
  get medic(): Prisma.MedicDelegate<GlobalReject>;

  /**
   * `prisma.appointement`: Exposes CRUD operations for the **Appointement** model.
    * Example usage:
    * ```ts
    * // Fetch zero or more Appointements
    * const appointements = await prisma.appointement.findMany()
    * ```
    */
  get appointement(): Prisma.AppointementDelegate<GlobalReject>;

  /**
   * `prisma.prescription`: Exposes CRUD operations for the **Prescription** model.
    * Example usage:
    * ```ts
    * // Fetch zero or more Prescriptions
    * const prescriptions = await prisma.prescription.findMany()
    * ```
    */
  get prescription(): Prisma.PrescriptionDelegate<GlobalReject>;

  /**
   * `prisma.report`: Exposes CRUD operations for the **Report** model.
    * Example usage:
    * ```ts
    * // Fetch zero or more Reports
    * const reports = await prisma.report.findMany()
    * ```
    */
  get report(): Prisma.ReportDelegate<GlobalReject>;

  /**
   * `prisma.exam`: Exposes CRUD operations for the **Exam** model.
    * Example usage:
    * ```ts
    * // Fetch zero or more Exams
    * const exams = await prisma.exam.findMany()
    * ```
    */
  get exam(): Prisma.ExamDelegate<GlobalReject>;

  /**
   * `prisma.sessionMedic`: Exposes CRUD operations for the **SessionMedic** model.
    * Example usage:
    * ```ts
    * // Fetch zero or more SessionMedics
    * const sessionMedics = await prisma.sessionMedic.findMany()
    * ```
    */
  get sessionMedic(): Prisma.SessionMedicDelegate<GlobalReject>;
}

export namespace Prisma {
  export import DMMF = runtime.DMMF

  /**
   * Prisma Errors
   */
  export import PrismaClientKnownRequestError = runtime.PrismaClientKnownRequestError
  export import PrismaClientUnknownRequestError = runtime.PrismaClientUnknownRequestError
  export import PrismaClientRustPanicError = runtime.PrismaClientRustPanicError
  export import PrismaClientInitializationError = runtime.PrismaClientInitializationError
  export import PrismaClientValidationError = runtime.PrismaClientValidationError

  /**
   * Re-export of sql-template-tag
   */
  export import sql = runtime.sqltag
  export import empty = runtime.empty
  export import join = runtime.join
  export import raw = runtime.raw
  export import Sql = runtime.Sql

  /**
   * Decimal.js
   */
  export import Decimal = runtime.Decimal

  export type DecimalJsLike = runtime.DecimalJsLike

  /**
   * Prisma Client JS version: 3.15.2
   * Query Engine version: 461d6a05159055555eb7dfb337c9fb271cbd4d7e
   */
  export type PrismaVersion = {
    client: string
  }

  export const prismaVersion: PrismaVersion 

  /**
   * Utility Types
   */

  /**
   * From https://github.com/sindresorhus/type-fest/
   * Matches a JSON object.
   * This type can be useful to enforce some input to be JSON-compatible or as a super-type to be extended from. 
   */
  export type JsonObject = {[Key in string]?: JsonValue}

  /**
   * From https://github.com/sindresorhus/type-fest/
   * Matches a JSON array.
   */
  export interface JsonArray extends Array<JsonValue> {}

  /**
   * From https://github.com/sindresorhus/type-fest/
   * Matches any valid JSON value.
   */
  export type JsonValue = string | number | boolean | JsonObject | JsonArray | null

  /**
   * Matches a JSON object.
   * Unlike `JsonObject`, this type allows undefined and read-only properties.
   */
  export type InputJsonObject = {readonly [Key in string]?: InputJsonValue | null}

  /**
   * Matches a JSON array.
   * Unlike `JsonArray`, readonly arrays are assignable to this type.
   */
  export interface InputJsonArray extends ReadonlyArray<InputJsonValue | null> {}

  /**
   * Matches any valid value that can be used as an input for operations like
   * create and update as the value of a JSON field. Unlike `JsonValue`, this
   * type allows read-only arrays and read-only object properties and disallows
   * `null` at the top level.
   *
   * `null` cannot be used as the value of a JSON field because its meaning
   * would be ambiguous. Use `Prisma.JsonNull` to store the JSON null value or
   * `Prisma.DbNull` to clear the JSON value and set the field to the database
   * NULL value instead.
   *
   * @see https://www.prisma.io/docs/concepts/components/prisma-client/working-with-fields/working-with-json-fields#filtering-by-null-values
   */
  export type InputJsonValue = string | number | boolean | InputJsonObject | InputJsonArray

  /**
   * Helper for filtering JSON entries that have `null` on the database (empty on the db)
   * 
   * @see https://www.prisma.io/docs/concepts/components/prisma-client/working-with-fields/working-with-json-fields#filtering-on-a-json-field
   */
  export const DbNull: 'DbNull'

  /**
   * Helper for filtering JSON entries that have JSON `null` values (not empty on the db)
   * 
   * @see https://www.prisma.io/docs/concepts/components/prisma-client/working-with-fields/working-with-json-fields#filtering-on-a-json-field
   */
  export const JsonNull: 'JsonNull'

  /**
   * Helper for filtering JSON entries that are `Prisma.DbNull` or `Prisma.JsonNull`
   * 
   * @see https://www.prisma.io/docs/concepts/components/prisma-client/working-with-fields/working-with-json-fields#filtering-on-a-json-field
   */
  export const AnyNull: 'AnyNull'

  type SelectAndInclude = {
    select: any
    include: any
  }
  type HasSelect = {
    select: any
  }
  type HasInclude = {
    include: any
  }
  type CheckSelect<T, S, U> = T extends SelectAndInclude
    ? 'Please either choose `select` or `include`'
    : T extends HasSelect
    ? U
    : T extends HasInclude
    ? U
    : S

  /**
   * Get the type of the value, that the Promise holds.
   */
  export type PromiseType<T extends PromiseLike<any>> = T extends PromiseLike<infer U> ? U : T;

  /**
   * Get the return type of a function which returns a Promise.
   */
  export type PromiseReturnType<T extends (...args: any) => Promise<any>> = PromiseType<ReturnType<T>>

  /**
   * From T, pick a set of properties whose keys are in the union K
   */
  type Prisma__Pick<T, K extends keyof T> = {
      [P in K]: T[P];
  };


  export type Enumerable<T> = T | Array<T>;

  export type RequiredKeys<T> = {
    [K in keyof T]-?: {} extends Prisma__Pick<T, K> ? never : K
  }[keyof T]

  export type TruthyKeys<T> = {
    [key in keyof T]: T[key] extends false | undefined | null ? never : key
  }[keyof T]

  export type TrueKeys<T> = TruthyKeys<Prisma__Pick<T, RequiredKeys<T>>>

  /**
   * Subset
   * @desc From `T` pick properties that exist in `U`. Simple version of Intersection
   */
  export type Subset<T, U> = {
    [key in keyof T]: key extends keyof U ? T[key] : never;
  };

  /**
   * SelectSubset
   * @desc From `T` pick properties that exist in `U`. Simple version of Intersection.
   * Additionally, it validates, if both select and include are present. If the case, it errors.
   */
  export type SelectSubset<T, U> = {
    [key in keyof T]: key extends keyof U ? T[key] : never
  } &
    (T extends SelectAndInclude
      ? 'Please either choose `select` or `include`.'
      : {})

  /**
   * Subset + Intersection
   * @desc From `T` pick properties that exist in `U` and intersect `K`
   */
  export type SubsetIntersection<T, U, K> = {
    [key in keyof T]: key extends keyof U ? T[key] : never
  } &
    K

  type Without<T, U> = { [P in Exclude<keyof T, keyof U>]?: never };

  /**
   * XOR is needed to have a real mutually exclusive union type
   * https://stackoverflow.com/questions/42123407/does-typescript-support-mutually-exclusive-types
   */
  type XOR<T, U> =
    T extends object ?
    U extends object ?
      (Without<T, U> & U) | (Without<U, T> & T)
    : U : T


  /**
   * Is T a Record?
   */
  type IsObject<T extends any> = T extends Array<any>
  ? False
  : T extends Date
  ? False
  : T extends Buffer
  ? False
  : T extends BigInt
  ? False
  : T extends object
  ? True
  : False


  /**
   * If it's T[], return T
   */
  export type UnEnumerate<T extends unknown> = T extends Array<infer U> ? U : T

  /**
   * From ts-toolbelt
   */

  type __Either<O extends object, K extends Key> = Omit<O, K> &
    {
      // Merge all but K
      [P in K]: Prisma__Pick<O, P & keyof O> // With K possibilities
    }[K]

  type EitherStrict<O extends object, K extends Key> = Strict<__Either<O, K>>

  type EitherLoose<O extends object, K extends Key> = ComputeRaw<__Either<O, K>>

  type _Either<
    O extends object,
    K extends Key,
    strict extends Boolean
  > = {
    1: EitherStrict<O, K>
    0: EitherLoose<O, K>
  }[strict]

  type Either<
    O extends object,
    K extends Key,
    strict extends Boolean = 1
  > = O extends unknown ? _Either<O, K, strict> : never

  export type Union = any

  type PatchUndefined<O extends object, O1 extends object> = {
    [K in keyof O]: O[K] extends undefined ? At<O1, K> : O[K]
  } & {}

  /** Helper Types for "Merge" **/
  export type IntersectOf<U extends Union> = (
    U extends unknown ? (k: U) => void : never
  ) extends (k: infer I) => void
    ? I
    : never

  export type Overwrite<O extends object, O1 extends object> = {
      [K in keyof O]: K extends keyof O1 ? O1[K] : O[K];
  } & {};

  type _Merge<U extends object> = IntersectOf<Overwrite<U, {
      [K in keyof U]-?: At<U, K>;
  }>>;

  type Key = string | number | symbol;
  type AtBasic<O extends object, K extends Key> = K extends keyof O ? O[K] : never;
  type AtStrict<O extends object, K extends Key> = O[K & keyof O];
  type AtLoose<O extends object, K extends Key> = O extends unknown ? AtStrict<O, K> : never;
  export type At<O extends object, K extends Key, strict extends Boolean = 1> = {
      1: AtStrict<O, K>;
      0: AtLoose<O, K>;
  }[strict];

  export type ComputeRaw<A extends any> = A extends Function ? A : {
    [K in keyof A]: A[K];
  } & {};

  export type OptionalFlat<O> = {
    [K in keyof O]?: O[K];
  } & {};

  type _Record<K extends keyof any, T> = {
    [P in K]: T;
  };

  type _Strict<U, _U = U> = U extends unknown ? U & OptionalFlat<_Record<Exclude<Keys<_U>, keyof U>, never>> : never;

  export type Strict<U extends object> = ComputeRaw<_Strict<U>>;
  /** End Helper Types for "Merge" **/

  export type Merge<U extends object> = ComputeRaw<_Merge<Strict<U>>>;

  /**
  A [[Boolean]]
  */
  export type Boolean = True | False

  // /**
  // 1
  // */
  export type True = 1

  /**
  0
  */
  export type False = 0

  export type Not<B extends Boolean> = {
    0: 1
    1: 0
  }[B]

  export type Extends<A1 extends any, A2 extends any> = [A1] extends [never]
    ? 0 // anything `never` is false
    : A1 extends A2
    ? 1
    : 0

  export type Has<U extends Union, U1 extends Union> = Not<
    Extends<Exclude<U1, U>, U1>
  >

  export type Or<B1 extends Boolean, B2 extends Boolean> = {
    0: {
      0: 0
      1: 1
    }
    1: {
      0: 1
      1: 1
    }
  }[B1][B2]

  export type Keys<U extends Union> = U extends unknown ? keyof U : never

  type Exact<A, W = unknown> = 
  W extends unknown ? A extends Narrowable ? Cast<A, W> : Cast<
  {[K in keyof A]: K extends keyof W ? Exact<A[K], W[K]> : never},
  {[K in keyof W]: K extends keyof A ? Exact<A[K], W[K]> : W[K]}>
  : never;

  type Narrowable = string | number | boolean | bigint;

  type Cast<A, B> = A extends B ? A : B;

  export const type: unique symbol;

  export function validator<V>(): <S>(select: Exact<S, V>) => S;

  /**
   * Used by group by
   */

  export type GetScalarType<T, O> = O extends object ? {
    [P in keyof T]: P extends keyof O
      ? O[P]
      : never
  } : never

  type FieldPaths<
    T,
    U = Omit<T, '_avg' | '_sum' | '_count' | '_min' | '_max'>
  > = IsObject<T> extends True ? U : T

  type GetHavingFields<T> = {
    [K in keyof T]: Or<
      Or<Extends<'OR', K>, Extends<'AND', K>>,
      Extends<'NOT', K>
    > extends True
      ? // infer is only needed to not hit TS limit
        // based on the brilliant idea of Pierre-Antoine Mills
        // https://github.com/microsoft/TypeScript/issues/30188#issuecomment-478938437
        T[K] extends infer TK
        ? GetHavingFields<UnEnumerate<TK> extends object ? Merge<UnEnumerate<TK>> : never>
        : never
      : {} extends FieldPaths<T[K]>
      ? never
      : K
  }[keyof T]

  /**
   * Convert tuple to union
   */
  type _TupleToUnion<T> = T extends (infer E)[] ? E : never
  type TupleToUnion<K extends readonly any[]> = _TupleToUnion<K>
  type MaybeTupleToUnion<T> = T extends any[] ? TupleToUnion<T> : T

  /**
   * Like `Pick`, but with an array
   */
  type PickArray<T, K extends Array<keyof T>> = Prisma__Pick<T, TupleToUnion<K>>

  /**
   * Exclude all keys with underscores
   */
  type ExcludeUnderscoreKeys<T extends string> = T extends `_${string}` ? never : T

  class PrismaClientFetcher {
    private readonly prisma;
    private readonly debug;
    private readonly hooks?;
    constructor(prisma: PrismaClient<any, any>, debug?: boolean, hooks?: Hooks | undefined);
    request<T>(document: any, dataPath?: string[], rootField?: string, typeName?: string, isList?: boolean, callsite?: string): Promise<T>;
    sanitizeMessage(message: string): string;
    protected unpack(document: any, data: any, path: string[], rootField?: string, isList?: boolean): any;
  }

  export const ModelName: {
    Client: 'Client',
    Session: 'Session',
    Receptionist: 'Receptionist',
    SessionReceptionist: 'SessionReceptionist',
    Medic: 'Medic',
    Appointement: 'Appointement',
    Prescription: 'Prescription',
    Report: 'Report',
    Exam: 'Exam',
    SessionMedic: 'SessionMedic'
  };

  export type ModelName = (typeof ModelName)[keyof typeof ModelName]


  export type Datasources = {
    db?: Datasource
  }

  export type RejectOnNotFound = boolean | ((error: Error) => Error)
  export type RejectPerModel = { [P in ModelName]?: RejectOnNotFound }
  export type RejectPerOperation =  { [P in "findUnique" | "findFirst"]?: RejectPerModel | RejectOnNotFound } 
  type IsReject<T> = T extends true ? True : T extends (err: Error) => Error ? True : False
  export type HasReject<
    GlobalRejectSettings extends Prisma.PrismaClientOptions['rejectOnNotFound'],
    LocalRejectSettings,
    Action extends PrismaAction,
    Model extends ModelName
  > = LocalRejectSettings extends RejectOnNotFound
    ? IsReject<LocalRejectSettings>
    : GlobalRejectSettings extends RejectPerOperation
    ? Action extends keyof GlobalRejectSettings
      ? GlobalRejectSettings[Action] extends RejectOnNotFound
        ? IsReject<GlobalRejectSettings[Action]>
        : GlobalRejectSettings[Action] extends RejectPerModel
        ? Model extends keyof GlobalRejectSettings[Action]
          ? IsReject<GlobalRejectSettings[Action][Model]>
          : False
        : False
      : False
    : IsReject<GlobalRejectSettings>
  export type ErrorFormat = 'pretty' | 'colorless' | 'minimal'

  export interface PrismaClientOptions {
    /**
     * Configure findUnique/findFirst to throw an error if the query returns null. 
     *  * @example
     * ```
     * // Reject on both findUnique/findFirst
     * rejectOnNotFound: true
     * // Reject only on findFirst with a custom error
     * rejectOnNotFound: { findFirst: (err) => new Error("Custom Error")}
     * // Reject on user.findUnique with a custom error
     * rejectOnNotFound: { findUnique: {User: (err) => new Error("User not found")}}
     * ```
     */
    rejectOnNotFound?: RejectOnNotFound | RejectPerOperation
    /**
     * Overwrites the datasource url from your prisma.schema file
     */
    datasources?: Datasources

    /**
     * @default "colorless"
     */
    errorFormat?: ErrorFormat

    /**
     * @example
     * ```
     * // Defaults to stdout
     * log: ['query', 'info', 'warn', 'error']
     * 
     * // Emit as events
     * log: [
     *  { emit: 'stdout', level: 'query' },
     *  { emit: 'stdout', level: 'info' },
     *  { emit: 'stdout', level: 'warn' }
     *  { emit: 'stdout', level: 'error' }
     * ]
     * ```
     * Read more in our [docs](https://www.prisma.io/docs/reference/tools-and-interfaces/prisma-client/logging#the-log-option).
     */
    log?: Array<LogLevel | LogDefinition>
  }

  export type Hooks = {
    beforeRequest?: (options: { query: string, path: string[], rootField?: string, typeName?: string, document: any }) => any
  }

  /* Types for Logging */
  export type LogLevel = 'info' | 'query' | 'warn' | 'error'
  export type LogDefinition = {
    level: LogLevel
    emit: 'stdout' | 'event'
  }

  export type GetLogType<T extends LogLevel | LogDefinition> = T extends LogDefinition ? T['emit'] extends 'event' ? T['level'] : never : never
  export type GetEvents<T extends any> = T extends Array<LogLevel | LogDefinition> ?
    GetLogType<T[0]> | GetLogType<T[1]> | GetLogType<T[2]> | GetLogType<T[3]>
    : never

  export type QueryEvent = {
    timestamp: Date
    query: string
    params: string
    duration: number
    target: string
  }

  export type LogEvent = {
    timestamp: Date
    message: string
    target: string
  }
  /* End Types for Logging */


  export type PrismaAction =
    | 'findUnique'
    | 'findMany'
    | 'findFirst'
    | 'create'
    | 'createMany'
    | 'update'
    | 'updateMany'
    | 'upsert'
    | 'delete'
    | 'deleteMany'
    | 'executeRaw'
    | 'queryRaw'
    | 'aggregate'
    | 'count'
    | 'runCommandRaw'
    | 'findRaw'

  /**
   * These options are being passed in to the middleware as "params"
   */
  export type MiddlewareParams = {
    model?: ModelName
    action: PrismaAction
    args: any
    dataPath: string[]
    runInTransaction: boolean
  }

  /**
   * The `T` type makes sure, that the `return proceed` is not forgotten in the middleware implementation
   */
  export type Middleware<T = any> = (
    params: MiddlewareParams,
    next: (params: MiddlewareParams) => Promise<T>,
  ) => Promise<T>

  // tested in getLogLevel.test.ts
  export function getLogLevel(log: Array<LogLevel | LogDefinition>): LogLevel | undefined;

  export type Datasource = {
    url?: string
  }

  /**
   * Count Types
   */


  /**
   * Count Type ClientCountOutputType
   */


  export type ClientCountOutputType = {
    Session: number
    Appointment: number
    Pescription: number
    Report: number
    Exam: number
  }

  export type ClientCountOutputTypeSelect = {
    Session?: boolean
    Appointment?: boolean
    Pescription?: boolean
    Report?: boolean
    Exam?: boolean
  }

  export type ClientCountOutputTypeGetPayload<
    S extends boolean | null | undefined | ClientCountOutputTypeArgs,
    U = keyof S
      > = S extends true
        ? ClientCountOutputType
    : S extends undefined
    ? never
    : S extends ClientCountOutputTypeArgs
    ?'include' extends U
    ? ClientCountOutputType 
    : 'select' extends U
    ? {
    [P in TrueKeys<S['select']>]:
    P extends keyof ClientCountOutputType ? ClientCountOutputType[P] : never
  } 
    : ClientCountOutputType
  : ClientCountOutputType




  // Custom InputTypes

  /**
   * ClientCountOutputType without action
   */
  export type ClientCountOutputTypeArgs = {
    /**
     * Select specific fields to fetch from the ClientCountOutputType
     * 
    **/
    select?: ClientCountOutputTypeSelect | null
  }



  /**
   * Count Type ReceptionistCountOutputType
   */


  export type ReceptionistCountOutputType = {
    SessionReceptionist: number
  }

  export type ReceptionistCountOutputTypeSelect = {
    SessionReceptionist?: boolean
  }

  export type ReceptionistCountOutputTypeGetPayload<
    S extends boolean | null | undefined | ReceptionistCountOutputTypeArgs,
    U = keyof S
      > = S extends true
        ? ReceptionistCountOutputType
    : S extends undefined
    ? never
    : S extends ReceptionistCountOutputTypeArgs
    ?'include' extends U
    ? ReceptionistCountOutputType 
    : 'select' extends U
    ? {
    [P in TrueKeys<S['select']>]:
    P extends keyof ReceptionistCountOutputType ? ReceptionistCountOutputType[P] : never
  } 
    : ReceptionistCountOutputType
  : ReceptionistCountOutputType




  // Custom InputTypes

  /**
   * ReceptionistCountOutputType without action
   */
  export type ReceptionistCountOutputTypeArgs = {
    /**
     * Select specific fields to fetch from the ReceptionistCountOutputType
     * 
    **/
    select?: ReceptionistCountOutputTypeSelect | null
  }



  /**
   * Count Type MedicCountOutputType
   */


  export type MedicCountOutputType = {
    SessionMedic: number
    Appointment: number
    Pescription: number
    Report: number
    Exam: number
  }

  export type MedicCountOutputTypeSelect = {
    SessionMedic?: boolean
    Appointment?: boolean
    Pescription?: boolean
    Report?: boolean
    Exam?: boolean
  }

  export type MedicCountOutputTypeGetPayload<
    S extends boolean | null | undefined | MedicCountOutputTypeArgs,
    U = keyof S
      > = S extends true
        ? MedicCountOutputType
    : S extends undefined
    ? never
    : S extends MedicCountOutputTypeArgs
    ?'include' extends U
    ? MedicCountOutputType 
    : 'select' extends U
    ? {
    [P in TrueKeys<S['select']>]:
    P extends keyof MedicCountOutputType ? MedicCountOutputType[P] : never
  } 
    : MedicCountOutputType
  : MedicCountOutputType




  // Custom InputTypes

  /**
   * MedicCountOutputType without action
   */
  export type MedicCountOutputTypeArgs = {
    /**
     * Select specific fields to fetch from the MedicCountOutputType
     * 
    **/
    select?: MedicCountOutputTypeSelect | null
  }



  /**
   * Models
   */

  /**
   * Model Client
   */


  export type AggregateClient = {
    _count: ClientCountAggregateOutputType | null
    _avg: ClientAvgAggregateOutputType | null
    _sum: ClientSumAggregateOutputType | null
    _min: ClientMinAggregateOutputType | null
    _max: ClientMaxAggregateOutputType | null
  }

  export type ClientAvgAggregateOutputType = {
    id: number | null
  }

  export type ClientSumAggregateOutputType = {
    id: number | null
  }

  export type ClientMinAggregateOutputType = {
    id: number | null
    cpf: string | null
    name: string | null
    email: string | null
    password: string | null
    adress: string | null
    phone: string | null
    birthday: Date | null
    createdAt: Date | null
    updatedAt: Date | null
  }

  export type ClientMaxAggregateOutputType = {
    id: number | null
    cpf: string | null
    name: string | null
    email: string | null
    password: string | null
    adress: string | null
    phone: string | null
    birthday: Date | null
    createdAt: Date | null
    updatedAt: Date | null
  }

  export type ClientCountAggregateOutputType = {
    id: number
    cpf: number
    name: number
    email: number
    password: number
    adress: number
    phone: number
    birthday: number
    createdAt: number
    updatedAt: number
    _all: number
  }


  export type ClientAvgAggregateInputType = {
    id?: true
  }

  export type ClientSumAggregateInputType = {
    id?: true
  }

  export type ClientMinAggregateInputType = {
    id?: true
    cpf?: true
    name?: true
    email?: true
    password?: true
    adress?: true
    phone?: true
    birthday?: true
    createdAt?: true
    updatedAt?: true
  }

  export type ClientMaxAggregateInputType = {
    id?: true
    cpf?: true
    name?: true
    email?: true
    password?: true
    adress?: true
    phone?: true
    birthday?: true
    createdAt?: true
    updatedAt?: true
  }

  export type ClientCountAggregateInputType = {
    id?: true
    cpf?: true
    name?: true
    email?: true
    password?: true
    adress?: true
    phone?: true
    birthday?: true
    createdAt?: true
    updatedAt?: true
    _all?: true
  }

  export type ClientAggregateArgs = {
    /**
     * Filter which Client to aggregate.
     * 
    **/
    where?: ClientWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of Clients to fetch.
     * 
    **/
    orderBy?: Enumerable<ClientOrderByWithRelationInput>
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the start position
     * 
    **/
    cursor?: ClientWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` Clients from the position of the cursor.
     * 
    **/
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` Clients.
     * 
    **/
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Count returned Clients
    **/
    _count?: true | ClientCountAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to average
    **/
    _avg?: ClientAvgAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to sum
    **/
    _sum?: ClientSumAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to find the minimum value
    **/
    _min?: ClientMinAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to find the maximum value
    **/
    _max?: ClientMaxAggregateInputType
  }

  export type GetClientAggregateType<T extends ClientAggregateArgs> = {
        [P in keyof T & keyof AggregateClient]: P extends '_count' | 'count'
      ? T[P] extends true
        ? number
        : GetScalarType<T[P], AggregateClient[P]>
      : GetScalarType<T[P], AggregateClient[P]>
  }




  export type ClientGroupByArgs = {
    where?: ClientWhereInput
    orderBy?: Enumerable<ClientOrderByWithAggregationInput>
    by: Array<ClientScalarFieldEnum>
    having?: ClientScalarWhereWithAggregatesInput
    take?: number
    skip?: number
    _count?: ClientCountAggregateInputType | true
    _avg?: ClientAvgAggregateInputType
    _sum?: ClientSumAggregateInputType
    _min?: ClientMinAggregateInputType
    _max?: ClientMaxAggregateInputType
  }


  export type ClientGroupByOutputType = {
    id: number
    cpf: string
    name: string
    email: string | null
    password: string
    adress: string | null
    phone: string | null
    birthday: Date | null
    createdAt: Date
    updatedAt: Date
    _count: ClientCountAggregateOutputType | null
    _avg: ClientAvgAggregateOutputType | null
    _sum: ClientSumAggregateOutputType | null
    _min: ClientMinAggregateOutputType | null
    _max: ClientMaxAggregateOutputType | null
  }

  type GetClientGroupByPayload<T extends ClientGroupByArgs> = PrismaPromise<
    Array<
      PickArray<ClientGroupByOutputType, T['by']> &
        {
          [P in ((keyof T) & (keyof ClientGroupByOutputType))]: P extends '_count'
            ? T[P] extends boolean
              ? number
              : GetScalarType<T[P], ClientGroupByOutputType[P]>
            : GetScalarType<T[P], ClientGroupByOutputType[P]>
        }
      >
    >


  export type ClientSelect = {
    id?: boolean
    cpf?: boolean
    name?: boolean
    email?: boolean
    password?: boolean
    adress?: boolean
    phone?: boolean
    birthday?: boolean
    createdAt?: boolean
    updatedAt?: boolean
    Session?: boolean | SessionFindManyArgs
    Appointment?: boolean | AppointementFindManyArgs
    Pescription?: boolean | PrescriptionFindManyArgs
    Report?: boolean | ReportFindManyArgs
    Exam?: boolean | ExamFindManyArgs
    _count?: boolean | ClientCountOutputTypeArgs
  }

  export type ClientInclude = {
    Session?: boolean | SessionFindManyArgs
    Appointment?: boolean | AppointementFindManyArgs
    Pescription?: boolean | PrescriptionFindManyArgs
    Report?: boolean | ReportFindManyArgs
    Exam?: boolean | ExamFindManyArgs
    _count?: boolean | ClientCountOutputTypeArgs
  }

  export type ClientGetPayload<
    S extends boolean | null | undefined | ClientArgs,
    U = keyof S
      > = S extends true
        ? Client
    : S extends undefined
    ? never
    : S extends ClientArgs | ClientFindManyArgs
    ?'include' extends U
    ? Client  & {
    [P in TrueKeys<S['include']>]:
        P extends 'Session' ? Array < SessionGetPayload<S['include'][P]>>  :
        P extends 'Appointment' ? Array < AppointementGetPayload<S['include'][P]>>  :
        P extends 'Pescription' ? Array < PrescriptionGetPayload<S['include'][P]>>  :
        P extends 'Report' ? Array < ReportGetPayload<S['include'][P]>>  :
        P extends 'Exam' ? Array < ExamGetPayload<S['include'][P]>>  :
        P extends '_count' ? ClientCountOutputTypeGetPayload<S['include'][P]> :  never
  } 
    : 'select' extends U
    ? {
    [P in TrueKeys<S['select']>]:
        P extends 'Session' ? Array < SessionGetPayload<S['select'][P]>>  :
        P extends 'Appointment' ? Array < AppointementGetPayload<S['select'][P]>>  :
        P extends 'Pescription' ? Array < PrescriptionGetPayload<S['select'][P]>>  :
        P extends 'Report' ? Array < ReportGetPayload<S['select'][P]>>  :
        P extends 'Exam' ? Array < ExamGetPayload<S['select'][P]>>  :
        P extends '_count' ? ClientCountOutputTypeGetPayload<S['select'][P]> :  P extends keyof Client ? Client[P] : never
  } 
    : Client
  : Client


  type ClientCountArgs = Merge<
    Omit<ClientFindManyArgs, 'select' | 'include'> & {
      select?: ClientCountAggregateInputType | true
    }
  >

  export interface ClientDelegate<GlobalRejectSettings> {
    /**
     * Find zero or one Client that matches the filter.
     * @param {ClientFindUniqueArgs} args - Arguments to find a Client
     * @example
     * // Get one Client
     * const client = await prisma.client.findUnique({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
    **/
    findUnique<T extends ClientFindUniqueArgs,  LocalRejectSettings = T["rejectOnNotFound"] extends RejectOnNotFound ? T['rejectOnNotFound'] : undefined>(
      args: SelectSubset<T, ClientFindUniqueArgs>
    ): HasReject<GlobalRejectSettings, LocalRejectSettings, 'findUnique', 'Client'> extends True ? CheckSelect<T, Prisma__ClientClient<Client>, Prisma__ClientClient<ClientGetPayload<T>>> : CheckSelect<T, Prisma__ClientClient<Client | null >, Prisma__ClientClient<ClientGetPayload<T> | null >>

    /**
     * Find the first Client that matches the filter.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {ClientFindFirstArgs} args - Arguments to find a Client
     * @example
     * // Get one Client
     * const client = await prisma.client.findFirst({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
    **/
    findFirst<T extends ClientFindFirstArgs,  LocalRejectSettings = T["rejectOnNotFound"] extends RejectOnNotFound ? T['rejectOnNotFound'] : undefined>(
      args?: SelectSubset<T, ClientFindFirstArgs>
    ): HasReject<GlobalRejectSettings, LocalRejectSettings, 'findFirst', 'Client'> extends True ? CheckSelect<T, Prisma__ClientClient<Client>, Prisma__ClientClient<ClientGetPayload<T>>> : CheckSelect<T, Prisma__ClientClient<Client | null >, Prisma__ClientClient<ClientGetPayload<T> | null >>

    /**
     * Find zero or more Clients that matches the filter.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {ClientFindManyArgs=} args - Arguments to filter and select certain fields only.
     * @example
     * // Get all Clients
     * const clients = await prisma.client.findMany()
     * 
     * // Get first 10 Clients
     * const clients = await prisma.client.findMany({ take: 10 })
     * 
     * // Only select the `id`
     * const clientWithIdOnly = await prisma.client.findMany({ select: { id: true } })
     * 
    **/
    findMany<T extends ClientFindManyArgs>(
      args?: SelectSubset<T, ClientFindManyArgs>
    ): CheckSelect<T, PrismaPromise<Array<Client>>, PrismaPromise<Array<ClientGetPayload<T>>>>

    /**
     * Create a Client.
     * @param {ClientCreateArgs} args - Arguments to create a Client.
     * @example
     * // Create one Client
     * const Client = await prisma.client.create({
     *   data: {
     *     // ... data to create a Client
     *   }
     * })
     * 
    **/
    create<T extends ClientCreateArgs>(
      args: SelectSubset<T, ClientCreateArgs>
    ): CheckSelect<T, Prisma__ClientClient<Client>, Prisma__ClientClient<ClientGetPayload<T>>>

    /**
     * Create many Clients.
     *     @param {ClientCreateManyArgs} args - Arguments to create many Clients.
     *     @example
     *     // Create many Clients
     *     const client = await prisma.client.createMany({
     *       data: {
     *         // ... provide data here
     *       }
     *     })
     *     
    **/
    createMany<T extends ClientCreateManyArgs>(
      args?: SelectSubset<T, ClientCreateManyArgs>
    ): PrismaPromise<BatchPayload>

    /**
     * Delete a Client.
     * @param {ClientDeleteArgs} args - Arguments to delete one Client.
     * @example
     * // Delete one Client
     * const Client = await prisma.client.delete({
     *   where: {
     *     // ... filter to delete one Client
     *   }
     * })
     * 
    **/
    delete<T extends ClientDeleteArgs>(
      args: SelectSubset<T, ClientDeleteArgs>
    ): CheckSelect<T, Prisma__ClientClient<Client>, Prisma__ClientClient<ClientGetPayload<T>>>

    /**
     * Update one Client.
     * @param {ClientUpdateArgs} args - Arguments to update one Client.
     * @example
     * // Update one Client
     * const client = await prisma.client.update({
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: {
     *     // ... provide data here
     *   }
     * })
     * 
    **/
    update<T extends ClientUpdateArgs>(
      args: SelectSubset<T, ClientUpdateArgs>
    ): CheckSelect<T, Prisma__ClientClient<Client>, Prisma__ClientClient<ClientGetPayload<T>>>

    /**
     * Delete zero or more Clients.
     * @param {ClientDeleteManyArgs} args - Arguments to filter Clients to delete.
     * @example
     * // Delete a few Clients
     * const { count } = await prisma.client.deleteMany({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     * 
    **/
    deleteMany<T extends ClientDeleteManyArgs>(
      args?: SelectSubset<T, ClientDeleteManyArgs>
    ): PrismaPromise<BatchPayload>

    /**
     * Update zero or more Clients.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {ClientUpdateManyArgs} args - Arguments to update one or more rows.
     * @example
     * // Update many Clients
     * const client = await prisma.client.updateMany({
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: {
     *     // ... provide data here
     *   }
     * })
     * 
    **/
    updateMany<T extends ClientUpdateManyArgs>(
      args: SelectSubset<T, ClientUpdateManyArgs>
    ): PrismaPromise<BatchPayload>

    /**
     * Create or update one Client.
     * @param {ClientUpsertArgs} args - Arguments to update or create a Client.
     * @example
     * // Update or create a Client
     * const client = await prisma.client.upsert({
     *   create: {
     *     // ... data to create a Client
     *   },
     *   update: {
     *     // ... in case it already exists, update
     *   },
     *   where: {
     *     // ... the filter for the Client we want to update
     *   }
     * })
    **/
    upsert<T extends ClientUpsertArgs>(
      args: SelectSubset<T, ClientUpsertArgs>
    ): CheckSelect<T, Prisma__ClientClient<Client>, Prisma__ClientClient<ClientGetPayload<T>>>

    /**
     * Count the number of Clients.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {ClientCountArgs} args - Arguments to filter Clients to count.
     * @example
     * // Count the number of Clients
     * const count = await prisma.client.count({
     *   where: {
     *     // ... the filter for the Clients we want to count
     *   }
     * })
    **/
    count<T extends ClientCountArgs>(
      args?: Subset<T, ClientCountArgs>,
    ): PrismaPromise<
      T extends _Record<'select', any>
        ? T['select'] extends true
          ? number
          : GetScalarType<T['select'], ClientCountAggregateOutputType>
        : number
    >

    /**
     * Allows you to perform aggregations operations on a Client.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {ClientAggregateArgs} args - Select which aggregations you would like to apply and on what fields.
     * @example
     * // Ordered by age ascending
     * // Where email contains prisma.io
     * // Limited to the 10 users
     * const aggregations = await prisma.user.aggregate({
     *   _avg: {
     *     age: true,
     *   },
     *   where: {
     *     email: {
     *       contains: "prisma.io",
     *     },
     *   },
     *   orderBy: {
     *     age: "asc",
     *   },
     *   take: 10,
     * })
    **/
    aggregate<T extends ClientAggregateArgs>(args: Subset<T, ClientAggregateArgs>): PrismaPromise<GetClientAggregateType<T>>

    /**
     * Group by Client.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {ClientGroupByArgs} args - Group by arguments.
     * @example
     * // Group by city, order by createdAt, get count
     * const result = await prisma.user.groupBy({
     *   by: ['city', 'createdAt'],
     *   orderBy: {
     *     createdAt: true
     *   },
     *   _count: {
     *     _all: true
     *   },
     * })
     * 
    **/
    groupBy<
      T extends ClientGroupByArgs,
      HasSelectOrTake extends Or<
        Extends<'skip', Keys<T>>,
        Extends<'take', Keys<T>>
      >,
      OrderByArg extends True extends HasSelectOrTake
        ? { orderBy: ClientGroupByArgs['orderBy'] }
        : { orderBy?: ClientGroupByArgs['orderBy'] },
      OrderFields extends ExcludeUnderscoreKeys<Keys<MaybeTupleToUnion<T['orderBy']>>>,
      ByFields extends TupleToUnion<T['by']>,
      ByValid extends Has<ByFields, OrderFields>,
      HavingFields extends GetHavingFields<T['having']>,
      HavingValid extends Has<ByFields, HavingFields>,
      ByEmpty extends T['by'] extends never[] ? True : False,
      InputErrors extends ByEmpty extends True
      ? `Error: "by" must not be empty.`
      : HavingValid extends False
      ? {
          [P in HavingFields]: P extends ByFields
            ? never
            : P extends string
            ? `Error: Field "${P}" used in "having" needs to be provided in "by".`
            : [
                Error,
                'Field ',
                P,
                ` in "having" needs to be provided in "by"`,
              ]
        }[HavingFields]
      : 'take' extends Keys<T>
      ? 'orderBy' extends Keys<T>
        ? ByValid extends True
          ? {}
          : {
              [P in OrderFields]: P extends ByFields
                ? never
                : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
            }[OrderFields]
        : 'Error: If you provide "take", you also need to provide "orderBy"'
      : 'skip' extends Keys<T>
      ? 'orderBy' extends Keys<T>
        ? ByValid extends True
          ? {}
          : {
              [P in OrderFields]: P extends ByFields
                ? never
                : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
            }[OrderFields]
        : 'Error: If you provide "skip", you also need to provide "orderBy"'
      : ByValid extends True
      ? {}
      : {
          [P in OrderFields]: P extends ByFields
            ? never
            : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
        }[OrderFields]
    >(args: SubsetIntersection<T, ClientGroupByArgs, OrderByArg> & InputErrors): {} extends InputErrors ? GetClientGroupByPayload<T> : PrismaPromise<InputErrors>
  }

  /**
   * The delegate class that acts as a "Promise-like" for Client.
   * Why is this prefixed with `Prisma__`?
   * Because we want to prevent naming conflicts as mentioned in
   * https://github.com/prisma/prisma-client-js/issues/707
   */
  export class Prisma__ClientClient<T> implements PrismaPromise<T> {
    [prisma]: true;
    private readonly _dmmf;
    private readonly _fetcher;
    private readonly _queryType;
    private readonly _rootField;
    private readonly _clientMethod;
    private readonly _args;
    private readonly _dataPath;
    private readonly _errorFormat;
    private readonly _measurePerformance?;
    private _isList;
    private _callsite;
    private _requestPromise?;
    constructor(_dmmf: runtime.DMMFClass, _fetcher: PrismaClientFetcher, _queryType: 'query' | 'mutation', _rootField: string, _clientMethod: string, _args: any, _dataPath: string[], _errorFormat: ErrorFormat, _measurePerformance?: boolean | undefined, _isList?: boolean);
    readonly [Symbol.toStringTag]: 'PrismaClientPromise';

    Session<T extends SessionFindManyArgs = {}>(args?: Subset<T, SessionFindManyArgs>): CheckSelect<T, PrismaPromise<Array<Session>>, PrismaPromise<Array<SessionGetPayload<T>>>>;

    Appointment<T extends AppointementFindManyArgs = {}>(args?: Subset<T, AppointementFindManyArgs>): CheckSelect<T, PrismaPromise<Array<Appointement>>, PrismaPromise<Array<AppointementGetPayload<T>>>>;

    Pescription<T extends PrescriptionFindManyArgs = {}>(args?: Subset<T, PrescriptionFindManyArgs>): CheckSelect<T, PrismaPromise<Array<Prescription>>, PrismaPromise<Array<PrescriptionGetPayload<T>>>>;

    Report<T extends ReportFindManyArgs = {}>(args?: Subset<T, ReportFindManyArgs>): CheckSelect<T, PrismaPromise<Array<Report>>, PrismaPromise<Array<ReportGetPayload<T>>>>;

    Exam<T extends ExamFindManyArgs = {}>(args?: Subset<T, ExamFindManyArgs>): CheckSelect<T, PrismaPromise<Array<Exam>>, PrismaPromise<Array<ExamGetPayload<T>>>>;

    private get _document();
    /**
     * Attaches callbacks for the resolution and/or rejection of the Promise.
     * @param onfulfilled The callback to execute when the Promise is resolved.
     * @param onrejected The callback to execute when the Promise is rejected.
     * @returns A Promise for the completion of which ever callback is executed.
     */
    then<TResult1 = T, TResult2 = never>(onfulfilled?: ((value: T) => TResult1 | PromiseLike<TResult1>) | undefined | null, onrejected?: ((reason: any) => TResult2 | PromiseLike<TResult2>) | undefined | null): Promise<TResult1 | TResult2>;
    /**
     * Attaches a callback for only the rejection of the Promise.
     * @param onrejected The callback to execute when the Promise is rejected.
     * @returns A Promise for the completion of the callback.
     */
    catch<TResult = never>(onrejected?: ((reason: any) => TResult | PromiseLike<TResult>) | undefined | null): Promise<T | TResult>;
    /**
     * Attaches a callback that is invoked when the Promise is settled (fulfilled or rejected). The
     * resolved value cannot be modified from the callback.
     * @param onfinally The callback to execute when the Promise is settled (fulfilled or rejected).
     * @returns A Promise for the completion of the callback.
     */
    finally(onfinally?: (() => void) | undefined | null): Promise<T>;
  }

  // Custom InputTypes

  /**
   * Client findUnique
   */
  export type ClientFindUniqueArgs = {
    /**
     * Select specific fields to fetch from the Client
     * 
    **/
    select?: ClientSelect | null
    /**
     * Choose, which related nodes to fetch as well.
     * 
    **/
    include?: ClientInclude | null
    /**
     * Throw an Error if a Client can't be found
     * 
    **/
    rejectOnNotFound?: RejectOnNotFound
    /**
     * Filter, which Client to fetch.
     * 
    **/
    where: ClientWhereUniqueInput
  }


  /**
   * Client findFirst
   */
  export type ClientFindFirstArgs = {
    /**
     * Select specific fields to fetch from the Client
     * 
    **/
    select?: ClientSelect | null
    /**
     * Choose, which related nodes to fetch as well.
     * 
    **/
    include?: ClientInclude | null
    /**
     * Throw an Error if a Client can't be found
     * 
    **/
    rejectOnNotFound?: RejectOnNotFound
    /**
     * Filter, which Client to fetch.
     * 
    **/
    where?: ClientWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of Clients to fetch.
     * 
    **/
    orderBy?: Enumerable<ClientOrderByWithRelationInput>
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for searching for Clients.
     * 
    **/
    cursor?: ClientWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` Clients from the position of the cursor.
     * 
    **/
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` Clients.
     * 
    **/
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/distinct Distinct Docs}
     * 
     * Filter by unique combinations of Clients.
     * 
    **/
    distinct?: Enumerable<ClientScalarFieldEnum>
  }


  /**
   * Client findMany
   */
  export type ClientFindManyArgs = {
    /**
     * Select specific fields to fetch from the Client
     * 
    **/
    select?: ClientSelect | null
    /**
     * Choose, which related nodes to fetch as well.
     * 
    **/
    include?: ClientInclude | null
    /**
     * Filter, which Clients to fetch.
     * 
    **/
    where?: ClientWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of Clients to fetch.
     * 
    **/
    orderBy?: Enumerable<ClientOrderByWithRelationInput>
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for listing Clients.
     * 
    **/
    cursor?: ClientWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` Clients from the position of the cursor.
     * 
    **/
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` Clients.
     * 
    **/
    skip?: number
    distinct?: Enumerable<ClientScalarFieldEnum>
  }


  /**
   * Client create
   */
  export type ClientCreateArgs = {
    /**
     * Select specific fields to fetch from the Client
     * 
    **/
    select?: ClientSelect | null
    /**
     * Choose, which related nodes to fetch as well.
     * 
    **/
    include?: ClientInclude | null
    /**
     * The data needed to create a Client.
     * 
    **/
    data: XOR<ClientCreateInput, ClientUncheckedCreateInput>
  }


  /**
   * Client createMany
   */
  export type ClientCreateManyArgs = {
    /**
     * The data used to create many Clients.
     * 
    **/
    data: Enumerable<ClientCreateManyInput>
    skipDuplicates?: boolean
  }


  /**
   * Client update
   */
  export type ClientUpdateArgs = {
    /**
     * Select specific fields to fetch from the Client
     * 
    **/
    select?: ClientSelect | null
    /**
     * Choose, which related nodes to fetch as well.
     * 
    **/
    include?: ClientInclude | null
    /**
     * The data needed to update a Client.
     * 
    **/
    data: XOR<ClientUpdateInput, ClientUncheckedUpdateInput>
    /**
     * Choose, which Client to update.
     * 
    **/
    where: ClientWhereUniqueInput
  }


  /**
   * Client updateMany
   */
  export type ClientUpdateManyArgs = {
    /**
     * The data used to update Clients.
     * 
    **/
    data: XOR<ClientUpdateManyMutationInput, ClientUncheckedUpdateManyInput>
    /**
     * Filter which Clients to update
     * 
    **/
    where?: ClientWhereInput
  }


  /**
   * Client upsert
   */
  export type ClientUpsertArgs = {
    /**
     * Select specific fields to fetch from the Client
     * 
    **/
    select?: ClientSelect | null
    /**
     * Choose, which related nodes to fetch as well.
     * 
    **/
    include?: ClientInclude | null
    /**
     * The filter to search for the Client to update in case it exists.
     * 
    **/
    where: ClientWhereUniqueInput
    /**
     * In case the Client found by the `where` argument doesn't exist, create a new Client with this data.
     * 
    **/
    create: XOR<ClientCreateInput, ClientUncheckedCreateInput>
    /**
     * In case the Client was found with the provided `where` argument, update it with this data.
     * 
    **/
    update: XOR<ClientUpdateInput, ClientUncheckedUpdateInput>
  }


  /**
   * Client delete
   */
  export type ClientDeleteArgs = {
    /**
     * Select specific fields to fetch from the Client
     * 
    **/
    select?: ClientSelect | null
    /**
     * Choose, which related nodes to fetch as well.
     * 
    **/
    include?: ClientInclude | null
    /**
     * Filter which Client to delete.
     * 
    **/
    where: ClientWhereUniqueInput
  }


  /**
   * Client deleteMany
   */
  export type ClientDeleteManyArgs = {
    /**
     * Filter which Clients to delete
     * 
    **/
    where?: ClientWhereInput
  }


  /**
   * Client without action
   */
  export type ClientArgs = {
    /**
     * Select specific fields to fetch from the Client
     * 
    **/
    select?: ClientSelect | null
    /**
     * Choose, which related nodes to fetch as well.
     * 
    **/
    include?: ClientInclude | null
  }



  /**
   * Model Session
   */


  export type AggregateSession = {
    _count: SessionCountAggregateOutputType | null
    _avg: SessionAvgAggregateOutputType | null
    _sum: SessionSumAggregateOutputType | null
    _min: SessionMinAggregateOutputType | null
    _max: SessionMaxAggregateOutputType | null
  }

  export type SessionAvgAggregateOutputType = {
    id: number | null
    clientId: number | null
  }

  export type SessionSumAggregateOutputType = {
    id: number | null
    clientId: number | null
  }

  export type SessionMinAggregateOutputType = {
    id: number | null
    clientId: number | null
    token: string | null
    createdAt: Date | null
    updatedAt: Date | null
  }

  export type SessionMaxAggregateOutputType = {
    id: number | null
    clientId: number | null
    token: string | null
    createdAt: Date | null
    updatedAt: Date | null
  }

  export type SessionCountAggregateOutputType = {
    id: number
    clientId: number
    token: number
    createdAt: number
    updatedAt: number
    _all: number
  }


  export type SessionAvgAggregateInputType = {
    id?: true
    clientId?: true
  }

  export type SessionSumAggregateInputType = {
    id?: true
    clientId?: true
  }

  export type SessionMinAggregateInputType = {
    id?: true
    clientId?: true
    token?: true
    createdAt?: true
    updatedAt?: true
  }

  export type SessionMaxAggregateInputType = {
    id?: true
    clientId?: true
    token?: true
    createdAt?: true
    updatedAt?: true
  }

  export type SessionCountAggregateInputType = {
    id?: true
    clientId?: true
    token?: true
    createdAt?: true
    updatedAt?: true
    _all?: true
  }

  export type SessionAggregateArgs = {
    /**
     * Filter which Session to aggregate.
     * 
    **/
    where?: SessionWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of Sessions to fetch.
     * 
    **/
    orderBy?: Enumerable<SessionOrderByWithRelationInput>
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the start position
     * 
    **/
    cursor?: SessionWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` Sessions from the position of the cursor.
     * 
    **/
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` Sessions.
     * 
    **/
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Count returned Sessions
    **/
    _count?: true | SessionCountAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to average
    **/
    _avg?: SessionAvgAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to sum
    **/
    _sum?: SessionSumAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to find the minimum value
    **/
    _min?: SessionMinAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to find the maximum value
    **/
    _max?: SessionMaxAggregateInputType
  }

  export type GetSessionAggregateType<T extends SessionAggregateArgs> = {
        [P in keyof T & keyof AggregateSession]: P extends '_count' | 'count'
      ? T[P] extends true
        ? number
        : GetScalarType<T[P], AggregateSession[P]>
      : GetScalarType<T[P], AggregateSession[P]>
  }




  export type SessionGroupByArgs = {
    where?: SessionWhereInput
    orderBy?: Enumerable<SessionOrderByWithAggregationInput>
    by: Array<SessionScalarFieldEnum>
    having?: SessionScalarWhereWithAggregatesInput
    take?: number
    skip?: number
    _count?: SessionCountAggregateInputType | true
    _avg?: SessionAvgAggregateInputType
    _sum?: SessionSumAggregateInputType
    _min?: SessionMinAggregateInputType
    _max?: SessionMaxAggregateInputType
  }


  export type SessionGroupByOutputType = {
    id: number
    clientId: number | null
    token: string
    createdAt: Date
    updatedAt: Date
    _count: SessionCountAggregateOutputType | null
    _avg: SessionAvgAggregateOutputType | null
    _sum: SessionSumAggregateOutputType | null
    _min: SessionMinAggregateOutputType | null
    _max: SessionMaxAggregateOutputType | null
  }

  type GetSessionGroupByPayload<T extends SessionGroupByArgs> = PrismaPromise<
    Array<
      PickArray<SessionGroupByOutputType, T['by']> &
        {
          [P in ((keyof T) & (keyof SessionGroupByOutputType))]: P extends '_count'
            ? T[P] extends boolean
              ? number
              : GetScalarType<T[P], SessionGroupByOutputType[P]>
            : GetScalarType<T[P], SessionGroupByOutputType[P]>
        }
      >
    >


  export type SessionSelect = {
    id?: boolean
    clientId?: boolean
    Client?: boolean | ClientArgs
    token?: boolean
    createdAt?: boolean
    updatedAt?: boolean
  }

  export type SessionInclude = {
    Client?: boolean | ClientArgs
  }

  export type SessionGetPayload<
    S extends boolean | null | undefined | SessionArgs,
    U = keyof S
      > = S extends true
        ? Session
    : S extends undefined
    ? never
    : S extends SessionArgs | SessionFindManyArgs
    ?'include' extends U
    ? Session  & {
    [P in TrueKeys<S['include']>]:
        P extends 'Client' ? ClientGetPayload<S['include'][P]> | null :  never
  } 
    : 'select' extends U
    ? {
    [P in TrueKeys<S['select']>]:
        P extends 'Client' ? ClientGetPayload<S['select'][P]> | null :  P extends keyof Session ? Session[P] : never
  } 
    : Session
  : Session


  type SessionCountArgs = Merge<
    Omit<SessionFindManyArgs, 'select' | 'include'> & {
      select?: SessionCountAggregateInputType | true
    }
  >

  export interface SessionDelegate<GlobalRejectSettings> {
    /**
     * Find zero or one Session that matches the filter.
     * @param {SessionFindUniqueArgs} args - Arguments to find a Session
     * @example
     * // Get one Session
     * const session = await prisma.session.findUnique({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
    **/
    findUnique<T extends SessionFindUniqueArgs,  LocalRejectSettings = T["rejectOnNotFound"] extends RejectOnNotFound ? T['rejectOnNotFound'] : undefined>(
      args: SelectSubset<T, SessionFindUniqueArgs>
    ): HasReject<GlobalRejectSettings, LocalRejectSettings, 'findUnique', 'Session'> extends True ? CheckSelect<T, Prisma__SessionClient<Session>, Prisma__SessionClient<SessionGetPayload<T>>> : CheckSelect<T, Prisma__SessionClient<Session | null >, Prisma__SessionClient<SessionGetPayload<T> | null >>

    /**
     * Find the first Session that matches the filter.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {SessionFindFirstArgs} args - Arguments to find a Session
     * @example
     * // Get one Session
     * const session = await prisma.session.findFirst({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
    **/
    findFirst<T extends SessionFindFirstArgs,  LocalRejectSettings = T["rejectOnNotFound"] extends RejectOnNotFound ? T['rejectOnNotFound'] : undefined>(
      args?: SelectSubset<T, SessionFindFirstArgs>
    ): HasReject<GlobalRejectSettings, LocalRejectSettings, 'findFirst', 'Session'> extends True ? CheckSelect<T, Prisma__SessionClient<Session>, Prisma__SessionClient<SessionGetPayload<T>>> : CheckSelect<T, Prisma__SessionClient<Session | null >, Prisma__SessionClient<SessionGetPayload<T> | null >>

    /**
     * Find zero or more Sessions that matches the filter.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {SessionFindManyArgs=} args - Arguments to filter and select certain fields only.
     * @example
     * // Get all Sessions
     * const sessions = await prisma.session.findMany()
     * 
     * // Get first 10 Sessions
     * const sessions = await prisma.session.findMany({ take: 10 })
     * 
     * // Only select the `id`
     * const sessionWithIdOnly = await prisma.session.findMany({ select: { id: true } })
     * 
    **/
    findMany<T extends SessionFindManyArgs>(
      args?: SelectSubset<T, SessionFindManyArgs>
    ): CheckSelect<T, PrismaPromise<Array<Session>>, PrismaPromise<Array<SessionGetPayload<T>>>>

    /**
     * Create a Session.
     * @param {SessionCreateArgs} args - Arguments to create a Session.
     * @example
     * // Create one Session
     * const Session = await prisma.session.create({
     *   data: {
     *     // ... data to create a Session
     *   }
     * })
     * 
    **/
    create<T extends SessionCreateArgs>(
      args: SelectSubset<T, SessionCreateArgs>
    ): CheckSelect<T, Prisma__SessionClient<Session>, Prisma__SessionClient<SessionGetPayload<T>>>

    /**
     * Create many Sessions.
     *     @param {SessionCreateManyArgs} args - Arguments to create many Sessions.
     *     @example
     *     // Create many Sessions
     *     const session = await prisma.session.createMany({
     *       data: {
     *         // ... provide data here
     *       }
     *     })
     *     
    **/
    createMany<T extends SessionCreateManyArgs>(
      args?: SelectSubset<T, SessionCreateManyArgs>
    ): PrismaPromise<BatchPayload>

    /**
     * Delete a Session.
     * @param {SessionDeleteArgs} args - Arguments to delete one Session.
     * @example
     * // Delete one Session
     * const Session = await prisma.session.delete({
     *   where: {
     *     // ... filter to delete one Session
     *   }
     * })
     * 
    **/
    delete<T extends SessionDeleteArgs>(
      args: SelectSubset<T, SessionDeleteArgs>
    ): CheckSelect<T, Prisma__SessionClient<Session>, Prisma__SessionClient<SessionGetPayload<T>>>

    /**
     * Update one Session.
     * @param {SessionUpdateArgs} args - Arguments to update one Session.
     * @example
     * // Update one Session
     * const session = await prisma.session.update({
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: {
     *     // ... provide data here
     *   }
     * })
     * 
    **/
    update<T extends SessionUpdateArgs>(
      args: SelectSubset<T, SessionUpdateArgs>
    ): CheckSelect<T, Prisma__SessionClient<Session>, Prisma__SessionClient<SessionGetPayload<T>>>

    /**
     * Delete zero or more Sessions.
     * @param {SessionDeleteManyArgs} args - Arguments to filter Sessions to delete.
     * @example
     * // Delete a few Sessions
     * const { count } = await prisma.session.deleteMany({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     * 
    **/
    deleteMany<T extends SessionDeleteManyArgs>(
      args?: SelectSubset<T, SessionDeleteManyArgs>
    ): PrismaPromise<BatchPayload>

    /**
     * Update zero or more Sessions.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {SessionUpdateManyArgs} args - Arguments to update one or more rows.
     * @example
     * // Update many Sessions
     * const session = await prisma.session.updateMany({
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: {
     *     // ... provide data here
     *   }
     * })
     * 
    **/
    updateMany<T extends SessionUpdateManyArgs>(
      args: SelectSubset<T, SessionUpdateManyArgs>
    ): PrismaPromise<BatchPayload>

    /**
     * Create or update one Session.
     * @param {SessionUpsertArgs} args - Arguments to update or create a Session.
     * @example
     * // Update or create a Session
     * const session = await prisma.session.upsert({
     *   create: {
     *     // ... data to create a Session
     *   },
     *   update: {
     *     // ... in case it already exists, update
     *   },
     *   where: {
     *     // ... the filter for the Session we want to update
     *   }
     * })
    **/
    upsert<T extends SessionUpsertArgs>(
      args: SelectSubset<T, SessionUpsertArgs>
    ): CheckSelect<T, Prisma__SessionClient<Session>, Prisma__SessionClient<SessionGetPayload<T>>>

    /**
     * Count the number of Sessions.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {SessionCountArgs} args - Arguments to filter Sessions to count.
     * @example
     * // Count the number of Sessions
     * const count = await prisma.session.count({
     *   where: {
     *     // ... the filter for the Sessions we want to count
     *   }
     * })
    **/
    count<T extends SessionCountArgs>(
      args?: Subset<T, SessionCountArgs>,
    ): PrismaPromise<
      T extends _Record<'select', any>
        ? T['select'] extends true
          ? number
          : GetScalarType<T['select'], SessionCountAggregateOutputType>
        : number
    >

    /**
     * Allows you to perform aggregations operations on a Session.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {SessionAggregateArgs} args - Select which aggregations you would like to apply and on what fields.
     * @example
     * // Ordered by age ascending
     * // Where email contains prisma.io
     * // Limited to the 10 users
     * const aggregations = await prisma.user.aggregate({
     *   _avg: {
     *     age: true,
     *   },
     *   where: {
     *     email: {
     *       contains: "prisma.io",
     *     },
     *   },
     *   orderBy: {
     *     age: "asc",
     *   },
     *   take: 10,
     * })
    **/
    aggregate<T extends SessionAggregateArgs>(args: Subset<T, SessionAggregateArgs>): PrismaPromise<GetSessionAggregateType<T>>

    /**
     * Group by Session.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {SessionGroupByArgs} args - Group by arguments.
     * @example
     * // Group by city, order by createdAt, get count
     * const result = await prisma.user.groupBy({
     *   by: ['city', 'createdAt'],
     *   orderBy: {
     *     createdAt: true
     *   },
     *   _count: {
     *     _all: true
     *   },
     * })
     * 
    **/
    groupBy<
      T extends SessionGroupByArgs,
      HasSelectOrTake extends Or<
        Extends<'skip', Keys<T>>,
        Extends<'take', Keys<T>>
      >,
      OrderByArg extends True extends HasSelectOrTake
        ? { orderBy: SessionGroupByArgs['orderBy'] }
        : { orderBy?: SessionGroupByArgs['orderBy'] },
      OrderFields extends ExcludeUnderscoreKeys<Keys<MaybeTupleToUnion<T['orderBy']>>>,
      ByFields extends TupleToUnion<T['by']>,
      ByValid extends Has<ByFields, OrderFields>,
      HavingFields extends GetHavingFields<T['having']>,
      HavingValid extends Has<ByFields, HavingFields>,
      ByEmpty extends T['by'] extends never[] ? True : False,
      InputErrors extends ByEmpty extends True
      ? `Error: "by" must not be empty.`
      : HavingValid extends False
      ? {
          [P in HavingFields]: P extends ByFields
            ? never
            : P extends string
            ? `Error: Field "${P}" used in "having" needs to be provided in "by".`
            : [
                Error,
                'Field ',
                P,
                ` in "having" needs to be provided in "by"`,
              ]
        }[HavingFields]
      : 'take' extends Keys<T>
      ? 'orderBy' extends Keys<T>
        ? ByValid extends True
          ? {}
          : {
              [P in OrderFields]: P extends ByFields
                ? never
                : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
            }[OrderFields]
        : 'Error: If you provide "take", you also need to provide "orderBy"'
      : 'skip' extends Keys<T>
      ? 'orderBy' extends Keys<T>
        ? ByValid extends True
          ? {}
          : {
              [P in OrderFields]: P extends ByFields
                ? never
                : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
            }[OrderFields]
        : 'Error: If you provide "skip", you also need to provide "orderBy"'
      : ByValid extends True
      ? {}
      : {
          [P in OrderFields]: P extends ByFields
            ? never
            : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
        }[OrderFields]
    >(args: SubsetIntersection<T, SessionGroupByArgs, OrderByArg> & InputErrors): {} extends InputErrors ? GetSessionGroupByPayload<T> : PrismaPromise<InputErrors>
  }

  /**
   * The delegate class that acts as a "Promise-like" for Session.
   * Why is this prefixed with `Prisma__`?
   * Because we want to prevent naming conflicts as mentioned in
   * https://github.com/prisma/prisma-client-js/issues/707
   */
  export class Prisma__SessionClient<T> implements PrismaPromise<T> {
    [prisma]: true;
    private readonly _dmmf;
    private readonly _fetcher;
    private readonly _queryType;
    private readonly _rootField;
    private readonly _clientMethod;
    private readonly _args;
    private readonly _dataPath;
    private readonly _errorFormat;
    private readonly _measurePerformance?;
    private _isList;
    private _callsite;
    private _requestPromise?;
    constructor(_dmmf: runtime.DMMFClass, _fetcher: PrismaClientFetcher, _queryType: 'query' | 'mutation', _rootField: string, _clientMethod: string, _args: any, _dataPath: string[], _errorFormat: ErrorFormat, _measurePerformance?: boolean | undefined, _isList?: boolean);
    readonly [Symbol.toStringTag]: 'PrismaClientPromise';

    Client<T extends ClientArgs = {}>(args?: Subset<T, ClientArgs>): CheckSelect<T, Prisma__ClientClient<Client | null >, Prisma__ClientClient<ClientGetPayload<T> | null >>;

    private get _document();
    /**
     * Attaches callbacks for the resolution and/or rejection of the Promise.
     * @param onfulfilled The callback to execute when the Promise is resolved.
     * @param onrejected The callback to execute when the Promise is rejected.
     * @returns A Promise for the completion of which ever callback is executed.
     */
    then<TResult1 = T, TResult2 = never>(onfulfilled?: ((value: T) => TResult1 | PromiseLike<TResult1>) | undefined | null, onrejected?: ((reason: any) => TResult2 | PromiseLike<TResult2>) | undefined | null): Promise<TResult1 | TResult2>;
    /**
     * Attaches a callback for only the rejection of the Promise.
     * @param onrejected The callback to execute when the Promise is rejected.
     * @returns A Promise for the completion of the callback.
     */
    catch<TResult = never>(onrejected?: ((reason: any) => TResult | PromiseLike<TResult>) | undefined | null): Promise<T | TResult>;
    /**
     * Attaches a callback that is invoked when the Promise is settled (fulfilled or rejected). The
     * resolved value cannot be modified from the callback.
     * @param onfinally The callback to execute when the Promise is settled (fulfilled or rejected).
     * @returns A Promise for the completion of the callback.
     */
    finally(onfinally?: (() => void) | undefined | null): Promise<T>;
  }

  // Custom InputTypes

  /**
   * Session findUnique
   */
  export type SessionFindUniqueArgs = {
    /**
     * Select specific fields to fetch from the Session
     * 
    **/
    select?: SessionSelect | null
    /**
     * Choose, which related nodes to fetch as well.
     * 
    **/
    include?: SessionInclude | null
    /**
     * Throw an Error if a Session can't be found
     * 
    **/
    rejectOnNotFound?: RejectOnNotFound
    /**
     * Filter, which Session to fetch.
     * 
    **/
    where: SessionWhereUniqueInput
  }


  /**
   * Session findFirst
   */
  export type SessionFindFirstArgs = {
    /**
     * Select specific fields to fetch from the Session
     * 
    **/
    select?: SessionSelect | null
    /**
     * Choose, which related nodes to fetch as well.
     * 
    **/
    include?: SessionInclude | null
    /**
     * Throw an Error if a Session can't be found
     * 
    **/
    rejectOnNotFound?: RejectOnNotFound
    /**
     * Filter, which Session to fetch.
     * 
    **/
    where?: SessionWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of Sessions to fetch.
     * 
    **/
    orderBy?: Enumerable<SessionOrderByWithRelationInput>
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for searching for Sessions.
     * 
    **/
    cursor?: SessionWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` Sessions from the position of the cursor.
     * 
    **/
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` Sessions.
     * 
    **/
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/distinct Distinct Docs}
     * 
     * Filter by unique combinations of Sessions.
     * 
    **/
    distinct?: Enumerable<SessionScalarFieldEnum>
  }


  /**
   * Session findMany
   */
  export type SessionFindManyArgs = {
    /**
     * Select specific fields to fetch from the Session
     * 
    **/
    select?: SessionSelect | null
    /**
     * Choose, which related nodes to fetch as well.
     * 
    **/
    include?: SessionInclude | null
    /**
     * Filter, which Sessions to fetch.
     * 
    **/
    where?: SessionWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of Sessions to fetch.
     * 
    **/
    orderBy?: Enumerable<SessionOrderByWithRelationInput>
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for listing Sessions.
     * 
    **/
    cursor?: SessionWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` Sessions from the position of the cursor.
     * 
    **/
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` Sessions.
     * 
    **/
    skip?: number
    distinct?: Enumerable<SessionScalarFieldEnum>
  }


  /**
   * Session create
   */
  export type SessionCreateArgs = {
    /**
     * Select specific fields to fetch from the Session
     * 
    **/
    select?: SessionSelect | null
    /**
     * Choose, which related nodes to fetch as well.
     * 
    **/
    include?: SessionInclude | null
    /**
     * The data needed to create a Session.
     * 
    **/
    data: XOR<SessionCreateInput, SessionUncheckedCreateInput>
  }


  /**
   * Session createMany
   */
  export type SessionCreateManyArgs = {
    /**
     * The data used to create many Sessions.
     * 
    **/
    data: Enumerable<SessionCreateManyInput>
    skipDuplicates?: boolean
  }


  /**
   * Session update
   */
  export type SessionUpdateArgs = {
    /**
     * Select specific fields to fetch from the Session
     * 
    **/
    select?: SessionSelect | null
    /**
     * Choose, which related nodes to fetch as well.
     * 
    **/
    include?: SessionInclude | null
    /**
     * The data needed to update a Session.
     * 
    **/
    data: XOR<SessionUpdateInput, SessionUncheckedUpdateInput>
    /**
     * Choose, which Session to update.
     * 
    **/
    where: SessionWhereUniqueInput
  }


  /**
   * Session updateMany
   */
  export type SessionUpdateManyArgs = {
    /**
     * The data used to update Sessions.
     * 
    **/
    data: XOR<SessionUpdateManyMutationInput, SessionUncheckedUpdateManyInput>
    /**
     * Filter which Sessions to update
     * 
    **/
    where?: SessionWhereInput
  }


  /**
   * Session upsert
   */
  export type SessionUpsertArgs = {
    /**
     * Select specific fields to fetch from the Session
     * 
    **/
    select?: SessionSelect | null
    /**
     * Choose, which related nodes to fetch as well.
     * 
    **/
    include?: SessionInclude | null
    /**
     * The filter to search for the Session to update in case it exists.
     * 
    **/
    where: SessionWhereUniqueInput
    /**
     * In case the Session found by the `where` argument doesn't exist, create a new Session with this data.
     * 
    **/
    create: XOR<SessionCreateInput, SessionUncheckedCreateInput>
    /**
     * In case the Session was found with the provided `where` argument, update it with this data.
     * 
    **/
    update: XOR<SessionUpdateInput, SessionUncheckedUpdateInput>
  }


  /**
   * Session delete
   */
  export type SessionDeleteArgs = {
    /**
     * Select specific fields to fetch from the Session
     * 
    **/
    select?: SessionSelect | null
    /**
     * Choose, which related nodes to fetch as well.
     * 
    **/
    include?: SessionInclude | null
    /**
     * Filter which Session to delete.
     * 
    **/
    where: SessionWhereUniqueInput
  }


  /**
   * Session deleteMany
   */
  export type SessionDeleteManyArgs = {
    /**
     * Filter which Sessions to delete
     * 
    **/
    where?: SessionWhereInput
  }


  /**
   * Session without action
   */
  export type SessionArgs = {
    /**
     * Select specific fields to fetch from the Session
     * 
    **/
    select?: SessionSelect | null
    /**
     * Choose, which related nodes to fetch as well.
     * 
    **/
    include?: SessionInclude | null
  }



  /**
   * Model Receptionist
   */


  export type AggregateReceptionist = {
    _count: ReceptionistCountAggregateOutputType | null
    _avg: ReceptionistAvgAggregateOutputType | null
    _sum: ReceptionistSumAggregateOutputType | null
    _min: ReceptionistMinAggregateOutputType | null
    _max: ReceptionistMaxAggregateOutputType | null
  }

  export type ReceptionistAvgAggregateOutputType = {
    id: number | null
  }

  export type ReceptionistSumAggregateOutputType = {
    id: number | null
  }

  export type ReceptionistMinAggregateOutputType = {
    id: number | null
    cpf: string | null
    name: string | null
    email: string | null
    password: string | null
    adress: string | null
    phone: string | null
    birthday: Date | null
    createdAt: Date | null
    updatedAt: Date | null
  }

  export type ReceptionistMaxAggregateOutputType = {
    id: number | null
    cpf: string | null
    name: string | null
    email: string | null
    password: string | null
    adress: string | null
    phone: string | null
    birthday: Date | null
    createdAt: Date | null
    updatedAt: Date | null
  }

  export type ReceptionistCountAggregateOutputType = {
    id: number
    cpf: number
    name: number
    email: number
    password: number
    adress: number
    phone: number
    birthday: number
    createdAt: number
    updatedAt: number
    _all: number
  }


  export type ReceptionistAvgAggregateInputType = {
    id?: true
  }

  export type ReceptionistSumAggregateInputType = {
    id?: true
  }

  export type ReceptionistMinAggregateInputType = {
    id?: true
    cpf?: true
    name?: true
    email?: true
    password?: true
    adress?: true
    phone?: true
    birthday?: true
    createdAt?: true
    updatedAt?: true
  }

  export type ReceptionistMaxAggregateInputType = {
    id?: true
    cpf?: true
    name?: true
    email?: true
    password?: true
    adress?: true
    phone?: true
    birthday?: true
    createdAt?: true
    updatedAt?: true
  }

  export type ReceptionistCountAggregateInputType = {
    id?: true
    cpf?: true
    name?: true
    email?: true
    password?: true
    adress?: true
    phone?: true
    birthday?: true
    createdAt?: true
    updatedAt?: true
    _all?: true
  }

  export type ReceptionistAggregateArgs = {
    /**
     * Filter which Receptionist to aggregate.
     * 
    **/
    where?: ReceptionistWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of Receptionists to fetch.
     * 
    **/
    orderBy?: Enumerable<ReceptionistOrderByWithRelationInput>
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the start position
     * 
    **/
    cursor?: ReceptionistWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` Receptionists from the position of the cursor.
     * 
    **/
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` Receptionists.
     * 
    **/
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Count returned Receptionists
    **/
    _count?: true | ReceptionistCountAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to average
    **/
    _avg?: ReceptionistAvgAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to sum
    **/
    _sum?: ReceptionistSumAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to find the minimum value
    **/
    _min?: ReceptionistMinAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to find the maximum value
    **/
    _max?: ReceptionistMaxAggregateInputType
  }

  export type GetReceptionistAggregateType<T extends ReceptionistAggregateArgs> = {
        [P in keyof T & keyof AggregateReceptionist]: P extends '_count' | 'count'
      ? T[P] extends true
        ? number
        : GetScalarType<T[P], AggregateReceptionist[P]>
      : GetScalarType<T[P], AggregateReceptionist[P]>
  }




  export type ReceptionistGroupByArgs = {
    where?: ReceptionistWhereInput
    orderBy?: Enumerable<ReceptionistOrderByWithAggregationInput>
    by: Array<ReceptionistScalarFieldEnum>
    having?: ReceptionistScalarWhereWithAggregatesInput
    take?: number
    skip?: number
    _count?: ReceptionistCountAggregateInputType | true
    _avg?: ReceptionistAvgAggregateInputType
    _sum?: ReceptionistSumAggregateInputType
    _min?: ReceptionistMinAggregateInputType
    _max?: ReceptionistMaxAggregateInputType
  }


  export type ReceptionistGroupByOutputType = {
    id: number
    cpf: string
    name: string
    email: string | null
    password: string
    adress: string | null
    phone: string | null
    birthday: Date | null
    createdAt: Date
    updatedAt: Date
    _count: ReceptionistCountAggregateOutputType | null
    _avg: ReceptionistAvgAggregateOutputType | null
    _sum: ReceptionistSumAggregateOutputType | null
    _min: ReceptionistMinAggregateOutputType | null
    _max: ReceptionistMaxAggregateOutputType | null
  }

  type GetReceptionistGroupByPayload<T extends ReceptionistGroupByArgs> = PrismaPromise<
    Array<
      PickArray<ReceptionistGroupByOutputType, T['by']> &
        {
          [P in ((keyof T) & (keyof ReceptionistGroupByOutputType))]: P extends '_count'
            ? T[P] extends boolean
              ? number
              : GetScalarType<T[P], ReceptionistGroupByOutputType[P]>
            : GetScalarType<T[P], ReceptionistGroupByOutputType[P]>
        }
      >
    >


  export type ReceptionistSelect = {
    id?: boolean
    cpf?: boolean
    name?: boolean
    email?: boolean
    password?: boolean
    adress?: boolean
    phone?: boolean
    birthday?: boolean
    createdAt?: boolean
    updatedAt?: boolean
    SessionReceptionist?: boolean | SessionReceptionistFindManyArgs
    _count?: boolean | ReceptionistCountOutputTypeArgs
  }

  export type ReceptionistInclude = {
    SessionReceptionist?: boolean | SessionReceptionistFindManyArgs
    _count?: boolean | ReceptionistCountOutputTypeArgs
  }

  export type ReceptionistGetPayload<
    S extends boolean | null | undefined | ReceptionistArgs,
    U = keyof S
      > = S extends true
        ? Receptionist
    : S extends undefined
    ? never
    : S extends ReceptionistArgs | ReceptionistFindManyArgs
    ?'include' extends U
    ? Receptionist  & {
    [P in TrueKeys<S['include']>]:
        P extends 'SessionReceptionist' ? Array < SessionReceptionistGetPayload<S['include'][P]>>  :
        P extends '_count' ? ReceptionistCountOutputTypeGetPayload<S['include'][P]> :  never
  } 
    : 'select' extends U
    ? {
    [P in TrueKeys<S['select']>]:
        P extends 'SessionReceptionist' ? Array < SessionReceptionistGetPayload<S['select'][P]>>  :
        P extends '_count' ? ReceptionistCountOutputTypeGetPayload<S['select'][P]> :  P extends keyof Receptionist ? Receptionist[P] : never
  } 
    : Receptionist
  : Receptionist


  type ReceptionistCountArgs = Merge<
    Omit<ReceptionistFindManyArgs, 'select' | 'include'> & {
      select?: ReceptionistCountAggregateInputType | true
    }
  >

  export interface ReceptionistDelegate<GlobalRejectSettings> {
    /**
     * Find zero or one Receptionist that matches the filter.
     * @param {ReceptionistFindUniqueArgs} args - Arguments to find a Receptionist
     * @example
     * // Get one Receptionist
     * const receptionist = await prisma.receptionist.findUnique({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
    **/
    findUnique<T extends ReceptionistFindUniqueArgs,  LocalRejectSettings = T["rejectOnNotFound"] extends RejectOnNotFound ? T['rejectOnNotFound'] : undefined>(
      args: SelectSubset<T, ReceptionistFindUniqueArgs>
    ): HasReject<GlobalRejectSettings, LocalRejectSettings, 'findUnique', 'Receptionist'> extends True ? CheckSelect<T, Prisma__ReceptionistClient<Receptionist>, Prisma__ReceptionistClient<ReceptionistGetPayload<T>>> : CheckSelect<T, Prisma__ReceptionistClient<Receptionist | null >, Prisma__ReceptionistClient<ReceptionistGetPayload<T> | null >>

    /**
     * Find the first Receptionist that matches the filter.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {ReceptionistFindFirstArgs} args - Arguments to find a Receptionist
     * @example
     * // Get one Receptionist
     * const receptionist = await prisma.receptionist.findFirst({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
    **/
    findFirst<T extends ReceptionistFindFirstArgs,  LocalRejectSettings = T["rejectOnNotFound"] extends RejectOnNotFound ? T['rejectOnNotFound'] : undefined>(
      args?: SelectSubset<T, ReceptionistFindFirstArgs>
    ): HasReject<GlobalRejectSettings, LocalRejectSettings, 'findFirst', 'Receptionist'> extends True ? CheckSelect<T, Prisma__ReceptionistClient<Receptionist>, Prisma__ReceptionistClient<ReceptionistGetPayload<T>>> : CheckSelect<T, Prisma__ReceptionistClient<Receptionist | null >, Prisma__ReceptionistClient<ReceptionistGetPayload<T> | null >>

    /**
     * Find zero or more Receptionists that matches the filter.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {ReceptionistFindManyArgs=} args - Arguments to filter and select certain fields only.
     * @example
     * // Get all Receptionists
     * const receptionists = await prisma.receptionist.findMany()
     * 
     * // Get first 10 Receptionists
     * const receptionists = await prisma.receptionist.findMany({ take: 10 })
     * 
     * // Only select the `id`
     * const receptionistWithIdOnly = await prisma.receptionist.findMany({ select: { id: true } })
     * 
    **/
    findMany<T extends ReceptionistFindManyArgs>(
      args?: SelectSubset<T, ReceptionistFindManyArgs>
    ): CheckSelect<T, PrismaPromise<Array<Receptionist>>, PrismaPromise<Array<ReceptionistGetPayload<T>>>>

    /**
     * Create a Receptionist.
     * @param {ReceptionistCreateArgs} args - Arguments to create a Receptionist.
     * @example
     * // Create one Receptionist
     * const Receptionist = await prisma.receptionist.create({
     *   data: {
     *     // ... data to create a Receptionist
     *   }
     * })
     * 
    **/
    create<T extends ReceptionistCreateArgs>(
      args: SelectSubset<T, ReceptionistCreateArgs>
    ): CheckSelect<T, Prisma__ReceptionistClient<Receptionist>, Prisma__ReceptionistClient<ReceptionistGetPayload<T>>>

    /**
     * Create many Receptionists.
     *     @param {ReceptionistCreateManyArgs} args - Arguments to create many Receptionists.
     *     @example
     *     // Create many Receptionists
     *     const receptionist = await prisma.receptionist.createMany({
     *       data: {
     *         // ... provide data here
     *       }
     *     })
     *     
    **/
    createMany<T extends ReceptionistCreateManyArgs>(
      args?: SelectSubset<T, ReceptionistCreateManyArgs>
    ): PrismaPromise<BatchPayload>

    /**
     * Delete a Receptionist.
     * @param {ReceptionistDeleteArgs} args - Arguments to delete one Receptionist.
     * @example
     * // Delete one Receptionist
     * const Receptionist = await prisma.receptionist.delete({
     *   where: {
     *     // ... filter to delete one Receptionist
     *   }
     * })
     * 
    **/
    delete<T extends ReceptionistDeleteArgs>(
      args: SelectSubset<T, ReceptionistDeleteArgs>
    ): CheckSelect<T, Prisma__ReceptionistClient<Receptionist>, Prisma__ReceptionistClient<ReceptionistGetPayload<T>>>

    /**
     * Update one Receptionist.
     * @param {ReceptionistUpdateArgs} args - Arguments to update one Receptionist.
     * @example
     * // Update one Receptionist
     * const receptionist = await prisma.receptionist.update({
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: {
     *     // ... provide data here
     *   }
     * })
     * 
    **/
    update<T extends ReceptionistUpdateArgs>(
      args: SelectSubset<T, ReceptionistUpdateArgs>
    ): CheckSelect<T, Prisma__ReceptionistClient<Receptionist>, Prisma__ReceptionistClient<ReceptionistGetPayload<T>>>

    /**
     * Delete zero or more Receptionists.
     * @param {ReceptionistDeleteManyArgs} args - Arguments to filter Receptionists to delete.
     * @example
     * // Delete a few Receptionists
     * const { count } = await prisma.receptionist.deleteMany({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     * 
    **/
    deleteMany<T extends ReceptionistDeleteManyArgs>(
      args?: SelectSubset<T, ReceptionistDeleteManyArgs>
    ): PrismaPromise<BatchPayload>

    /**
     * Update zero or more Receptionists.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {ReceptionistUpdateManyArgs} args - Arguments to update one or more rows.
     * @example
     * // Update many Receptionists
     * const receptionist = await prisma.receptionist.updateMany({
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: {
     *     // ... provide data here
     *   }
     * })
     * 
    **/
    updateMany<T extends ReceptionistUpdateManyArgs>(
      args: SelectSubset<T, ReceptionistUpdateManyArgs>
    ): PrismaPromise<BatchPayload>

    /**
     * Create or update one Receptionist.
     * @param {ReceptionistUpsertArgs} args - Arguments to update or create a Receptionist.
     * @example
     * // Update or create a Receptionist
     * const receptionist = await prisma.receptionist.upsert({
     *   create: {
     *     // ... data to create a Receptionist
     *   },
     *   update: {
     *     // ... in case it already exists, update
     *   },
     *   where: {
     *     // ... the filter for the Receptionist we want to update
     *   }
     * })
    **/
    upsert<T extends ReceptionistUpsertArgs>(
      args: SelectSubset<T, ReceptionistUpsertArgs>
    ): CheckSelect<T, Prisma__ReceptionistClient<Receptionist>, Prisma__ReceptionistClient<ReceptionistGetPayload<T>>>

    /**
     * Count the number of Receptionists.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {ReceptionistCountArgs} args - Arguments to filter Receptionists to count.
     * @example
     * // Count the number of Receptionists
     * const count = await prisma.receptionist.count({
     *   where: {
     *     // ... the filter for the Receptionists we want to count
     *   }
     * })
    **/
    count<T extends ReceptionistCountArgs>(
      args?: Subset<T, ReceptionistCountArgs>,
    ): PrismaPromise<
      T extends _Record<'select', any>
        ? T['select'] extends true
          ? number
          : GetScalarType<T['select'], ReceptionistCountAggregateOutputType>
        : number
    >

    /**
     * Allows you to perform aggregations operations on a Receptionist.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {ReceptionistAggregateArgs} args - Select which aggregations you would like to apply and on what fields.
     * @example
     * // Ordered by age ascending
     * // Where email contains prisma.io
     * // Limited to the 10 users
     * const aggregations = await prisma.user.aggregate({
     *   _avg: {
     *     age: true,
     *   },
     *   where: {
     *     email: {
     *       contains: "prisma.io",
     *     },
     *   },
     *   orderBy: {
     *     age: "asc",
     *   },
     *   take: 10,
     * })
    **/
    aggregate<T extends ReceptionistAggregateArgs>(args: Subset<T, ReceptionistAggregateArgs>): PrismaPromise<GetReceptionistAggregateType<T>>

    /**
     * Group by Receptionist.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {ReceptionistGroupByArgs} args - Group by arguments.
     * @example
     * // Group by city, order by createdAt, get count
     * const result = await prisma.user.groupBy({
     *   by: ['city', 'createdAt'],
     *   orderBy: {
     *     createdAt: true
     *   },
     *   _count: {
     *     _all: true
     *   },
     * })
     * 
    **/
    groupBy<
      T extends ReceptionistGroupByArgs,
      HasSelectOrTake extends Or<
        Extends<'skip', Keys<T>>,
        Extends<'take', Keys<T>>
      >,
      OrderByArg extends True extends HasSelectOrTake
        ? { orderBy: ReceptionistGroupByArgs['orderBy'] }
        : { orderBy?: ReceptionistGroupByArgs['orderBy'] },
      OrderFields extends ExcludeUnderscoreKeys<Keys<MaybeTupleToUnion<T['orderBy']>>>,
      ByFields extends TupleToUnion<T['by']>,
      ByValid extends Has<ByFields, OrderFields>,
      HavingFields extends GetHavingFields<T['having']>,
      HavingValid extends Has<ByFields, HavingFields>,
      ByEmpty extends T['by'] extends never[] ? True : False,
      InputErrors extends ByEmpty extends True
      ? `Error: "by" must not be empty.`
      : HavingValid extends False
      ? {
          [P in HavingFields]: P extends ByFields
            ? never
            : P extends string
            ? `Error: Field "${P}" used in "having" needs to be provided in "by".`
            : [
                Error,
                'Field ',
                P,
                ` in "having" needs to be provided in "by"`,
              ]
        }[HavingFields]
      : 'take' extends Keys<T>
      ? 'orderBy' extends Keys<T>
        ? ByValid extends True
          ? {}
          : {
              [P in OrderFields]: P extends ByFields
                ? never
                : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
            }[OrderFields]
        : 'Error: If you provide "take", you also need to provide "orderBy"'
      : 'skip' extends Keys<T>
      ? 'orderBy' extends Keys<T>
        ? ByValid extends True
          ? {}
          : {
              [P in OrderFields]: P extends ByFields
                ? never
                : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
            }[OrderFields]
        : 'Error: If you provide "skip", you also need to provide "orderBy"'
      : ByValid extends True
      ? {}
      : {
          [P in OrderFields]: P extends ByFields
            ? never
            : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
        }[OrderFields]
    >(args: SubsetIntersection<T, ReceptionistGroupByArgs, OrderByArg> & InputErrors): {} extends InputErrors ? GetReceptionistGroupByPayload<T> : PrismaPromise<InputErrors>
  }

  /**
   * The delegate class that acts as a "Promise-like" for Receptionist.
   * Why is this prefixed with `Prisma__`?
   * Because we want to prevent naming conflicts as mentioned in
   * https://github.com/prisma/prisma-client-js/issues/707
   */
  export class Prisma__ReceptionistClient<T> implements PrismaPromise<T> {
    [prisma]: true;
    private readonly _dmmf;
    private readonly _fetcher;
    private readonly _queryType;
    private readonly _rootField;
    private readonly _clientMethod;
    private readonly _args;
    private readonly _dataPath;
    private readonly _errorFormat;
    private readonly _measurePerformance?;
    private _isList;
    private _callsite;
    private _requestPromise?;
    constructor(_dmmf: runtime.DMMFClass, _fetcher: PrismaClientFetcher, _queryType: 'query' | 'mutation', _rootField: string, _clientMethod: string, _args: any, _dataPath: string[], _errorFormat: ErrorFormat, _measurePerformance?: boolean | undefined, _isList?: boolean);
    readonly [Symbol.toStringTag]: 'PrismaClientPromise';

    SessionReceptionist<T extends SessionReceptionistFindManyArgs = {}>(args?: Subset<T, SessionReceptionistFindManyArgs>): CheckSelect<T, PrismaPromise<Array<SessionReceptionist>>, PrismaPromise<Array<SessionReceptionistGetPayload<T>>>>;

    private get _document();
    /**
     * Attaches callbacks for the resolution and/or rejection of the Promise.
     * @param onfulfilled The callback to execute when the Promise is resolved.
     * @param onrejected The callback to execute when the Promise is rejected.
     * @returns A Promise for the completion of which ever callback is executed.
     */
    then<TResult1 = T, TResult2 = never>(onfulfilled?: ((value: T) => TResult1 | PromiseLike<TResult1>) | undefined | null, onrejected?: ((reason: any) => TResult2 | PromiseLike<TResult2>) | undefined | null): Promise<TResult1 | TResult2>;
    /**
     * Attaches a callback for only the rejection of the Promise.
     * @param onrejected The callback to execute when the Promise is rejected.
     * @returns A Promise for the completion of the callback.
     */
    catch<TResult = never>(onrejected?: ((reason: any) => TResult | PromiseLike<TResult>) | undefined | null): Promise<T | TResult>;
    /**
     * Attaches a callback that is invoked when the Promise is settled (fulfilled or rejected). The
     * resolved value cannot be modified from the callback.
     * @param onfinally The callback to execute when the Promise is settled (fulfilled or rejected).
     * @returns A Promise for the completion of the callback.
     */
    finally(onfinally?: (() => void) | undefined | null): Promise<T>;
  }

  // Custom InputTypes

  /**
   * Receptionist findUnique
   */
  export type ReceptionistFindUniqueArgs = {
    /**
     * Select specific fields to fetch from the Receptionist
     * 
    **/
    select?: ReceptionistSelect | null
    /**
     * Choose, which related nodes to fetch as well.
     * 
    **/
    include?: ReceptionistInclude | null
    /**
     * Throw an Error if a Receptionist can't be found
     * 
    **/
    rejectOnNotFound?: RejectOnNotFound
    /**
     * Filter, which Receptionist to fetch.
     * 
    **/
    where: ReceptionistWhereUniqueInput
  }


  /**
   * Receptionist findFirst
   */
  export type ReceptionistFindFirstArgs = {
    /**
     * Select specific fields to fetch from the Receptionist
     * 
    **/
    select?: ReceptionistSelect | null
    /**
     * Choose, which related nodes to fetch as well.
     * 
    **/
    include?: ReceptionistInclude | null
    /**
     * Throw an Error if a Receptionist can't be found
     * 
    **/
    rejectOnNotFound?: RejectOnNotFound
    /**
     * Filter, which Receptionist to fetch.
     * 
    **/
    where?: ReceptionistWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of Receptionists to fetch.
     * 
    **/
    orderBy?: Enumerable<ReceptionistOrderByWithRelationInput>
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for searching for Receptionists.
     * 
    **/
    cursor?: ReceptionistWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` Receptionists from the position of the cursor.
     * 
    **/
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` Receptionists.
     * 
    **/
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/distinct Distinct Docs}
     * 
     * Filter by unique combinations of Receptionists.
     * 
    **/
    distinct?: Enumerable<ReceptionistScalarFieldEnum>
  }


  /**
   * Receptionist findMany
   */
  export type ReceptionistFindManyArgs = {
    /**
     * Select specific fields to fetch from the Receptionist
     * 
    **/
    select?: ReceptionistSelect | null
    /**
     * Choose, which related nodes to fetch as well.
     * 
    **/
    include?: ReceptionistInclude | null
    /**
     * Filter, which Receptionists to fetch.
     * 
    **/
    where?: ReceptionistWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of Receptionists to fetch.
     * 
    **/
    orderBy?: Enumerable<ReceptionistOrderByWithRelationInput>
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for listing Receptionists.
     * 
    **/
    cursor?: ReceptionistWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` Receptionists from the position of the cursor.
     * 
    **/
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` Receptionists.
     * 
    **/
    skip?: number
    distinct?: Enumerable<ReceptionistScalarFieldEnum>
  }


  /**
   * Receptionist create
   */
  export type ReceptionistCreateArgs = {
    /**
     * Select specific fields to fetch from the Receptionist
     * 
    **/
    select?: ReceptionistSelect | null
    /**
     * Choose, which related nodes to fetch as well.
     * 
    **/
    include?: ReceptionistInclude | null
    /**
     * The data needed to create a Receptionist.
     * 
    **/
    data: XOR<ReceptionistCreateInput, ReceptionistUncheckedCreateInput>
  }


  /**
   * Receptionist createMany
   */
  export type ReceptionistCreateManyArgs = {
    /**
     * The data used to create many Receptionists.
     * 
    **/
    data: Enumerable<ReceptionistCreateManyInput>
    skipDuplicates?: boolean
  }


  /**
   * Receptionist update
   */
  export type ReceptionistUpdateArgs = {
    /**
     * Select specific fields to fetch from the Receptionist
     * 
    **/
    select?: ReceptionistSelect | null
    /**
     * Choose, which related nodes to fetch as well.
     * 
    **/
    include?: ReceptionistInclude | null
    /**
     * The data needed to update a Receptionist.
     * 
    **/
    data: XOR<ReceptionistUpdateInput, ReceptionistUncheckedUpdateInput>
    /**
     * Choose, which Receptionist to update.
     * 
    **/
    where: ReceptionistWhereUniqueInput
  }


  /**
   * Receptionist updateMany
   */
  export type ReceptionistUpdateManyArgs = {
    /**
     * The data used to update Receptionists.
     * 
    **/
    data: XOR<ReceptionistUpdateManyMutationInput, ReceptionistUncheckedUpdateManyInput>
    /**
     * Filter which Receptionists to update
     * 
    **/
    where?: ReceptionistWhereInput
  }


  /**
   * Receptionist upsert
   */
  export type ReceptionistUpsertArgs = {
    /**
     * Select specific fields to fetch from the Receptionist
     * 
    **/
    select?: ReceptionistSelect | null
    /**
     * Choose, which related nodes to fetch as well.
     * 
    **/
    include?: ReceptionistInclude | null
    /**
     * The filter to search for the Receptionist to update in case it exists.
     * 
    **/
    where: ReceptionistWhereUniqueInput
    /**
     * In case the Receptionist found by the `where` argument doesn't exist, create a new Receptionist with this data.
     * 
    **/
    create: XOR<ReceptionistCreateInput, ReceptionistUncheckedCreateInput>
    /**
     * In case the Receptionist was found with the provided `where` argument, update it with this data.
     * 
    **/
    update: XOR<ReceptionistUpdateInput, ReceptionistUncheckedUpdateInput>
  }


  /**
   * Receptionist delete
   */
  export type ReceptionistDeleteArgs = {
    /**
     * Select specific fields to fetch from the Receptionist
     * 
    **/
    select?: ReceptionistSelect | null
    /**
     * Choose, which related nodes to fetch as well.
     * 
    **/
    include?: ReceptionistInclude | null
    /**
     * Filter which Receptionist to delete.
     * 
    **/
    where: ReceptionistWhereUniqueInput
  }


  /**
   * Receptionist deleteMany
   */
  export type ReceptionistDeleteManyArgs = {
    /**
     * Filter which Receptionists to delete
     * 
    **/
    where?: ReceptionistWhereInput
  }


  /**
   * Receptionist without action
   */
  export type ReceptionistArgs = {
    /**
     * Select specific fields to fetch from the Receptionist
     * 
    **/
    select?: ReceptionistSelect | null
    /**
     * Choose, which related nodes to fetch as well.
     * 
    **/
    include?: ReceptionistInclude | null
  }



  /**
   * Model SessionReceptionist
   */


  export type AggregateSessionReceptionist = {
    _count: SessionReceptionistCountAggregateOutputType | null
    _avg: SessionReceptionistAvgAggregateOutputType | null
    _sum: SessionReceptionistSumAggregateOutputType | null
    _min: SessionReceptionistMinAggregateOutputType | null
    _max: SessionReceptionistMaxAggregateOutputType | null
  }

  export type SessionReceptionistAvgAggregateOutputType = {
    id: number | null
    receptionistId: number | null
  }

  export type SessionReceptionistSumAggregateOutputType = {
    id: number | null
    receptionistId: number | null
  }

  export type SessionReceptionistMinAggregateOutputType = {
    id: number | null
    receptionistId: number | null
    token: string | null
    createdAt: Date | null
    updatedAt: Date | null
  }

  export type SessionReceptionistMaxAggregateOutputType = {
    id: number | null
    receptionistId: number | null
    token: string | null
    createdAt: Date | null
    updatedAt: Date | null
  }

  export type SessionReceptionistCountAggregateOutputType = {
    id: number
    receptionistId: number
    token: number
    createdAt: number
    updatedAt: number
    _all: number
  }


  export type SessionReceptionistAvgAggregateInputType = {
    id?: true
    receptionistId?: true
  }

  export type SessionReceptionistSumAggregateInputType = {
    id?: true
    receptionistId?: true
  }

  export type SessionReceptionistMinAggregateInputType = {
    id?: true
    receptionistId?: true
    token?: true
    createdAt?: true
    updatedAt?: true
  }

  export type SessionReceptionistMaxAggregateInputType = {
    id?: true
    receptionistId?: true
    token?: true
    createdAt?: true
    updatedAt?: true
  }

  export type SessionReceptionistCountAggregateInputType = {
    id?: true
    receptionistId?: true
    token?: true
    createdAt?: true
    updatedAt?: true
    _all?: true
  }

  export type SessionReceptionistAggregateArgs = {
    /**
     * Filter which SessionReceptionist to aggregate.
     * 
    **/
    where?: SessionReceptionistWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of SessionReceptionists to fetch.
     * 
    **/
    orderBy?: Enumerable<SessionReceptionistOrderByWithRelationInput>
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the start position
     * 
    **/
    cursor?: SessionReceptionistWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` SessionReceptionists from the position of the cursor.
     * 
    **/
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` SessionReceptionists.
     * 
    **/
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Count returned SessionReceptionists
    **/
    _count?: true | SessionReceptionistCountAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to average
    **/
    _avg?: SessionReceptionistAvgAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to sum
    **/
    _sum?: SessionReceptionistSumAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to find the minimum value
    **/
    _min?: SessionReceptionistMinAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to find the maximum value
    **/
    _max?: SessionReceptionistMaxAggregateInputType
  }

  export type GetSessionReceptionistAggregateType<T extends SessionReceptionistAggregateArgs> = {
        [P in keyof T & keyof AggregateSessionReceptionist]: P extends '_count' | 'count'
      ? T[P] extends true
        ? number
        : GetScalarType<T[P], AggregateSessionReceptionist[P]>
      : GetScalarType<T[P], AggregateSessionReceptionist[P]>
  }




  export type SessionReceptionistGroupByArgs = {
    where?: SessionReceptionistWhereInput
    orderBy?: Enumerable<SessionReceptionistOrderByWithAggregationInput>
    by: Array<SessionReceptionistScalarFieldEnum>
    having?: SessionReceptionistScalarWhereWithAggregatesInput
    take?: number
    skip?: number
    _count?: SessionReceptionistCountAggregateInputType | true
    _avg?: SessionReceptionistAvgAggregateInputType
    _sum?: SessionReceptionistSumAggregateInputType
    _min?: SessionReceptionistMinAggregateInputType
    _max?: SessionReceptionistMaxAggregateInputType
  }


  export type SessionReceptionistGroupByOutputType = {
    id: number
    receptionistId: number | null
    token: string
    createdAt: Date
    updatedAt: Date
    _count: SessionReceptionistCountAggregateOutputType | null
    _avg: SessionReceptionistAvgAggregateOutputType | null
    _sum: SessionReceptionistSumAggregateOutputType | null
    _min: SessionReceptionistMinAggregateOutputType | null
    _max: SessionReceptionistMaxAggregateOutputType | null
  }

  type GetSessionReceptionistGroupByPayload<T extends SessionReceptionistGroupByArgs> = PrismaPromise<
    Array<
      PickArray<SessionReceptionistGroupByOutputType, T['by']> &
        {
          [P in ((keyof T) & (keyof SessionReceptionistGroupByOutputType))]: P extends '_count'
            ? T[P] extends boolean
              ? number
              : GetScalarType<T[P], SessionReceptionistGroupByOutputType[P]>
            : GetScalarType<T[P], SessionReceptionistGroupByOutputType[P]>
        }
      >
    >


  export type SessionReceptionistSelect = {
    id?: boolean
    receptionistId?: boolean
    Receptionist?: boolean | ReceptionistArgs
    token?: boolean
    createdAt?: boolean
    updatedAt?: boolean
  }

  export type SessionReceptionistInclude = {
    Receptionist?: boolean | ReceptionistArgs
  }

  export type SessionReceptionistGetPayload<
    S extends boolean | null | undefined | SessionReceptionistArgs,
    U = keyof S
      > = S extends true
        ? SessionReceptionist
    : S extends undefined
    ? never
    : S extends SessionReceptionistArgs | SessionReceptionistFindManyArgs
    ?'include' extends U
    ? SessionReceptionist  & {
    [P in TrueKeys<S['include']>]:
        P extends 'Receptionist' ? ReceptionistGetPayload<S['include'][P]> | null :  never
  } 
    : 'select' extends U
    ? {
    [P in TrueKeys<S['select']>]:
        P extends 'Receptionist' ? ReceptionistGetPayload<S['select'][P]> | null :  P extends keyof SessionReceptionist ? SessionReceptionist[P] : never
  } 
    : SessionReceptionist
  : SessionReceptionist


  type SessionReceptionistCountArgs = Merge<
    Omit<SessionReceptionistFindManyArgs, 'select' | 'include'> & {
      select?: SessionReceptionistCountAggregateInputType | true
    }
  >

  export interface SessionReceptionistDelegate<GlobalRejectSettings> {
    /**
     * Find zero or one SessionReceptionist that matches the filter.
     * @param {SessionReceptionistFindUniqueArgs} args - Arguments to find a SessionReceptionist
     * @example
     * // Get one SessionReceptionist
     * const sessionReceptionist = await prisma.sessionReceptionist.findUnique({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
    **/
    findUnique<T extends SessionReceptionistFindUniqueArgs,  LocalRejectSettings = T["rejectOnNotFound"] extends RejectOnNotFound ? T['rejectOnNotFound'] : undefined>(
      args: SelectSubset<T, SessionReceptionistFindUniqueArgs>
    ): HasReject<GlobalRejectSettings, LocalRejectSettings, 'findUnique', 'SessionReceptionist'> extends True ? CheckSelect<T, Prisma__SessionReceptionistClient<SessionReceptionist>, Prisma__SessionReceptionistClient<SessionReceptionistGetPayload<T>>> : CheckSelect<T, Prisma__SessionReceptionistClient<SessionReceptionist | null >, Prisma__SessionReceptionistClient<SessionReceptionistGetPayload<T> | null >>

    /**
     * Find the first SessionReceptionist that matches the filter.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {SessionReceptionistFindFirstArgs} args - Arguments to find a SessionReceptionist
     * @example
     * // Get one SessionReceptionist
     * const sessionReceptionist = await prisma.sessionReceptionist.findFirst({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
    **/
    findFirst<T extends SessionReceptionistFindFirstArgs,  LocalRejectSettings = T["rejectOnNotFound"] extends RejectOnNotFound ? T['rejectOnNotFound'] : undefined>(
      args?: SelectSubset<T, SessionReceptionistFindFirstArgs>
    ): HasReject<GlobalRejectSettings, LocalRejectSettings, 'findFirst', 'SessionReceptionist'> extends True ? CheckSelect<T, Prisma__SessionReceptionistClient<SessionReceptionist>, Prisma__SessionReceptionistClient<SessionReceptionistGetPayload<T>>> : CheckSelect<T, Prisma__SessionReceptionistClient<SessionReceptionist | null >, Prisma__SessionReceptionistClient<SessionReceptionistGetPayload<T> | null >>

    /**
     * Find zero or more SessionReceptionists that matches the filter.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {SessionReceptionistFindManyArgs=} args - Arguments to filter and select certain fields only.
     * @example
     * // Get all SessionReceptionists
     * const sessionReceptionists = await prisma.sessionReceptionist.findMany()
     * 
     * // Get first 10 SessionReceptionists
     * const sessionReceptionists = await prisma.sessionReceptionist.findMany({ take: 10 })
     * 
     * // Only select the `id`
     * const sessionReceptionistWithIdOnly = await prisma.sessionReceptionist.findMany({ select: { id: true } })
     * 
    **/
    findMany<T extends SessionReceptionistFindManyArgs>(
      args?: SelectSubset<T, SessionReceptionistFindManyArgs>
    ): CheckSelect<T, PrismaPromise<Array<SessionReceptionist>>, PrismaPromise<Array<SessionReceptionistGetPayload<T>>>>

    /**
     * Create a SessionReceptionist.
     * @param {SessionReceptionistCreateArgs} args - Arguments to create a SessionReceptionist.
     * @example
     * // Create one SessionReceptionist
     * const SessionReceptionist = await prisma.sessionReceptionist.create({
     *   data: {
     *     // ... data to create a SessionReceptionist
     *   }
     * })
     * 
    **/
    create<T extends SessionReceptionistCreateArgs>(
      args: SelectSubset<T, SessionReceptionistCreateArgs>
    ): CheckSelect<T, Prisma__SessionReceptionistClient<SessionReceptionist>, Prisma__SessionReceptionistClient<SessionReceptionistGetPayload<T>>>

    /**
     * Create many SessionReceptionists.
     *     @param {SessionReceptionistCreateManyArgs} args - Arguments to create many SessionReceptionists.
     *     @example
     *     // Create many SessionReceptionists
     *     const sessionReceptionist = await prisma.sessionReceptionist.createMany({
     *       data: {
     *         // ... provide data here
     *       }
     *     })
     *     
    **/
    createMany<T extends SessionReceptionistCreateManyArgs>(
      args?: SelectSubset<T, SessionReceptionistCreateManyArgs>
    ): PrismaPromise<BatchPayload>

    /**
     * Delete a SessionReceptionist.
     * @param {SessionReceptionistDeleteArgs} args - Arguments to delete one SessionReceptionist.
     * @example
     * // Delete one SessionReceptionist
     * const SessionReceptionist = await prisma.sessionReceptionist.delete({
     *   where: {
     *     // ... filter to delete one SessionReceptionist
     *   }
     * })
     * 
    **/
    delete<T extends SessionReceptionistDeleteArgs>(
      args: SelectSubset<T, SessionReceptionistDeleteArgs>
    ): CheckSelect<T, Prisma__SessionReceptionistClient<SessionReceptionist>, Prisma__SessionReceptionistClient<SessionReceptionistGetPayload<T>>>

    /**
     * Update one SessionReceptionist.
     * @param {SessionReceptionistUpdateArgs} args - Arguments to update one SessionReceptionist.
     * @example
     * // Update one SessionReceptionist
     * const sessionReceptionist = await prisma.sessionReceptionist.update({
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: {
     *     // ... provide data here
     *   }
     * })
     * 
    **/
    update<T extends SessionReceptionistUpdateArgs>(
      args: SelectSubset<T, SessionReceptionistUpdateArgs>
    ): CheckSelect<T, Prisma__SessionReceptionistClient<SessionReceptionist>, Prisma__SessionReceptionistClient<SessionReceptionistGetPayload<T>>>

    /**
     * Delete zero or more SessionReceptionists.
     * @param {SessionReceptionistDeleteManyArgs} args - Arguments to filter SessionReceptionists to delete.
     * @example
     * // Delete a few SessionReceptionists
     * const { count } = await prisma.sessionReceptionist.deleteMany({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     * 
    **/
    deleteMany<T extends SessionReceptionistDeleteManyArgs>(
      args?: SelectSubset<T, SessionReceptionistDeleteManyArgs>
    ): PrismaPromise<BatchPayload>

    /**
     * Update zero or more SessionReceptionists.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {SessionReceptionistUpdateManyArgs} args - Arguments to update one or more rows.
     * @example
     * // Update many SessionReceptionists
     * const sessionReceptionist = await prisma.sessionReceptionist.updateMany({
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: {
     *     // ... provide data here
     *   }
     * })
     * 
    **/
    updateMany<T extends SessionReceptionistUpdateManyArgs>(
      args: SelectSubset<T, SessionReceptionistUpdateManyArgs>
    ): PrismaPromise<BatchPayload>

    /**
     * Create or update one SessionReceptionist.
     * @param {SessionReceptionistUpsertArgs} args - Arguments to update or create a SessionReceptionist.
     * @example
     * // Update or create a SessionReceptionist
     * const sessionReceptionist = await prisma.sessionReceptionist.upsert({
     *   create: {
     *     // ... data to create a SessionReceptionist
     *   },
     *   update: {
     *     // ... in case it already exists, update
     *   },
     *   where: {
     *     // ... the filter for the SessionReceptionist we want to update
     *   }
     * })
    **/
    upsert<T extends SessionReceptionistUpsertArgs>(
      args: SelectSubset<T, SessionReceptionistUpsertArgs>
    ): CheckSelect<T, Prisma__SessionReceptionistClient<SessionReceptionist>, Prisma__SessionReceptionistClient<SessionReceptionistGetPayload<T>>>

    /**
     * Count the number of SessionReceptionists.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {SessionReceptionistCountArgs} args - Arguments to filter SessionReceptionists to count.
     * @example
     * // Count the number of SessionReceptionists
     * const count = await prisma.sessionReceptionist.count({
     *   where: {
     *     // ... the filter for the SessionReceptionists we want to count
     *   }
     * })
    **/
    count<T extends SessionReceptionistCountArgs>(
      args?: Subset<T, SessionReceptionistCountArgs>,
    ): PrismaPromise<
      T extends _Record<'select', any>
        ? T['select'] extends true
          ? number
          : GetScalarType<T['select'], SessionReceptionistCountAggregateOutputType>
        : number
    >

    /**
     * Allows you to perform aggregations operations on a SessionReceptionist.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {SessionReceptionistAggregateArgs} args - Select which aggregations you would like to apply and on what fields.
     * @example
     * // Ordered by age ascending
     * // Where email contains prisma.io
     * // Limited to the 10 users
     * const aggregations = await prisma.user.aggregate({
     *   _avg: {
     *     age: true,
     *   },
     *   where: {
     *     email: {
     *       contains: "prisma.io",
     *     },
     *   },
     *   orderBy: {
     *     age: "asc",
     *   },
     *   take: 10,
     * })
    **/
    aggregate<T extends SessionReceptionistAggregateArgs>(args: Subset<T, SessionReceptionistAggregateArgs>): PrismaPromise<GetSessionReceptionistAggregateType<T>>

    /**
     * Group by SessionReceptionist.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {SessionReceptionistGroupByArgs} args - Group by arguments.
     * @example
     * // Group by city, order by createdAt, get count
     * const result = await prisma.user.groupBy({
     *   by: ['city', 'createdAt'],
     *   orderBy: {
     *     createdAt: true
     *   },
     *   _count: {
     *     _all: true
     *   },
     * })
     * 
    **/
    groupBy<
      T extends SessionReceptionistGroupByArgs,
      HasSelectOrTake extends Or<
        Extends<'skip', Keys<T>>,
        Extends<'take', Keys<T>>
      >,
      OrderByArg extends True extends HasSelectOrTake
        ? { orderBy: SessionReceptionistGroupByArgs['orderBy'] }
        : { orderBy?: SessionReceptionistGroupByArgs['orderBy'] },
      OrderFields extends ExcludeUnderscoreKeys<Keys<MaybeTupleToUnion<T['orderBy']>>>,
      ByFields extends TupleToUnion<T['by']>,
      ByValid extends Has<ByFields, OrderFields>,
      HavingFields extends GetHavingFields<T['having']>,
      HavingValid extends Has<ByFields, HavingFields>,
      ByEmpty extends T['by'] extends never[] ? True : False,
      InputErrors extends ByEmpty extends True
      ? `Error: "by" must not be empty.`
      : HavingValid extends False
      ? {
          [P in HavingFields]: P extends ByFields
            ? never
            : P extends string
            ? `Error: Field "${P}" used in "having" needs to be provided in "by".`
            : [
                Error,
                'Field ',
                P,
                ` in "having" needs to be provided in "by"`,
              ]
        }[HavingFields]
      : 'take' extends Keys<T>
      ? 'orderBy' extends Keys<T>
        ? ByValid extends True
          ? {}
          : {
              [P in OrderFields]: P extends ByFields
                ? never
                : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
            }[OrderFields]
        : 'Error: If you provide "take", you also need to provide "orderBy"'
      : 'skip' extends Keys<T>
      ? 'orderBy' extends Keys<T>
        ? ByValid extends True
          ? {}
          : {
              [P in OrderFields]: P extends ByFields
                ? never
                : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
            }[OrderFields]
        : 'Error: If you provide "skip", you also need to provide "orderBy"'
      : ByValid extends True
      ? {}
      : {
          [P in OrderFields]: P extends ByFields
            ? never
            : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
        }[OrderFields]
    >(args: SubsetIntersection<T, SessionReceptionistGroupByArgs, OrderByArg> & InputErrors): {} extends InputErrors ? GetSessionReceptionistGroupByPayload<T> : PrismaPromise<InputErrors>
  }

  /**
   * The delegate class that acts as a "Promise-like" for SessionReceptionist.
   * Why is this prefixed with `Prisma__`?
   * Because we want to prevent naming conflicts as mentioned in
   * https://github.com/prisma/prisma-client-js/issues/707
   */
  export class Prisma__SessionReceptionistClient<T> implements PrismaPromise<T> {
    [prisma]: true;
    private readonly _dmmf;
    private readonly _fetcher;
    private readonly _queryType;
    private readonly _rootField;
    private readonly _clientMethod;
    private readonly _args;
    private readonly _dataPath;
    private readonly _errorFormat;
    private readonly _measurePerformance?;
    private _isList;
    private _callsite;
    private _requestPromise?;
    constructor(_dmmf: runtime.DMMFClass, _fetcher: PrismaClientFetcher, _queryType: 'query' | 'mutation', _rootField: string, _clientMethod: string, _args: any, _dataPath: string[], _errorFormat: ErrorFormat, _measurePerformance?: boolean | undefined, _isList?: boolean);
    readonly [Symbol.toStringTag]: 'PrismaClientPromise';

    Receptionist<T extends ReceptionistArgs = {}>(args?: Subset<T, ReceptionistArgs>): CheckSelect<T, Prisma__ReceptionistClient<Receptionist | null >, Prisma__ReceptionistClient<ReceptionistGetPayload<T> | null >>;

    private get _document();
    /**
     * Attaches callbacks for the resolution and/or rejection of the Promise.
     * @param onfulfilled The callback to execute when the Promise is resolved.
     * @param onrejected The callback to execute when the Promise is rejected.
     * @returns A Promise for the completion of which ever callback is executed.
     */
    then<TResult1 = T, TResult2 = never>(onfulfilled?: ((value: T) => TResult1 | PromiseLike<TResult1>) | undefined | null, onrejected?: ((reason: any) => TResult2 | PromiseLike<TResult2>) | undefined | null): Promise<TResult1 | TResult2>;
    /**
     * Attaches a callback for only the rejection of the Promise.
     * @param onrejected The callback to execute when the Promise is rejected.
     * @returns A Promise for the completion of the callback.
     */
    catch<TResult = never>(onrejected?: ((reason: any) => TResult | PromiseLike<TResult>) | undefined | null): Promise<T | TResult>;
    /**
     * Attaches a callback that is invoked when the Promise is settled (fulfilled or rejected). The
     * resolved value cannot be modified from the callback.
     * @param onfinally The callback to execute when the Promise is settled (fulfilled or rejected).
     * @returns A Promise for the completion of the callback.
     */
    finally(onfinally?: (() => void) | undefined | null): Promise<T>;
  }

  // Custom InputTypes

  /**
   * SessionReceptionist findUnique
   */
  export type SessionReceptionistFindUniqueArgs = {
    /**
     * Select specific fields to fetch from the SessionReceptionist
     * 
    **/
    select?: SessionReceptionistSelect | null
    /**
     * Choose, which related nodes to fetch as well.
     * 
    **/
    include?: SessionReceptionistInclude | null
    /**
     * Throw an Error if a SessionReceptionist can't be found
     * 
    **/
    rejectOnNotFound?: RejectOnNotFound
    /**
     * Filter, which SessionReceptionist to fetch.
     * 
    **/
    where: SessionReceptionistWhereUniqueInput
  }


  /**
   * SessionReceptionist findFirst
   */
  export type SessionReceptionistFindFirstArgs = {
    /**
     * Select specific fields to fetch from the SessionReceptionist
     * 
    **/
    select?: SessionReceptionistSelect | null
    /**
     * Choose, which related nodes to fetch as well.
     * 
    **/
    include?: SessionReceptionistInclude | null
    /**
     * Throw an Error if a SessionReceptionist can't be found
     * 
    **/
    rejectOnNotFound?: RejectOnNotFound
    /**
     * Filter, which SessionReceptionist to fetch.
     * 
    **/
    where?: SessionReceptionistWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of SessionReceptionists to fetch.
     * 
    **/
    orderBy?: Enumerable<SessionReceptionistOrderByWithRelationInput>
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for searching for SessionReceptionists.
     * 
    **/
    cursor?: SessionReceptionistWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` SessionReceptionists from the position of the cursor.
     * 
    **/
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` SessionReceptionists.
     * 
    **/
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/distinct Distinct Docs}
     * 
     * Filter by unique combinations of SessionReceptionists.
     * 
    **/
    distinct?: Enumerable<SessionReceptionistScalarFieldEnum>
  }


  /**
   * SessionReceptionist findMany
   */
  export type SessionReceptionistFindManyArgs = {
    /**
     * Select specific fields to fetch from the SessionReceptionist
     * 
    **/
    select?: SessionReceptionistSelect | null
    /**
     * Choose, which related nodes to fetch as well.
     * 
    **/
    include?: SessionReceptionistInclude | null
    /**
     * Filter, which SessionReceptionists to fetch.
     * 
    **/
    where?: SessionReceptionistWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of SessionReceptionists to fetch.
     * 
    **/
    orderBy?: Enumerable<SessionReceptionistOrderByWithRelationInput>
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for listing SessionReceptionists.
     * 
    **/
    cursor?: SessionReceptionistWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` SessionReceptionists from the position of the cursor.
     * 
    **/
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` SessionReceptionists.
     * 
    **/
    skip?: number
    distinct?: Enumerable<SessionReceptionistScalarFieldEnum>
  }


  /**
   * SessionReceptionist create
   */
  export type SessionReceptionistCreateArgs = {
    /**
     * Select specific fields to fetch from the SessionReceptionist
     * 
    **/
    select?: SessionReceptionistSelect | null
    /**
     * Choose, which related nodes to fetch as well.
     * 
    **/
    include?: SessionReceptionistInclude | null
    /**
     * The data needed to create a SessionReceptionist.
     * 
    **/
    data: XOR<SessionReceptionistCreateInput, SessionReceptionistUncheckedCreateInput>
  }


  /**
   * SessionReceptionist createMany
   */
  export type SessionReceptionistCreateManyArgs = {
    /**
     * The data used to create many SessionReceptionists.
     * 
    **/
    data: Enumerable<SessionReceptionistCreateManyInput>
    skipDuplicates?: boolean
  }


  /**
   * SessionReceptionist update
   */
  export type SessionReceptionistUpdateArgs = {
    /**
     * Select specific fields to fetch from the SessionReceptionist
     * 
    **/
    select?: SessionReceptionistSelect | null
    /**
     * Choose, which related nodes to fetch as well.
     * 
    **/
    include?: SessionReceptionistInclude | null
    /**
     * The data needed to update a SessionReceptionist.
     * 
    **/
    data: XOR<SessionReceptionistUpdateInput, SessionReceptionistUncheckedUpdateInput>
    /**
     * Choose, which SessionReceptionist to update.
     * 
    **/
    where: SessionReceptionistWhereUniqueInput
  }


  /**
   * SessionReceptionist updateMany
   */
  export type SessionReceptionistUpdateManyArgs = {
    /**
     * The data used to update SessionReceptionists.
     * 
    **/
    data: XOR<SessionReceptionistUpdateManyMutationInput, SessionReceptionistUncheckedUpdateManyInput>
    /**
     * Filter which SessionReceptionists to update
     * 
    **/
    where?: SessionReceptionistWhereInput
  }


  /**
   * SessionReceptionist upsert
   */
  export type SessionReceptionistUpsertArgs = {
    /**
     * Select specific fields to fetch from the SessionReceptionist
     * 
    **/
    select?: SessionReceptionistSelect | null
    /**
     * Choose, which related nodes to fetch as well.
     * 
    **/
    include?: SessionReceptionistInclude | null
    /**
     * The filter to search for the SessionReceptionist to update in case it exists.
     * 
    **/
    where: SessionReceptionistWhereUniqueInput
    /**
     * In case the SessionReceptionist found by the `where` argument doesn't exist, create a new SessionReceptionist with this data.
     * 
    **/
    create: XOR<SessionReceptionistCreateInput, SessionReceptionistUncheckedCreateInput>
    /**
     * In case the SessionReceptionist was found with the provided `where` argument, update it with this data.
     * 
    **/
    update: XOR<SessionReceptionistUpdateInput, SessionReceptionistUncheckedUpdateInput>
  }


  /**
   * SessionReceptionist delete
   */
  export type SessionReceptionistDeleteArgs = {
    /**
     * Select specific fields to fetch from the SessionReceptionist
     * 
    **/
    select?: SessionReceptionistSelect | null
    /**
     * Choose, which related nodes to fetch as well.
     * 
    **/
    include?: SessionReceptionistInclude | null
    /**
     * Filter which SessionReceptionist to delete.
     * 
    **/
    where: SessionReceptionistWhereUniqueInput
  }


  /**
   * SessionReceptionist deleteMany
   */
  export type SessionReceptionistDeleteManyArgs = {
    /**
     * Filter which SessionReceptionists to delete
     * 
    **/
    where?: SessionReceptionistWhereInput
  }


  /**
   * SessionReceptionist without action
   */
  export type SessionReceptionistArgs = {
    /**
     * Select specific fields to fetch from the SessionReceptionist
     * 
    **/
    select?: SessionReceptionistSelect | null
    /**
     * Choose, which related nodes to fetch as well.
     * 
    **/
    include?: SessionReceptionistInclude | null
  }



  /**
   * Model Medic
   */


  export type AggregateMedic = {
    _count: MedicCountAggregateOutputType | null
    _avg: MedicAvgAggregateOutputType | null
    _sum: MedicSumAggregateOutputType | null
    _min: MedicMinAggregateOutputType | null
    _max: MedicMaxAggregateOutputType | null
  }

  export type MedicAvgAggregateOutputType = {
    id: number | null
  }

  export type MedicSumAggregateOutputType = {
    id: number | null
  }

  export type MedicMinAggregateOutputType = {
    id: number | null
    cpf: string | null
    name: string | null
    email: string | null
    password: string | null
    adress: string | null
    phone: string | null
    birthday: Date | null
    specialty: string | null
    createdAt: Date | null
    updatedAt: Date | null
  }

  export type MedicMaxAggregateOutputType = {
    id: number | null
    cpf: string | null
    name: string | null
    email: string | null
    password: string | null
    adress: string | null
    phone: string | null
    birthday: Date | null
    specialty: string | null
    createdAt: Date | null
    updatedAt: Date | null
  }

  export type MedicCountAggregateOutputType = {
    id: number
    cpf: number
    name: number
    email: number
    password: number
    adress: number
    phone: number
    birthday: number
    specialty: number
    createdAt: number
    updatedAt: number
    _all: number
  }


  export type MedicAvgAggregateInputType = {
    id?: true
  }

  export type MedicSumAggregateInputType = {
    id?: true
  }

  export type MedicMinAggregateInputType = {
    id?: true
    cpf?: true
    name?: true
    email?: true
    password?: true
    adress?: true
    phone?: true
    birthday?: true
    specialty?: true
    createdAt?: true
    updatedAt?: true
  }

  export type MedicMaxAggregateInputType = {
    id?: true
    cpf?: true
    name?: true
    email?: true
    password?: true
    adress?: true
    phone?: true
    birthday?: true
    specialty?: true
    createdAt?: true
    updatedAt?: true
  }

  export type MedicCountAggregateInputType = {
    id?: true
    cpf?: true
    name?: true
    email?: true
    password?: true
    adress?: true
    phone?: true
    birthday?: true
    specialty?: true
    createdAt?: true
    updatedAt?: true
    _all?: true
  }

  export type MedicAggregateArgs = {
    /**
     * Filter which Medic to aggregate.
     * 
    **/
    where?: MedicWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of Medics to fetch.
     * 
    **/
    orderBy?: Enumerable<MedicOrderByWithRelationInput>
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the start position
     * 
    **/
    cursor?: MedicWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` Medics from the position of the cursor.
     * 
    **/
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` Medics.
     * 
    **/
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Count returned Medics
    **/
    _count?: true | MedicCountAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to average
    **/
    _avg?: MedicAvgAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to sum
    **/
    _sum?: MedicSumAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to find the minimum value
    **/
    _min?: MedicMinAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to find the maximum value
    **/
    _max?: MedicMaxAggregateInputType
  }

  export type GetMedicAggregateType<T extends MedicAggregateArgs> = {
        [P in keyof T & keyof AggregateMedic]: P extends '_count' | 'count'
      ? T[P] extends true
        ? number
        : GetScalarType<T[P], AggregateMedic[P]>
      : GetScalarType<T[P], AggregateMedic[P]>
  }




  export type MedicGroupByArgs = {
    where?: MedicWhereInput
    orderBy?: Enumerable<MedicOrderByWithAggregationInput>
    by: Array<MedicScalarFieldEnum>
    having?: MedicScalarWhereWithAggregatesInput
    take?: number
    skip?: number
    _count?: MedicCountAggregateInputType | true
    _avg?: MedicAvgAggregateInputType
    _sum?: MedicSumAggregateInputType
    _min?: MedicMinAggregateInputType
    _max?: MedicMaxAggregateInputType
  }


  export type MedicGroupByOutputType = {
    id: number
    cpf: string
    name: string
    email: string | null
    password: string
    adress: string | null
    phone: string | null
    birthday: Date | null
    specialty: string | null
    createdAt: Date
    updatedAt: Date
    _count: MedicCountAggregateOutputType | null
    _avg: MedicAvgAggregateOutputType | null
    _sum: MedicSumAggregateOutputType | null
    _min: MedicMinAggregateOutputType | null
    _max: MedicMaxAggregateOutputType | null
  }

  type GetMedicGroupByPayload<T extends MedicGroupByArgs> = PrismaPromise<
    Array<
      PickArray<MedicGroupByOutputType, T['by']> &
        {
          [P in ((keyof T) & (keyof MedicGroupByOutputType))]: P extends '_count'
            ? T[P] extends boolean
              ? number
              : GetScalarType<T[P], MedicGroupByOutputType[P]>
            : GetScalarType<T[P], MedicGroupByOutputType[P]>
        }
      >
    >


  export type MedicSelect = {
    id?: boolean
    cpf?: boolean
    name?: boolean
    email?: boolean
    password?: boolean
    adress?: boolean
    phone?: boolean
    birthday?: boolean
    specialty?: boolean
    createdAt?: boolean
    updatedAt?: boolean
    SessionMedic?: boolean | SessionMedicFindManyArgs
    Appointment?: boolean | AppointementFindManyArgs
    Pescription?: boolean | PrescriptionFindManyArgs
    Report?: boolean | ReportFindManyArgs
    Exam?: boolean | ExamFindManyArgs
    _count?: boolean | MedicCountOutputTypeArgs
  }

  export type MedicInclude = {
    SessionMedic?: boolean | SessionMedicFindManyArgs
    Appointment?: boolean | AppointementFindManyArgs
    Pescription?: boolean | PrescriptionFindManyArgs
    Report?: boolean | ReportFindManyArgs
    Exam?: boolean | ExamFindManyArgs
    _count?: boolean | MedicCountOutputTypeArgs
  }

  export type MedicGetPayload<
    S extends boolean | null | undefined | MedicArgs,
    U = keyof S
      > = S extends true
        ? Medic
    : S extends undefined
    ? never
    : S extends MedicArgs | MedicFindManyArgs
    ?'include' extends U
    ? Medic  & {
    [P in TrueKeys<S['include']>]:
        P extends 'SessionMedic' ? Array < SessionMedicGetPayload<S['include'][P]>>  :
        P extends 'Appointment' ? Array < AppointementGetPayload<S['include'][P]>>  :
        P extends 'Pescription' ? Array < PrescriptionGetPayload<S['include'][P]>>  :
        P extends 'Report' ? Array < ReportGetPayload<S['include'][P]>>  :
        P extends 'Exam' ? Array < ExamGetPayload<S['include'][P]>>  :
        P extends '_count' ? MedicCountOutputTypeGetPayload<S['include'][P]> :  never
  } 
    : 'select' extends U
    ? {
    [P in TrueKeys<S['select']>]:
        P extends 'SessionMedic' ? Array < SessionMedicGetPayload<S['select'][P]>>  :
        P extends 'Appointment' ? Array < AppointementGetPayload<S['select'][P]>>  :
        P extends 'Pescription' ? Array < PrescriptionGetPayload<S['select'][P]>>  :
        P extends 'Report' ? Array < ReportGetPayload<S['select'][P]>>  :
        P extends 'Exam' ? Array < ExamGetPayload<S['select'][P]>>  :
        P extends '_count' ? MedicCountOutputTypeGetPayload<S['select'][P]> :  P extends keyof Medic ? Medic[P] : never
  } 
    : Medic
  : Medic


  type MedicCountArgs = Merge<
    Omit<MedicFindManyArgs, 'select' | 'include'> & {
      select?: MedicCountAggregateInputType | true
    }
  >

  export interface MedicDelegate<GlobalRejectSettings> {
    /**
     * Find zero or one Medic that matches the filter.
     * @param {MedicFindUniqueArgs} args - Arguments to find a Medic
     * @example
     * // Get one Medic
     * const medic = await prisma.medic.findUnique({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
    **/
    findUnique<T extends MedicFindUniqueArgs,  LocalRejectSettings = T["rejectOnNotFound"] extends RejectOnNotFound ? T['rejectOnNotFound'] : undefined>(
      args: SelectSubset<T, MedicFindUniqueArgs>
    ): HasReject<GlobalRejectSettings, LocalRejectSettings, 'findUnique', 'Medic'> extends True ? CheckSelect<T, Prisma__MedicClient<Medic>, Prisma__MedicClient<MedicGetPayload<T>>> : CheckSelect<T, Prisma__MedicClient<Medic | null >, Prisma__MedicClient<MedicGetPayload<T> | null >>

    /**
     * Find the first Medic that matches the filter.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {MedicFindFirstArgs} args - Arguments to find a Medic
     * @example
     * // Get one Medic
     * const medic = await prisma.medic.findFirst({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
    **/
    findFirst<T extends MedicFindFirstArgs,  LocalRejectSettings = T["rejectOnNotFound"] extends RejectOnNotFound ? T['rejectOnNotFound'] : undefined>(
      args?: SelectSubset<T, MedicFindFirstArgs>
    ): HasReject<GlobalRejectSettings, LocalRejectSettings, 'findFirst', 'Medic'> extends True ? CheckSelect<T, Prisma__MedicClient<Medic>, Prisma__MedicClient<MedicGetPayload<T>>> : CheckSelect<T, Prisma__MedicClient<Medic | null >, Prisma__MedicClient<MedicGetPayload<T> | null >>

    /**
     * Find zero or more Medics that matches the filter.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {MedicFindManyArgs=} args - Arguments to filter and select certain fields only.
     * @example
     * // Get all Medics
     * const medics = await prisma.medic.findMany()
     * 
     * // Get first 10 Medics
     * const medics = await prisma.medic.findMany({ take: 10 })
     * 
     * // Only select the `id`
     * const medicWithIdOnly = await prisma.medic.findMany({ select: { id: true } })
     * 
    **/
    findMany<T extends MedicFindManyArgs>(
      args?: SelectSubset<T, MedicFindManyArgs>
    ): CheckSelect<T, PrismaPromise<Array<Medic>>, PrismaPromise<Array<MedicGetPayload<T>>>>

    /**
     * Create a Medic.
     * @param {MedicCreateArgs} args - Arguments to create a Medic.
     * @example
     * // Create one Medic
     * const Medic = await prisma.medic.create({
     *   data: {
     *     // ... data to create a Medic
     *   }
     * })
     * 
    **/
    create<T extends MedicCreateArgs>(
      args: SelectSubset<T, MedicCreateArgs>
    ): CheckSelect<T, Prisma__MedicClient<Medic>, Prisma__MedicClient<MedicGetPayload<T>>>

    /**
     * Create many Medics.
     *     @param {MedicCreateManyArgs} args - Arguments to create many Medics.
     *     @example
     *     // Create many Medics
     *     const medic = await prisma.medic.createMany({
     *       data: {
     *         // ... provide data here
     *       }
     *     })
     *     
    **/
    createMany<T extends MedicCreateManyArgs>(
      args?: SelectSubset<T, MedicCreateManyArgs>
    ): PrismaPromise<BatchPayload>

    /**
     * Delete a Medic.
     * @param {MedicDeleteArgs} args - Arguments to delete one Medic.
     * @example
     * // Delete one Medic
     * const Medic = await prisma.medic.delete({
     *   where: {
     *     // ... filter to delete one Medic
     *   }
     * })
     * 
    **/
    delete<T extends MedicDeleteArgs>(
      args: SelectSubset<T, MedicDeleteArgs>
    ): CheckSelect<T, Prisma__MedicClient<Medic>, Prisma__MedicClient<MedicGetPayload<T>>>

    /**
     * Update one Medic.
     * @param {MedicUpdateArgs} args - Arguments to update one Medic.
     * @example
     * // Update one Medic
     * const medic = await prisma.medic.update({
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: {
     *     // ... provide data here
     *   }
     * })
     * 
    **/
    update<T extends MedicUpdateArgs>(
      args: SelectSubset<T, MedicUpdateArgs>
    ): CheckSelect<T, Prisma__MedicClient<Medic>, Prisma__MedicClient<MedicGetPayload<T>>>

    /**
     * Delete zero or more Medics.
     * @param {MedicDeleteManyArgs} args - Arguments to filter Medics to delete.
     * @example
     * // Delete a few Medics
     * const { count } = await prisma.medic.deleteMany({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     * 
    **/
    deleteMany<T extends MedicDeleteManyArgs>(
      args?: SelectSubset<T, MedicDeleteManyArgs>
    ): PrismaPromise<BatchPayload>

    /**
     * Update zero or more Medics.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {MedicUpdateManyArgs} args - Arguments to update one or more rows.
     * @example
     * // Update many Medics
     * const medic = await prisma.medic.updateMany({
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: {
     *     // ... provide data here
     *   }
     * })
     * 
    **/
    updateMany<T extends MedicUpdateManyArgs>(
      args: SelectSubset<T, MedicUpdateManyArgs>
    ): PrismaPromise<BatchPayload>

    /**
     * Create or update one Medic.
     * @param {MedicUpsertArgs} args - Arguments to update or create a Medic.
     * @example
     * // Update or create a Medic
     * const medic = await prisma.medic.upsert({
     *   create: {
     *     // ... data to create a Medic
     *   },
     *   update: {
     *     // ... in case it already exists, update
     *   },
     *   where: {
     *     // ... the filter for the Medic we want to update
     *   }
     * })
    **/
    upsert<T extends MedicUpsertArgs>(
      args: SelectSubset<T, MedicUpsertArgs>
    ): CheckSelect<T, Prisma__MedicClient<Medic>, Prisma__MedicClient<MedicGetPayload<T>>>

    /**
     * Count the number of Medics.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {MedicCountArgs} args - Arguments to filter Medics to count.
     * @example
     * // Count the number of Medics
     * const count = await prisma.medic.count({
     *   where: {
     *     // ... the filter for the Medics we want to count
     *   }
     * })
    **/
    count<T extends MedicCountArgs>(
      args?: Subset<T, MedicCountArgs>,
    ): PrismaPromise<
      T extends _Record<'select', any>
        ? T['select'] extends true
          ? number
          : GetScalarType<T['select'], MedicCountAggregateOutputType>
        : number
    >

    /**
     * Allows you to perform aggregations operations on a Medic.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {MedicAggregateArgs} args - Select which aggregations you would like to apply and on what fields.
     * @example
     * // Ordered by age ascending
     * // Where email contains prisma.io
     * // Limited to the 10 users
     * const aggregations = await prisma.user.aggregate({
     *   _avg: {
     *     age: true,
     *   },
     *   where: {
     *     email: {
     *       contains: "prisma.io",
     *     },
     *   },
     *   orderBy: {
     *     age: "asc",
     *   },
     *   take: 10,
     * })
    **/
    aggregate<T extends MedicAggregateArgs>(args: Subset<T, MedicAggregateArgs>): PrismaPromise<GetMedicAggregateType<T>>

    /**
     * Group by Medic.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {MedicGroupByArgs} args - Group by arguments.
     * @example
     * // Group by city, order by createdAt, get count
     * const result = await prisma.user.groupBy({
     *   by: ['city', 'createdAt'],
     *   orderBy: {
     *     createdAt: true
     *   },
     *   _count: {
     *     _all: true
     *   },
     * })
     * 
    **/
    groupBy<
      T extends MedicGroupByArgs,
      HasSelectOrTake extends Or<
        Extends<'skip', Keys<T>>,
        Extends<'take', Keys<T>>
      >,
      OrderByArg extends True extends HasSelectOrTake
        ? { orderBy: MedicGroupByArgs['orderBy'] }
        : { orderBy?: MedicGroupByArgs['orderBy'] },
      OrderFields extends ExcludeUnderscoreKeys<Keys<MaybeTupleToUnion<T['orderBy']>>>,
      ByFields extends TupleToUnion<T['by']>,
      ByValid extends Has<ByFields, OrderFields>,
      HavingFields extends GetHavingFields<T['having']>,
      HavingValid extends Has<ByFields, HavingFields>,
      ByEmpty extends T['by'] extends never[] ? True : False,
      InputErrors extends ByEmpty extends True
      ? `Error: "by" must not be empty.`
      : HavingValid extends False
      ? {
          [P in HavingFields]: P extends ByFields
            ? never
            : P extends string
            ? `Error: Field "${P}" used in "having" needs to be provided in "by".`
            : [
                Error,
                'Field ',
                P,
                ` in "having" needs to be provided in "by"`,
              ]
        }[HavingFields]
      : 'take' extends Keys<T>
      ? 'orderBy' extends Keys<T>
        ? ByValid extends True
          ? {}
          : {
              [P in OrderFields]: P extends ByFields
                ? never
                : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
            }[OrderFields]
        : 'Error: If you provide "take", you also need to provide "orderBy"'
      : 'skip' extends Keys<T>
      ? 'orderBy' extends Keys<T>
        ? ByValid extends True
          ? {}
          : {
              [P in OrderFields]: P extends ByFields
                ? never
                : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
            }[OrderFields]
        : 'Error: If you provide "skip", you also need to provide "orderBy"'
      : ByValid extends True
      ? {}
      : {
          [P in OrderFields]: P extends ByFields
            ? never
            : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
        }[OrderFields]
    >(args: SubsetIntersection<T, MedicGroupByArgs, OrderByArg> & InputErrors): {} extends InputErrors ? GetMedicGroupByPayload<T> : PrismaPromise<InputErrors>
  }

  /**
   * The delegate class that acts as a "Promise-like" for Medic.
   * Why is this prefixed with `Prisma__`?
   * Because we want to prevent naming conflicts as mentioned in
   * https://github.com/prisma/prisma-client-js/issues/707
   */
  export class Prisma__MedicClient<T> implements PrismaPromise<T> {
    [prisma]: true;
    private readonly _dmmf;
    private readonly _fetcher;
    private readonly _queryType;
    private readonly _rootField;
    private readonly _clientMethod;
    private readonly _args;
    private readonly _dataPath;
    private readonly _errorFormat;
    private readonly _measurePerformance?;
    private _isList;
    private _callsite;
    private _requestPromise?;
    constructor(_dmmf: runtime.DMMFClass, _fetcher: PrismaClientFetcher, _queryType: 'query' | 'mutation', _rootField: string, _clientMethod: string, _args: any, _dataPath: string[], _errorFormat: ErrorFormat, _measurePerformance?: boolean | undefined, _isList?: boolean);
    readonly [Symbol.toStringTag]: 'PrismaClientPromise';

    SessionMedic<T extends SessionMedicFindManyArgs = {}>(args?: Subset<T, SessionMedicFindManyArgs>): CheckSelect<T, PrismaPromise<Array<SessionMedic>>, PrismaPromise<Array<SessionMedicGetPayload<T>>>>;

    Appointment<T extends AppointementFindManyArgs = {}>(args?: Subset<T, AppointementFindManyArgs>): CheckSelect<T, PrismaPromise<Array<Appointement>>, PrismaPromise<Array<AppointementGetPayload<T>>>>;

    Pescription<T extends PrescriptionFindManyArgs = {}>(args?: Subset<T, PrescriptionFindManyArgs>): CheckSelect<T, PrismaPromise<Array<Prescription>>, PrismaPromise<Array<PrescriptionGetPayload<T>>>>;

    Report<T extends ReportFindManyArgs = {}>(args?: Subset<T, ReportFindManyArgs>): CheckSelect<T, PrismaPromise<Array<Report>>, PrismaPromise<Array<ReportGetPayload<T>>>>;

    Exam<T extends ExamFindManyArgs = {}>(args?: Subset<T, ExamFindManyArgs>): CheckSelect<T, PrismaPromise<Array<Exam>>, PrismaPromise<Array<ExamGetPayload<T>>>>;

    private get _document();
    /**
     * Attaches callbacks for the resolution and/or rejection of the Promise.
     * @param onfulfilled The callback to execute when the Promise is resolved.
     * @param onrejected The callback to execute when the Promise is rejected.
     * @returns A Promise for the completion of which ever callback is executed.
     */
    then<TResult1 = T, TResult2 = never>(onfulfilled?: ((value: T) => TResult1 | PromiseLike<TResult1>) | undefined | null, onrejected?: ((reason: any) => TResult2 | PromiseLike<TResult2>) | undefined | null): Promise<TResult1 | TResult2>;
    /**
     * Attaches a callback for only the rejection of the Promise.
     * @param onrejected The callback to execute when the Promise is rejected.
     * @returns A Promise for the completion of the callback.
     */
    catch<TResult = never>(onrejected?: ((reason: any) => TResult | PromiseLike<TResult>) | undefined | null): Promise<T | TResult>;
    /**
     * Attaches a callback that is invoked when the Promise is settled (fulfilled or rejected). The
     * resolved value cannot be modified from the callback.
     * @param onfinally The callback to execute when the Promise is settled (fulfilled or rejected).
     * @returns A Promise for the completion of the callback.
     */
    finally(onfinally?: (() => void) | undefined | null): Promise<T>;
  }

  // Custom InputTypes

  /**
   * Medic findUnique
   */
  export type MedicFindUniqueArgs = {
    /**
     * Select specific fields to fetch from the Medic
     * 
    **/
    select?: MedicSelect | null
    /**
     * Choose, which related nodes to fetch as well.
     * 
    **/
    include?: MedicInclude | null
    /**
     * Throw an Error if a Medic can't be found
     * 
    **/
    rejectOnNotFound?: RejectOnNotFound
    /**
     * Filter, which Medic to fetch.
     * 
    **/
    where: MedicWhereUniqueInput
  }


  /**
   * Medic findFirst
   */
  export type MedicFindFirstArgs = {
    /**
     * Select specific fields to fetch from the Medic
     * 
    **/
    select?: MedicSelect | null
    /**
     * Choose, which related nodes to fetch as well.
     * 
    **/
    include?: MedicInclude | null
    /**
     * Throw an Error if a Medic can't be found
     * 
    **/
    rejectOnNotFound?: RejectOnNotFound
    /**
     * Filter, which Medic to fetch.
     * 
    **/
    where?: MedicWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of Medics to fetch.
     * 
    **/
    orderBy?: Enumerable<MedicOrderByWithRelationInput>
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for searching for Medics.
     * 
    **/
    cursor?: MedicWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` Medics from the position of the cursor.
     * 
    **/
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` Medics.
     * 
    **/
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/distinct Distinct Docs}
     * 
     * Filter by unique combinations of Medics.
     * 
    **/
    distinct?: Enumerable<MedicScalarFieldEnum>
  }


  /**
   * Medic findMany
   */
  export type MedicFindManyArgs = {
    /**
     * Select specific fields to fetch from the Medic
     * 
    **/
    select?: MedicSelect | null
    /**
     * Choose, which related nodes to fetch as well.
     * 
    **/
    include?: MedicInclude | null
    /**
     * Filter, which Medics to fetch.
     * 
    **/
    where?: MedicWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of Medics to fetch.
     * 
    **/
    orderBy?: Enumerable<MedicOrderByWithRelationInput>
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for listing Medics.
     * 
    **/
    cursor?: MedicWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` Medics from the position of the cursor.
     * 
    **/
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` Medics.
     * 
    **/
    skip?: number
    distinct?: Enumerable<MedicScalarFieldEnum>
  }


  /**
   * Medic create
   */
  export type MedicCreateArgs = {
    /**
     * Select specific fields to fetch from the Medic
     * 
    **/
    select?: MedicSelect | null
    /**
     * Choose, which related nodes to fetch as well.
     * 
    **/
    include?: MedicInclude | null
    /**
     * The data needed to create a Medic.
     * 
    **/
    data: XOR<MedicCreateInput, MedicUncheckedCreateInput>
  }


  /**
   * Medic createMany
   */
  export type MedicCreateManyArgs = {
    /**
     * The data used to create many Medics.
     * 
    **/
    data: Enumerable<MedicCreateManyInput>
    skipDuplicates?: boolean
  }


  /**
   * Medic update
   */
  export type MedicUpdateArgs = {
    /**
     * Select specific fields to fetch from the Medic
     * 
    **/
    select?: MedicSelect | null
    /**
     * Choose, which related nodes to fetch as well.
     * 
    **/
    include?: MedicInclude | null
    /**
     * The data needed to update a Medic.
     * 
    **/
    data: XOR<MedicUpdateInput, MedicUncheckedUpdateInput>
    /**
     * Choose, which Medic to update.
     * 
    **/
    where: MedicWhereUniqueInput
  }


  /**
   * Medic updateMany
   */
  export type MedicUpdateManyArgs = {
    /**
     * The data used to update Medics.
     * 
    **/
    data: XOR<MedicUpdateManyMutationInput, MedicUncheckedUpdateManyInput>
    /**
     * Filter which Medics to update
     * 
    **/
    where?: MedicWhereInput
  }


  /**
   * Medic upsert
   */
  export type MedicUpsertArgs = {
    /**
     * Select specific fields to fetch from the Medic
     * 
    **/
    select?: MedicSelect | null
    /**
     * Choose, which related nodes to fetch as well.
     * 
    **/
    include?: MedicInclude | null
    /**
     * The filter to search for the Medic to update in case it exists.
     * 
    **/
    where: MedicWhereUniqueInput
    /**
     * In case the Medic found by the `where` argument doesn't exist, create a new Medic with this data.
     * 
    **/
    create: XOR<MedicCreateInput, MedicUncheckedCreateInput>
    /**
     * In case the Medic was found with the provided `where` argument, update it with this data.
     * 
    **/
    update: XOR<MedicUpdateInput, MedicUncheckedUpdateInput>
  }


  /**
   * Medic delete
   */
  export type MedicDeleteArgs = {
    /**
     * Select specific fields to fetch from the Medic
     * 
    **/
    select?: MedicSelect | null
    /**
     * Choose, which related nodes to fetch as well.
     * 
    **/
    include?: MedicInclude | null
    /**
     * Filter which Medic to delete.
     * 
    **/
    where: MedicWhereUniqueInput
  }


  /**
   * Medic deleteMany
   */
  export type MedicDeleteManyArgs = {
    /**
     * Filter which Medics to delete
     * 
    **/
    where?: MedicWhereInput
  }


  /**
   * Medic without action
   */
  export type MedicArgs = {
    /**
     * Select specific fields to fetch from the Medic
     * 
    **/
    select?: MedicSelect | null
    /**
     * Choose, which related nodes to fetch as well.
     * 
    **/
    include?: MedicInclude | null
  }



  /**
   * Model Appointement
   */


  export type AggregateAppointement = {
    _count: AppointementCountAggregateOutputType | null
    _avg: AppointementAvgAggregateOutputType | null
    _sum: AppointementSumAggregateOutputType | null
    _min: AppointementMinAggregateOutputType | null
    _max: AppointementMaxAggregateOutputType | null
  }

  export type AppointementAvgAggregateOutputType = {
    id: number | null
    clientId: number | null
    medicId: number | null
  }

  export type AppointementSumAggregateOutputType = {
    id: number | null
    clientId: number | null
    medicId: number | null
  }

  export type AppointementMinAggregateOutputType = {
    id: number | null
    clientId: number | null
    medicId: number | null
    appointementDate: Date | null
    createdAt: Date | null
    updatedAt: Date | null
  }

  export type AppointementMaxAggregateOutputType = {
    id: number | null
    clientId: number | null
    medicId: number | null
    appointementDate: Date | null
    createdAt: Date | null
    updatedAt: Date | null
  }

  export type AppointementCountAggregateOutputType = {
    id: number
    clientId: number
    medicId: number
    appointementDate: number
    createdAt: number
    updatedAt: number
    _all: number
  }


  export type AppointementAvgAggregateInputType = {
    id?: true
    clientId?: true
    medicId?: true
  }

  export type AppointementSumAggregateInputType = {
    id?: true
    clientId?: true
    medicId?: true
  }

  export type AppointementMinAggregateInputType = {
    id?: true
    clientId?: true
    medicId?: true
    appointementDate?: true
    createdAt?: true
    updatedAt?: true
  }

  export type AppointementMaxAggregateInputType = {
    id?: true
    clientId?: true
    medicId?: true
    appointementDate?: true
    createdAt?: true
    updatedAt?: true
  }

  export type AppointementCountAggregateInputType = {
    id?: true
    clientId?: true
    medicId?: true
    appointementDate?: true
    createdAt?: true
    updatedAt?: true
    _all?: true
  }

  export type AppointementAggregateArgs = {
    /**
     * Filter which Appointement to aggregate.
     * 
    **/
    where?: AppointementWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of Appointements to fetch.
     * 
    **/
    orderBy?: Enumerable<AppointementOrderByWithRelationInput>
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the start position
     * 
    **/
    cursor?: AppointementWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` Appointements from the position of the cursor.
     * 
    **/
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` Appointements.
     * 
    **/
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Count returned Appointements
    **/
    _count?: true | AppointementCountAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to average
    **/
    _avg?: AppointementAvgAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to sum
    **/
    _sum?: AppointementSumAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to find the minimum value
    **/
    _min?: AppointementMinAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to find the maximum value
    **/
    _max?: AppointementMaxAggregateInputType
  }

  export type GetAppointementAggregateType<T extends AppointementAggregateArgs> = {
        [P in keyof T & keyof AggregateAppointement]: P extends '_count' | 'count'
      ? T[P] extends true
        ? number
        : GetScalarType<T[P], AggregateAppointement[P]>
      : GetScalarType<T[P], AggregateAppointement[P]>
  }




  export type AppointementGroupByArgs = {
    where?: AppointementWhereInput
    orderBy?: Enumerable<AppointementOrderByWithAggregationInput>
    by: Array<AppointementScalarFieldEnum>
    having?: AppointementScalarWhereWithAggregatesInput
    take?: number
    skip?: number
    _count?: AppointementCountAggregateInputType | true
    _avg?: AppointementAvgAggregateInputType
    _sum?: AppointementSumAggregateInputType
    _min?: AppointementMinAggregateInputType
    _max?: AppointementMaxAggregateInputType
  }


  export type AppointementGroupByOutputType = {
    id: number
    clientId: number | null
    medicId: number | null
    appointementDate: Date
    createdAt: Date
    updatedAt: Date
    _count: AppointementCountAggregateOutputType | null
    _avg: AppointementAvgAggregateOutputType | null
    _sum: AppointementSumAggregateOutputType | null
    _min: AppointementMinAggregateOutputType | null
    _max: AppointementMaxAggregateOutputType | null
  }

  type GetAppointementGroupByPayload<T extends AppointementGroupByArgs> = PrismaPromise<
    Array<
      PickArray<AppointementGroupByOutputType, T['by']> &
        {
          [P in ((keyof T) & (keyof AppointementGroupByOutputType))]: P extends '_count'
            ? T[P] extends boolean
              ? number
              : GetScalarType<T[P], AppointementGroupByOutputType[P]>
            : GetScalarType<T[P], AppointementGroupByOutputType[P]>
        }
      >
    >


  export type AppointementSelect = {
    id?: boolean
    clientId?: boolean
    Client?: boolean | ClientArgs
    medicId?: boolean
    Medic?: boolean | MedicArgs
    appointementDate?: boolean
    createdAt?: boolean
    updatedAt?: boolean
  }

  export type AppointementInclude = {
    Client?: boolean | ClientArgs
    Medic?: boolean | MedicArgs
  }

  export type AppointementGetPayload<
    S extends boolean | null | undefined | AppointementArgs,
    U = keyof S
      > = S extends true
        ? Appointement
    : S extends undefined
    ? never
    : S extends AppointementArgs | AppointementFindManyArgs
    ?'include' extends U
    ? Appointement  & {
    [P in TrueKeys<S['include']>]:
        P extends 'Client' ? ClientGetPayload<S['include'][P]> | null :
        P extends 'Medic' ? MedicGetPayload<S['include'][P]> | null :  never
  } 
    : 'select' extends U
    ? {
    [P in TrueKeys<S['select']>]:
        P extends 'Client' ? ClientGetPayload<S['select'][P]> | null :
        P extends 'Medic' ? MedicGetPayload<S['select'][P]> | null :  P extends keyof Appointement ? Appointement[P] : never
  } 
    : Appointement
  : Appointement


  type AppointementCountArgs = Merge<
    Omit<AppointementFindManyArgs, 'select' | 'include'> & {
      select?: AppointementCountAggregateInputType | true
    }
  >

  export interface AppointementDelegate<GlobalRejectSettings> {
    /**
     * Find zero or one Appointement that matches the filter.
     * @param {AppointementFindUniqueArgs} args - Arguments to find a Appointement
     * @example
     * // Get one Appointement
     * const appointement = await prisma.appointement.findUnique({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
    **/
    findUnique<T extends AppointementFindUniqueArgs,  LocalRejectSettings = T["rejectOnNotFound"] extends RejectOnNotFound ? T['rejectOnNotFound'] : undefined>(
      args: SelectSubset<T, AppointementFindUniqueArgs>
    ): HasReject<GlobalRejectSettings, LocalRejectSettings, 'findUnique', 'Appointement'> extends True ? CheckSelect<T, Prisma__AppointementClient<Appointement>, Prisma__AppointementClient<AppointementGetPayload<T>>> : CheckSelect<T, Prisma__AppointementClient<Appointement | null >, Prisma__AppointementClient<AppointementGetPayload<T> | null >>

    /**
     * Find the first Appointement that matches the filter.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {AppointementFindFirstArgs} args - Arguments to find a Appointement
     * @example
     * // Get one Appointement
     * const appointement = await prisma.appointement.findFirst({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
    **/
    findFirst<T extends AppointementFindFirstArgs,  LocalRejectSettings = T["rejectOnNotFound"] extends RejectOnNotFound ? T['rejectOnNotFound'] : undefined>(
      args?: SelectSubset<T, AppointementFindFirstArgs>
    ): HasReject<GlobalRejectSettings, LocalRejectSettings, 'findFirst', 'Appointement'> extends True ? CheckSelect<T, Prisma__AppointementClient<Appointement>, Prisma__AppointementClient<AppointementGetPayload<T>>> : CheckSelect<T, Prisma__AppointementClient<Appointement | null >, Prisma__AppointementClient<AppointementGetPayload<T> | null >>

    /**
     * Find zero or more Appointements that matches the filter.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {AppointementFindManyArgs=} args - Arguments to filter and select certain fields only.
     * @example
     * // Get all Appointements
     * const appointements = await prisma.appointement.findMany()
     * 
     * // Get first 10 Appointements
     * const appointements = await prisma.appointement.findMany({ take: 10 })
     * 
     * // Only select the `id`
     * const appointementWithIdOnly = await prisma.appointement.findMany({ select: { id: true } })
     * 
    **/
    findMany<T extends AppointementFindManyArgs>(
      args?: SelectSubset<T, AppointementFindManyArgs>
    ): CheckSelect<T, PrismaPromise<Array<Appointement>>, PrismaPromise<Array<AppointementGetPayload<T>>>>

    /**
     * Create a Appointement.
     * @param {AppointementCreateArgs} args - Arguments to create a Appointement.
     * @example
     * // Create one Appointement
     * const Appointement = await prisma.appointement.create({
     *   data: {
     *     // ... data to create a Appointement
     *   }
     * })
     * 
    **/
    create<T extends AppointementCreateArgs>(
      args: SelectSubset<T, AppointementCreateArgs>
    ): CheckSelect<T, Prisma__AppointementClient<Appointement>, Prisma__AppointementClient<AppointementGetPayload<T>>>

    /**
     * Create many Appointements.
     *     @param {AppointementCreateManyArgs} args - Arguments to create many Appointements.
     *     @example
     *     // Create many Appointements
     *     const appointement = await prisma.appointement.createMany({
     *       data: {
     *         // ... provide data here
     *       }
     *     })
     *     
    **/
    createMany<T extends AppointementCreateManyArgs>(
      args?: SelectSubset<T, AppointementCreateManyArgs>
    ): PrismaPromise<BatchPayload>

    /**
     * Delete a Appointement.
     * @param {AppointementDeleteArgs} args - Arguments to delete one Appointement.
     * @example
     * // Delete one Appointement
     * const Appointement = await prisma.appointement.delete({
     *   where: {
     *     // ... filter to delete one Appointement
     *   }
     * })
     * 
    **/
    delete<T extends AppointementDeleteArgs>(
      args: SelectSubset<T, AppointementDeleteArgs>
    ): CheckSelect<T, Prisma__AppointementClient<Appointement>, Prisma__AppointementClient<AppointementGetPayload<T>>>

    /**
     * Update one Appointement.
     * @param {AppointementUpdateArgs} args - Arguments to update one Appointement.
     * @example
     * // Update one Appointement
     * const appointement = await prisma.appointement.update({
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: {
     *     // ... provide data here
     *   }
     * })
     * 
    **/
    update<T extends AppointementUpdateArgs>(
      args: SelectSubset<T, AppointementUpdateArgs>
    ): CheckSelect<T, Prisma__AppointementClient<Appointement>, Prisma__AppointementClient<AppointementGetPayload<T>>>

    /**
     * Delete zero or more Appointements.
     * @param {AppointementDeleteManyArgs} args - Arguments to filter Appointements to delete.
     * @example
     * // Delete a few Appointements
     * const { count } = await prisma.appointement.deleteMany({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     * 
    **/
    deleteMany<T extends AppointementDeleteManyArgs>(
      args?: SelectSubset<T, AppointementDeleteManyArgs>
    ): PrismaPromise<BatchPayload>

    /**
     * Update zero or more Appointements.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {AppointementUpdateManyArgs} args - Arguments to update one or more rows.
     * @example
     * // Update many Appointements
     * const appointement = await prisma.appointement.updateMany({
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: {
     *     // ... provide data here
     *   }
     * })
     * 
    **/
    updateMany<T extends AppointementUpdateManyArgs>(
      args: SelectSubset<T, AppointementUpdateManyArgs>
    ): PrismaPromise<BatchPayload>

    /**
     * Create or update one Appointement.
     * @param {AppointementUpsertArgs} args - Arguments to update or create a Appointement.
     * @example
     * // Update or create a Appointement
     * const appointement = await prisma.appointement.upsert({
     *   create: {
     *     // ... data to create a Appointement
     *   },
     *   update: {
     *     // ... in case it already exists, update
     *   },
     *   where: {
     *     // ... the filter for the Appointement we want to update
     *   }
     * })
    **/
    upsert<T extends AppointementUpsertArgs>(
      args: SelectSubset<T, AppointementUpsertArgs>
    ): CheckSelect<T, Prisma__AppointementClient<Appointement>, Prisma__AppointementClient<AppointementGetPayload<T>>>

    /**
     * Count the number of Appointements.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {AppointementCountArgs} args - Arguments to filter Appointements to count.
     * @example
     * // Count the number of Appointements
     * const count = await prisma.appointement.count({
     *   where: {
     *     // ... the filter for the Appointements we want to count
     *   }
     * })
    **/
    count<T extends AppointementCountArgs>(
      args?: Subset<T, AppointementCountArgs>,
    ): PrismaPromise<
      T extends _Record<'select', any>
        ? T['select'] extends true
          ? number
          : GetScalarType<T['select'], AppointementCountAggregateOutputType>
        : number
    >

    /**
     * Allows you to perform aggregations operations on a Appointement.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {AppointementAggregateArgs} args - Select which aggregations you would like to apply and on what fields.
     * @example
     * // Ordered by age ascending
     * // Where email contains prisma.io
     * // Limited to the 10 users
     * const aggregations = await prisma.user.aggregate({
     *   _avg: {
     *     age: true,
     *   },
     *   where: {
     *     email: {
     *       contains: "prisma.io",
     *     },
     *   },
     *   orderBy: {
     *     age: "asc",
     *   },
     *   take: 10,
     * })
    **/
    aggregate<T extends AppointementAggregateArgs>(args: Subset<T, AppointementAggregateArgs>): PrismaPromise<GetAppointementAggregateType<T>>

    /**
     * Group by Appointement.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {AppointementGroupByArgs} args - Group by arguments.
     * @example
     * // Group by city, order by createdAt, get count
     * const result = await prisma.user.groupBy({
     *   by: ['city', 'createdAt'],
     *   orderBy: {
     *     createdAt: true
     *   },
     *   _count: {
     *     _all: true
     *   },
     * })
     * 
    **/
    groupBy<
      T extends AppointementGroupByArgs,
      HasSelectOrTake extends Or<
        Extends<'skip', Keys<T>>,
        Extends<'take', Keys<T>>
      >,
      OrderByArg extends True extends HasSelectOrTake
        ? { orderBy: AppointementGroupByArgs['orderBy'] }
        : { orderBy?: AppointementGroupByArgs['orderBy'] },
      OrderFields extends ExcludeUnderscoreKeys<Keys<MaybeTupleToUnion<T['orderBy']>>>,
      ByFields extends TupleToUnion<T['by']>,
      ByValid extends Has<ByFields, OrderFields>,
      HavingFields extends GetHavingFields<T['having']>,
      HavingValid extends Has<ByFields, HavingFields>,
      ByEmpty extends T['by'] extends never[] ? True : False,
      InputErrors extends ByEmpty extends True
      ? `Error: "by" must not be empty.`
      : HavingValid extends False
      ? {
          [P in HavingFields]: P extends ByFields
            ? never
            : P extends string
            ? `Error: Field "${P}" used in "having" needs to be provided in "by".`
            : [
                Error,
                'Field ',
                P,
                ` in "having" needs to be provided in "by"`,
              ]
        }[HavingFields]
      : 'take' extends Keys<T>
      ? 'orderBy' extends Keys<T>
        ? ByValid extends True
          ? {}
          : {
              [P in OrderFields]: P extends ByFields
                ? never
                : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
            }[OrderFields]
        : 'Error: If you provide "take", you also need to provide "orderBy"'
      : 'skip' extends Keys<T>
      ? 'orderBy' extends Keys<T>
        ? ByValid extends True
          ? {}
          : {
              [P in OrderFields]: P extends ByFields
                ? never
                : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
            }[OrderFields]
        : 'Error: If you provide "skip", you also need to provide "orderBy"'
      : ByValid extends True
      ? {}
      : {
          [P in OrderFields]: P extends ByFields
            ? never
            : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
        }[OrderFields]
    >(args: SubsetIntersection<T, AppointementGroupByArgs, OrderByArg> & InputErrors): {} extends InputErrors ? GetAppointementGroupByPayload<T> : PrismaPromise<InputErrors>
  }

  /**
   * The delegate class that acts as a "Promise-like" for Appointement.
   * Why is this prefixed with `Prisma__`?
   * Because we want to prevent naming conflicts as mentioned in
   * https://github.com/prisma/prisma-client-js/issues/707
   */
  export class Prisma__AppointementClient<T> implements PrismaPromise<T> {
    [prisma]: true;
    private readonly _dmmf;
    private readonly _fetcher;
    private readonly _queryType;
    private readonly _rootField;
    private readonly _clientMethod;
    private readonly _args;
    private readonly _dataPath;
    private readonly _errorFormat;
    private readonly _measurePerformance?;
    private _isList;
    private _callsite;
    private _requestPromise?;
    constructor(_dmmf: runtime.DMMFClass, _fetcher: PrismaClientFetcher, _queryType: 'query' | 'mutation', _rootField: string, _clientMethod: string, _args: any, _dataPath: string[], _errorFormat: ErrorFormat, _measurePerformance?: boolean | undefined, _isList?: boolean);
    readonly [Symbol.toStringTag]: 'PrismaClientPromise';

    Client<T extends ClientArgs = {}>(args?: Subset<T, ClientArgs>): CheckSelect<T, Prisma__ClientClient<Client | null >, Prisma__ClientClient<ClientGetPayload<T> | null >>;

    Medic<T extends MedicArgs = {}>(args?: Subset<T, MedicArgs>): CheckSelect<T, Prisma__MedicClient<Medic | null >, Prisma__MedicClient<MedicGetPayload<T> | null >>;

    private get _document();
    /**
     * Attaches callbacks for the resolution and/or rejection of the Promise.
     * @param onfulfilled The callback to execute when the Promise is resolved.
     * @param onrejected The callback to execute when the Promise is rejected.
     * @returns A Promise for the completion of which ever callback is executed.
     */
    then<TResult1 = T, TResult2 = never>(onfulfilled?: ((value: T) => TResult1 | PromiseLike<TResult1>) | undefined | null, onrejected?: ((reason: any) => TResult2 | PromiseLike<TResult2>) | undefined | null): Promise<TResult1 | TResult2>;
    /**
     * Attaches a callback for only the rejection of the Promise.
     * @param onrejected The callback to execute when the Promise is rejected.
     * @returns A Promise for the completion of the callback.
     */
    catch<TResult = never>(onrejected?: ((reason: any) => TResult | PromiseLike<TResult>) | undefined | null): Promise<T | TResult>;
    /**
     * Attaches a callback that is invoked when the Promise is settled (fulfilled or rejected). The
     * resolved value cannot be modified from the callback.
     * @param onfinally The callback to execute when the Promise is settled (fulfilled or rejected).
     * @returns A Promise for the completion of the callback.
     */
    finally(onfinally?: (() => void) | undefined | null): Promise<T>;
  }

  // Custom InputTypes

  /**
   * Appointement findUnique
   */
  export type AppointementFindUniqueArgs = {
    /**
     * Select specific fields to fetch from the Appointement
     * 
    **/
    select?: AppointementSelect | null
    /**
     * Choose, which related nodes to fetch as well.
     * 
    **/
    include?: AppointementInclude | null
    /**
     * Throw an Error if a Appointement can't be found
     * 
    **/
    rejectOnNotFound?: RejectOnNotFound
    /**
     * Filter, which Appointement to fetch.
     * 
    **/
    where: AppointementWhereUniqueInput
  }


  /**
   * Appointement findFirst
   */
  export type AppointementFindFirstArgs = {
    /**
     * Select specific fields to fetch from the Appointement
     * 
    **/
    select?: AppointementSelect | null
    /**
     * Choose, which related nodes to fetch as well.
     * 
    **/
    include?: AppointementInclude | null
    /**
     * Throw an Error if a Appointement can't be found
     * 
    **/
    rejectOnNotFound?: RejectOnNotFound
    /**
     * Filter, which Appointement to fetch.
     * 
    **/
    where?: AppointementWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of Appointements to fetch.
     * 
    **/
    orderBy?: Enumerable<AppointementOrderByWithRelationInput>
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for searching for Appointements.
     * 
    **/
    cursor?: AppointementWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` Appointements from the position of the cursor.
     * 
    **/
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` Appointements.
     * 
    **/
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/distinct Distinct Docs}
     * 
     * Filter by unique combinations of Appointements.
     * 
    **/
    distinct?: Enumerable<AppointementScalarFieldEnum>
  }


  /**
   * Appointement findMany
   */
  export type AppointementFindManyArgs = {
    /**
     * Select specific fields to fetch from the Appointement
     * 
    **/
    select?: AppointementSelect | null
    /**
     * Choose, which related nodes to fetch as well.
     * 
    **/
    include?: AppointementInclude | null
    /**
     * Filter, which Appointements to fetch.
     * 
    **/
    where?: AppointementWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of Appointements to fetch.
     * 
    **/
    orderBy?: Enumerable<AppointementOrderByWithRelationInput>
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for listing Appointements.
     * 
    **/
    cursor?: AppointementWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` Appointements from the position of the cursor.
     * 
    **/
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` Appointements.
     * 
    **/
    skip?: number
    distinct?: Enumerable<AppointementScalarFieldEnum>
  }


  /**
   * Appointement create
   */
  export type AppointementCreateArgs = {
    /**
     * Select specific fields to fetch from the Appointement
     * 
    **/
    select?: AppointementSelect | null
    /**
     * Choose, which related nodes to fetch as well.
     * 
    **/
    include?: AppointementInclude | null
    /**
     * The data needed to create a Appointement.
     * 
    **/
    data: XOR<AppointementCreateInput, AppointementUncheckedCreateInput>
  }


  /**
   * Appointement createMany
   */
  export type AppointementCreateManyArgs = {
    /**
     * The data used to create many Appointements.
     * 
    **/
    data: Enumerable<AppointementCreateManyInput>
    skipDuplicates?: boolean
  }


  /**
   * Appointement update
   */
  export type AppointementUpdateArgs = {
    /**
     * Select specific fields to fetch from the Appointement
     * 
    **/
    select?: AppointementSelect | null
    /**
     * Choose, which related nodes to fetch as well.
     * 
    **/
    include?: AppointementInclude | null
    /**
     * The data needed to update a Appointement.
     * 
    **/
    data: XOR<AppointementUpdateInput, AppointementUncheckedUpdateInput>
    /**
     * Choose, which Appointement to update.
     * 
    **/
    where: AppointementWhereUniqueInput
  }


  /**
   * Appointement updateMany
   */
  export type AppointementUpdateManyArgs = {
    /**
     * The data used to update Appointements.
     * 
    **/
    data: XOR<AppointementUpdateManyMutationInput, AppointementUncheckedUpdateManyInput>
    /**
     * Filter which Appointements to update
     * 
    **/
    where?: AppointementWhereInput
  }


  /**
   * Appointement upsert
   */
  export type AppointementUpsertArgs = {
    /**
     * Select specific fields to fetch from the Appointement
     * 
    **/
    select?: AppointementSelect | null
    /**
     * Choose, which related nodes to fetch as well.
     * 
    **/
    include?: AppointementInclude | null
    /**
     * The filter to search for the Appointement to update in case it exists.
     * 
    **/
    where: AppointementWhereUniqueInput
    /**
     * In case the Appointement found by the `where` argument doesn't exist, create a new Appointement with this data.
     * 
    **/
    create: XOR<AppointementCreateInput, AppointementUncheckedCreateInput>
    /**
     * In case the Appointement was found with the provided `where` argument, update it with this data.
     * 
    **/
    update: XOR<AppointementUpdateInput, AppointementUncheckedUpdateInput>
  }


  /**
   * Appointement delete
   */
  export type AppointementDeleteArgs = {
    /**
     * Select specific fields to fetch from the Appointement
     * 
    **/
    select?: AppointementSelect | null
    /**
     * Choose, which related nodes to fetch as well.
     * 
    **/
    include?: AppointementInclude | null
    /**
     * Filter which Appointement to delete.
     * 
    **/
    where: AppointementWhereUniqueInput
  }


  /**
   * Appointement deleteMany
   */
  export type AppointementDeleteManyArgs = {
    /**
     * Filter which Appointements to delete
     * 
    **/
    where?: AppointementWhereInput
  }


  /**
   * Appointement without action
   */
  export type AppointementArgs = {
    /**
     * Select specific fields to fetch from the Appointement
     * 
    **/
    select?: AppointementSelect | null
    /**
     * Choose, which related nodes to fetch as well.
     * 
    **/
    include?: AppointementInclude | null
  }



  /**
   * Model Prescription
   */


  export type AggregatePrescription = {
    _count: PrescriptionCountAggregateOutputType | null
    _avg: PrescriptionAvgAggregateOutputType | null
    _sum: PrescriptionSumAggregateOutputType | null
    _min: PrescriptionMinAggregateOutputType | null
    _max: PrescriptionMaxAggregateOutputType | null
  }

  export type PrescriptionAvgAggregateOutputType = {
    id: number | null
    clientId: number | null
    medicId: number | null
  }

  export type PrescriptionSumAggregateOutputType = {
    id: number | null
    clientId: number | null
    medicId: number | null
  }

  export type PrescriptionMinAggregateOutputType = {
    id: number | null
    clientId: number | null
    medicId: number | null
    description: string | null
    requestingRenewal: boolean | null
    expirationDate: Date | null
    createdAt: Date | null
    updatedAt: Date | null
  }

  export type PrescriptionMaxAggregateOutputType = {
    id: number | null
    clientId: number | null
    medicId: number | null
    description: string | null
    requestingRenewal: boolean | null
    expirationDate: Date | null
    createdAt: Date | null
    updatedAt: Date | null
  }

  export type PrescriptionCountAggregateOutputType = {
    id: number
    clientId: number
    medicId: number
    medications: number
    description: number
    requestingRenewal: number
    expirationDate: number
    createdAt: number
    updatedAt: number
    _all: number
  }


  export type PrescriptionAvgAggregateInputType = {
    id?: true
    clientId?: true
    medicId?: true
  }

  export type PrescriptionSumAggregateInputType = {
    id?: true
    clientId?: true
    medicId?: true
  }

  export type PrescriptionMinAggregateInputType = {
    id?: true
    clientId?: true
    medicId?: true
    description?: true
    requestingRenewal?: true
    expirationDate?: true
    createdAt?: true
    updatedAt?: true
  }

  export type PrescriptionMaxAggregateInputType = {
    id?: true
    clientId?: true
    medicId?: true
    description?: true
    requestingRenewal?: true
    expirationDate?: true
    createdAt?: true
    updatedAt?: true
  }

  export type PrescriptionCountAggregateInputType = {
    id?: true
    clientId?: true
    medicId?: true
    medications?: true
    description?: true
    requestingRenewal?: true
    expirationDate?: true
    createdAt?: true
    updatedAt?: true
    _all?: true
  }

  export type PrescriptionAggregateArgs = {
    /**
     * Filter which Prescription to aggregate.
     * 
    **/
    where?: PrescriptionWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of Prescriptions to fetch.
     * 
    **/
    orderBy?: Enumerable<PrescriptionOrderByWithRelationInput>
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the start position
     * 
    **/
    cursor?: PrescriptionWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` Prescriptions from the position of the cursor.
     * 
    **/
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` Prescriptions.
     * 
    **/
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Count returned Prescriptions
    **/
    _count?: true | PrescriptionCountAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to average
    **/
    _avg?: PrescriptionAvgAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to sum
    **/
    _sum?: PrescriptionSumAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to find the minimum value
    **/
    _min?: PrescriptionMinAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to find the maximum value
    **/
    _max?: PrescriptionMaxAggregateInputType
  }

  export type GetPrescriptionAggregateType<T extends PrescriptionAggregateArgs> = {
        [P in keyof T & keyof AggregatePrescription]: P extends '_count' | 'count'
      ? T[P] extends true
        ? number
        : GetScalarType<T[P], AggregatePrescription[P]>
      : GetScalarType<T[P], AggregatePrescription[P]>
  }




  export type PrescriptionGroupByArgs = {
    where?: PrescriptionWhereInput
    orderBy?: Enumerable<PrescriptionOrderByWithAggregationInput>
    by: Array<PrescriptionScalarFieldEnum>
    having?: PrescriptionScalarWhereWithAggregatesInput
    take?: number
    skip?: number
    _count?: PrescriptionCountAggregateInputType | true
    _avg?: PrescriptionAvgAggregateInputType
    _sum?: PrescriptionSumAggregateInputType
    _min?: PrescriptionMinAggregateInputType
    _max?: PrescriptionMaxAggregateInputType
  }


  export type PrescriptionGroupByOutputType = {
    id: number
    clientId: number | null
    medicId: number | null
    medications: JsonValue
    description: string
    requestingRenewal: boolean
    expirationDate: Date
    createdAt: Date
    updatedAt: Date
    _count: PrescriptionCountAggregateOutputType | null
    _avg: PrescriptionAvgAggregateOutputType | null
    _sum: PrescriptionSumAggregateOutputType | null
    _min: PrescriptionMinAggregateOutputType | null
    _max: PrescriptionMaxAggregateOutputType | null
  }

  type GetPrescriptionGroupByPayload<T extends PrescriptionGroupByArgs> = PrismaPromise<
    Array<
      PickArray<PrescriptionGroupByOutputType, T['by']> &
        {
          [P in ((keyof T) & (keyof PrescriptionGroupByOutputType))]: P extends '_count'
            ? T[P] extends boolean
              ? number
              : GetScalarType<T[P], PrescriptionGroupByOutputType[P]>
            : GetScalarType<T[P], PrescriptionGroupByOutputType[P]>
        }
      >
    >


  export type PrescriptionSelect = {
    id?: boolean
    clientId?: boolean
    Client?: boolean | ClientArgs
    medicId?: boolean
    Medic?: boolean | MedicArgs
    medications?: boolean
    description?: boolean
    requestingRenewal?: boolean
    expirationDate?: boolean
    createdAt?: boolean
    updatedAt?: boolean
  }

  export type PrescriptionInclude = {
    Client?: boolean | ClientArgs
    Medic?: boolean | MedicArgs
  }

  export type PrescriptionGetPayload<
    S extends boolean | null | undefined | PrescriptionArgs,
    U = keyof S
      > = S extends true
        ? Prescription
    : S extends undefined
    ? never
    : S extends PrescriptionArgs | PrescriptionFindManyArgs
    ?'include' extends U
    ? Prescription  & {
    [P in TrueKeys<S['include']>]:
        P extends 'Client' ? ClientGetPayload<S['include'][P]> | null :
        P extends 'Medic' ? MedicGetPayload<S['include'][P]> | null :  never
  } 
    : 'select' extends U
    ? {
    [P in TrueKeys<S['select']>]:
        P extends 'Client' ? ClientGetPayload<S['select'][P]> | null :
        P extends 'Medic' ? MedicGetPayload<S['select'][P]> | null :  P extends keyof Prescription ? Prescription[P] : never
  } 
    : Prescription
  : Prescription


  type PrescriptionCountArgs = Merge<
    Omit<PrescriptionFindManyArgs, 'select' | 'include'> & {
      select?: PrescriptionCountAggregateInputType | true
    }
  >

  export interface PrescriptionDelegate<GlobalRejectSettings> {
    /**
     * Find zero or one Prescription that matches the filter.
     * @param {PrescriptionFindUniqueArgs} args - Arguments to find a Prescription
     * @example
     * // Get one Prescription
     * const prescription = await prisma.prescription.findUnique({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
    **/
    findUnique<T extends PrescriptionFindUniqueArgs,  LocalRejectSettings = T["rejectOnNotFound"] extends RejectOnNotFound ? T['rejectOnNotFound'] : undefined>(
      args: SelectSubset<T, PrescriptionFindUniqueArgs>
    ): HasReject<GlobalRejectSettings, LocalRejectSettings, 'findUnique', 'Prescription'> extends True ? CheckSelect<T, Prisma__PrescriptionClient<Prescription>, Prisma__PrescriptionClient<PrescriptionGetPayload<T>>> : CheckSelect<T, Prisma__PrescriptionClient<Prescription | null >, Prisma__PrescriptionClient<PrescriptionGetPayload<T> | null >>

    /**
     * Find the first Prescription that matches the filter.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {PrescriptionFindFirstArgs} args - Arguments to find a Prescription
     * @example
     * // Get one Prescription
     * const prescription = await prisma.prescription.findFirst({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
    **/
    findFirst<T extends PrescriptionFindFirstArgs,  LocalRejectSettings = T["rejectOnNotFound"] extends RejectOnNotFound ? T['rejectOnNotFound'] : undefined>(
      args?: SelectSubset<T, PrescriptionFindFirstArgs>
    ): HasReject<GlobalRejectSettings, LocalRejectSettings, 'findFirst', 'Prescription'> extends True ? CheckSelect<T, Prisma__PrescriptionClient<Prescription>, Prisma__PrescriptionClient<PrescriptionGetPayload<T>>> : CheckSelect<T, Prisma__PrescriptionClient<Prescription | null >, Prisma__PrescriptionClient<PrescriptionGetPayload<T> | null >>

    /**
     * Find zero or more Prescriptions that matches the filter.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {PrescriptionFindManyArgs=} args - Arguments to filter and select certain fields only.
     * @example
     * // Get all Prescriptions
     * const prescriptions = await prisma.prescription.findMany()
     * 
     * // Get first 10 Prescriptions
     * const prescriptions = await prisma.prescription.findMany({ take: 10 })
     * 
     * // Only select the `id`
     * const prescriptionWithIdOnly = await prisma.prescription.findMany({ select: { id: true } })
     * 
    **/
    findMany<T extends PrescriptionFindManyArgs>(
      args?: SelectSubset<T, PrescriptionFindManyArgs>
    ): CheckSelect<T, PrismaPromise<Array<Prescription>>, PrismaPromise<Array<PrescriptionGetPayload<T>>>>

    /**
     * Create a Prescription.
     * @param {PrescriptionCreateArgs} args - Arguments to create a Prescription.
     * @example
     * // Create one Prescription
     * const Prescription = await prisma.prescription.create({
     *   data: {
     *     // ... data to create a Prescription
     *   }
     * })
     * 
    **/
    create<T extends PrescriptionCreateArgs>(
      args: SelectSubset<T, PrescriptionCreateArgs>
    ): CheckSelect<T, Prisma__PrescriptionClient<Prescription>, Prisma__PrescriptionClient<PrescriptionGetPayload<T>>>

    /**
     * Create many Prescriptions.
     *     @param {PrescriptionCreateManyArgs} args - Arguments to create many Prescriptions.
     *     @example
     *     // Create many Prescriptions
     *     const prescription = await prisma.prescription.createMany({
     *       data: {
     *         // ... provide data here
     *       }
     *     })
     *     
    **/
    createMany<T extends PrescriptionCreateManyArgs>(
      args?: SelectSubset<T, PrescriptionCreateManyArgs>
    ): PrismaPromise<BatchPayload>

    /**
     * Delete a Prescription.
     * @param {PrescriptionDeleteArgs} args - Arguments to delete one Prescription.
     * @example
     * // Delete one Prescription
     * const Prescription = await prisma.prescription.delete({
     *   where: {
     *     // ... filter to delete one Prescription
     *   }
     * })
     * 
    **/
    delete<T extends PrescriptionDeleteArgs>(
      args: SelectSubset<T, PrescriptionDeleteArgs>
    ): CheckSelect<T, Prisma__PrescriptionClient<Prescription>, Prisma__PrescriptionClient<PrescriptionGetPayload<T>>>

    /**
     * Update one Prescription.
     * @param {PrescriptionUpdateArgs} args - Arguments to update one Prescription.
     * @example
     * // Update one Prescription
     * const prescription = await prisma.prescription.update({
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: {
     *     // ... provide data here
     *   }
     * })
     * 
    **/
    update<T extends PrescriptionUpdateArgs>(
      args: SelectSubset<T, PrescriptionUpdateArgs>
    ): CheckSelect<T, Prisma__PrescriptionClient<Prescription>, Prisma__PrescriptionClient<PrescriptionGetPayload<T>>>

    /**
     * Delete zero or more Prescriptions.
     * @param {PrescriptionDeleteManyArgs} args - Arguments to filter Prescriptions to delete.
     * @example
     * // Delete a few Prescriptions
     * const { count } = await prisma.prescription.deleteMany({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     * 
    **/
    deleteMany<T extends PrescriptionDeleteManyArgs>(
      args?: SelectSubset<T, PrescriptionDeleteManyArgs>
    ): PrismaPromise<BatchPayload>

    /**
     * Update zero or more Prescriptions.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {PrescriptionUpdateManyArgs} args - Arguments to update one or more rows.
     * @example
     * // Update many Prescriptions
     * const prescription = await prisma.prescription.updateMany({
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: {
     *     // ... provide data here
     *   }
     * })
     * 
    **/
    updateMany<T extends PrescriptionUpdateManyArgs>(
      args: SelectSubset<T, PrescriptionUpdateManyArgs>
    ): PrismaPromise<BatchPayload>

    /**
     * Create or update one Prescription.
     * @param {PrescriptionUpsertArgs} args - Arguments to update or create a Prescription.
     * @example
     * // Update or create a Prescription
     * const prescription = await prisma.prescription.upsert({
     *   create: {
     *     // ... data to create a Prescription
     *   },
     *   update: {
     *     // ... in case it already exists, update
     *   },
     *   where: {
     *     // ... the filter for the Prescription we want to update
     *   }
     * })
    **/
    upsert<T extends PrescriptionUpsertArgs>(
      args: SelectSubset<T, PrescriptionUpsertArgs>
    ): CheckSelect<T, Prisma__PrescriptionClient<Prescription>, Prisma__PrescriptionClient<PrescriptionGetPayload<T>>>

    /**
     * Count the number of Prescriptions.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {PrescriptionCountArgs} args - Arguments to filter Prescriptions to count.
     * @example
     * // Count the number of Prescriptions
     * const count = await prisma.prescription.count({
     *   where: {
     *     // ... the filter for the Prescriptions we want to count
     *   }
     * })
    **/
    count<T extends PrescriptionCountArgs>(
      args?: Subset<T, PrescriptionCountArgs>,
    ): PrismaPromise<
      T extends _Record<'select', any>
        ? T['select'] extends true
          ? number
          : GetScalarType<T['select'], PrescriptionCountAggregateOutputType>
        : number
    >

    /**
     * Allows you to perform aggregations operations on a Prescription.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {PrescriptionAggregateArgs} args - Select which aggregations you would like to apply and on what fields.
     * @example
     * // Ordered by age ascending
     * // Where email contains prisma.io
     * // Limited to the 10 users
     * const aggregations = await prisma.user.aggregate({
     *   _avg: {
     *     age: true,
     *   },
     *   where: {
     *     email: {
     *       contains: "prisma.io",
     *     },
     *   },
     *   orderBy: {
     *     age: "asc",
     *   },
     *   take: 10,
     * })
    **/
    aggregate<T extends PrescriptionAggregateArgs>(args: Subset<T, PrescriptionAggregateArgs>): PrismaPromise<GetPrescriptionAggregateType<T>>

    /**
     * Group by Prescription.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {PrescriptionGroupByArgs} args - Group by arguments.
     * @example
     * // Group by city, order by createdAt, get count
     * const result = await prisma.user.groupBy({
     *   by: ['city', 'createdAt'],
     *   orderBy: {
     *     createdAt: true
     *   },
     *   _count: {
     *     _all: true
     *   },
     * })
     * 
    **/
    groupBy<
      T extends PrescriptionGroupByArgs,
      HasSelectOrTake extends Or<
        Extends<'skip', Keys<T>>,
        Extends<'take', Keys<T>>
      >,
      OrderByArg extends True extends HasSelectOrTake
        ? { orderBy: PrescriptionGroupByArgs['orderBy'] }
        : { orderBy?: PrescriptionGroupByArgs['orderBy'] },
      OrderFields extends ExcludeUnderscoreKeys<Keys<MaybeTupleToUnion<T['orderBy']>>>,
      ByFields extends TupleToUnion<T['by']>,
      ByValid extends Has<ByFields, OrderFields>,
      HavingFields extends GetHavingFields<T['having']>,
      HavingValid extends Has<ByFields, HavingFields>,
      ByEmpty extends T['by'] extends never[] ? True : False,
      InputErrors extends ByEmpty extends True
      ? `Error: "by" must not be empty.`
      : HavingValid extends False
      ? {
          [P in HavingFields]: P extends ByFields
            ? never
            : P extends string
            ? `Error: Field "${P}" used in "having" needs to be provided in "by".`
            : [
                Error,
                'Field ',
                P,
                ` in "having" needs to be provided in "by"`,
              ]
        }[HavingFields]
      : 'take' extends Keys<T>
      ? 'orderBy' extends Keys<T>
        ? ByValid extends True
          ? {}
          : {
              [P in OrderFields]: P extends ByFields
                ? never
                : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
            }[OrderFields]
        : 'Error: If you provide "take", you also need to provide "orderBy"'
      : 'skip' extends Keys<T>
      ? 'orderBy' extends Keys<T>
        ? ByValid extends True
          ? {}
          : {
              [P in OrderFields]: P extends ByFields
                ? never
                : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
            }[OrderFields]
        : 'Error: If you provide "skip", you also need to provide "orderBy"'
      : ByValid extends True
      ? {}
      : {
          [P in OrderFields]: P extends ByFields
            ? never
            : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
        }[OrderFields]
    >(args: SubsetIntersection<T, PrescriptionGroupByArgs, OrderByArg> & InputErrors): {} extends InputErrors ? GetPrescriptionGroupByPayload<T> : PrismaPromise<InputErrors>
  }

  /**
   * The delegate class that acts as a "Promise-like" for Prescription.
   * Why is this prefixed with `Prisma__`?
   * Because we want to prevent naming conflicts as mentioned in
   * https://github.com/prisma/prisma-client-js/issues/707
   */
  export class Prisma__PrescriptionClient<T> implements PrismaPromise<T> {
    [prisma]: true;
    private readonly _dmmf;
    private readonly _fetcher;
    private readonly _queryType;
    private readonly _rootField;
    private readonly _clientMethod;
    private readonly _args;
    private readonly _dataPath;
    private readonly _errorFormat;
    private readonly _measurePerformance?;
    private _isList;
    private _callsite;
    private _requestPromise?;
    constructor(_dmmf: runtime.DMMFClass, _fetcher: PrismaClientFetcher, _queryType: 'query' | 'mutation', _rootField: string, _clientMethod: string, _args: any, _dataPath: string[], _errorFormat: ErrorFormat, _measurePerformance?: boolean | undefined, _isList?: boolean);
    readonly [Symbol.toStringTag]: 'PrismaClientPromise';

    Client<T extends ClientArgs = {}>(args?: Subset<T, ClientArgs>): CheckSelect<T, Prisma__ClientClient<Client | null >, Prisma__ClientClient<ClientGetPayload<T> | null >>;

    Medic<T extends MedicArgs = {}>(args?: Subset<T, MedicArgs>): CheckSelect<T, Prisma__MedicClient<Medic | null >, Prisma__MedicClient<MedicGetPayload<T> | null >>;

    private get _document();
    /**
     * Attaches callbacks for the resolution and/or rejection of the Promise.
     * @param onfulfilled The callback to execute when the Promise is resolved.
     * @param onrejected The callback to execute when the Promise is rejected.
     * @returns A Promise for the completion of which ever callback is executed.
     */
    then<TResult1 = T, TResult2 = never>(onfulfilled?: ((value: T) => TResult1 | PromiseLike<TResult1>) | undefined | null, onrejected?: ((reason: any) => TResult2 | PromiseLike<TResult2>) | undefined | null): Promise<TResult1 | TResult2>;
    /**
     * Attaches a callback for only the rejection of the Promise.
     * @param onrejected The callback to execute when the Promise is rejected.
     * @returns A Promise for the completion of the callback.
     */
    catch<TResult = never>(onrejected?: ((reason: any) => TResult | PromiseLike<TResult>) | undefined | null): Promise<T | TResult>;
    /**
     * Attaches a callback that is invoked when the Promise is settled (fulfilled or rejected). The
     * resolved value cannot be modified from the callback.
     * @param onfinally The callback to execute when the Promise is settled (fulfilled or rejected).
     * @returns A Promise for the completion of the callback.
     */
    finally(onfinally?: (() => void) | undefined | null): Promise<T>;
  }

  // Custom InputTypes

  /**
   * Prescription findUnique
   */
  export type PrescriptionFindUniqueArgs = {
    /**
     * Select specific fields to fetch from the Prescription
     * 
    **/
    select?: PrescriptionSelect | null
    /**
     * Choose, which related nodes to fetch as well.
     * 
    **/
    include?: PrescriptionInclude | null
    /**
     * Throw an Error if a Prescription can't be found
     * 
    **/
    rejectOnNotFound?: RejectOnNotFound
    /**
     * Filter, which Prescription to fetch.
     * 
    **/
    where: PrescriptionWhereUniqueInput
  }


  /**
   * Prescription findFirst
   */
  export type PrescriptionFindFirstArgs = {
    /**
     * Select specific fields to fetch from the Prescription
     * 
    **/
    select?: PrescriptionSelect | null
    /**
     * Choose, which related nodes to fetch as well.
     * 
    **/
    include?: PrescriptionInclude | null
    /**
     * Throw an Error if a Prescription can't be found
     * 
    **/
    rejectOnNotFound?: RejectOnNotFound
    /**
     * Filter, which Prescription to fetch.
     * 
    **/
    where?: PrescriptionWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of Prescriptions to fetch.
     * 
    **/
    orderBy?: Enumerable<PrescriptionOrderByWithRelationInput>
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for searching for Prescriptions.
     * 
    **/
    cursor?: PrescriptionWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` Prescriptions from the position of the cursor.
     * 
    **/
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` Prescriptions.
     * 
    **/
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/distinct Distinct Docs}
     * 
     * Filter by unique combinations of Prescriptions.
     * 
    **/
    distinct?: Enumerable<PrescriptionScalarFieldEnum>
  }


  /**
   * Prescription findMany
   */
  export type PrescriptionFindManyArgs = {
    /**
     * Select specific fields to fetch from the Prescription
     * 
    **/
    select?: PrescriptionSelect | null
    /**
     * Choose, which related nodes to fetch as well.
     * 
    **/
    include?: PrescriptionInclude | null
    /**
     * Filter, which Prescriptions to fetch.
     * 
    **/
    where?: PrescriptionWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of Prescriptions to fetch.
     * 
    **/
    orderBy?: Enumerable<PrescriptionOrderByWithRelationInput>
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for listing Prescriptions.
     * 
    **/
    cursor?: PrescriptionWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` Prescriptions from the position of the cursor.
     * 
    **/
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` Prescriptions.
     * 
    **/
    skip?: number
    distinct?: Enumerable<PrescriptionScalarFieldEnum>
  }


  /**
   * Prescription create
   */
  export type PrescriptionCreateArgs = {
    /**
     * Select specific fields to fetch from the Prescription
     * 
    **/
    select?: PrescriptionSelect | null
    /**
     * Choose, which related nodes to fetch as well.
     * 
    **/
    include?: PrescriptionInclude | null
    /**
     * The data needed to create a Prescription.
     * 
    **/
    data: XOR<PrescriptionCreateInput, PrescriptionUncheckedCreateInput>
  }


  /**
   * Prescription createMany
   */
  export type PrescriptionCreateManyArgs = {
    /**
     * The data used to create many Prescriptions.
     * 
    **/
    data: Enumerable<PrescriptionCreateManyInput>
    skipDuplicates?: boolean
  }


  /**
   * Prescription update
   */
  export type PrescriptionUpdateArgs = {
    /**
     * Select specific fields to fetch from the Prescription
     * 
    **/
    select?: PrescriptionSelect | null
    /**
     * Choose, which related nodes to fetch as well.
     * 
    **/
    include?: PrescriptionInclude | null
    /**
     * The data needed to update a Prescription.
     * 
    **/
    data: XOR<PrescriptionUpdateInput, PrescriptionUncheckedUpdateInput>
    /**
     * Choose, which Prescription to update.
     * 
    **/
    where: PrescriptionWhereUniqueInput
  }


  /**
   * Prescription updateMany
   */
  export type PrescriptionUpdateManyArgs = {
    /**
     * The data used to update Prescriptions.
     * 
    **/
    data: XOR<PrescriptionUpdateManyMutationInput, PrescriptionUncheckedUpdateManyInput>
    /**
     * Filter which Prescriptions to update
     * 
    **/
    where?: PrescriptionWhereInput
  }


  /**
   * Prescription upsert
   */
  export type PrescriptionUpsertArgs = {
    /**
     * Select specific fields to fetch from the Prescription
     * 
    **/
    select?: PrescriptionSelect | null
    /**
     * Choose, which related nodes to fetch as well.
     * 
    **/
    include?: PrescriptionInclude | null
    /**
     * The filter to search for the Prescription to update in case it exists.
     * 
    **/
    where: PrescriptionWhereUniqueInput
    /**
     * In case the Prescription found by the `where` argument doesn't exist, create a new Prescription with this data.
     * 
    **/
    create: XOR<PrescriptionCreateInput, PrescriptionUncheckedCreateInput>
    /**
     * In case the Prescription was found with the provided `where` argument, update it with this data.
     * 
    **/
    update: XOR<PrescriptionUpdateInput, PrescriptionUncheckedUpdateInput>
  }


  /**
   * Prescription delete
   */
  export type PrescriptionDeleteArgs = {
    /**
     * Select specific fields to fetch from the Prescription
     * 
    **/
    select?: PrescriptionSelect | null
    /**
     * Choose, which related nodes to fetch as well.
     * 
    **/
    include?: PrescriptionInclude | null
    /**
     * Filter which Prescription to delete.
     * 
    **/
    where: PrescriptionWhereUniqueInput
  }


  /**
   * Prescription deleteMany
   */
  export type PrescriptionDeleteManyArgs = {
    /**
     * Filter which Prescriptions to delete
     * 
    **/
    where?: PrescriptionWhereInput
  }


  /**
   * Prescription without action
   */
  export type PrescriptionArgs = {
    /**
     * Select specific fields to fetch from the Prescription
     * 
    **/
    select?: PrescriptionSelect | null
    /**
     * Choose, which related nodes to fetch as well.
     * 
    **/
    include?: PrescriptionInclude | null
  }



  /**
   * Model Report
   */


  export type AggregateReport = {
    _count: ReportCountAggregateOutputType | null
    _avg: ReportAvgAggregateOutputType | null
    _sum: ReportSumAggregateOutputType | null
    _min: ReportMinAggregateOutputType | null
    _max: ReportMaxAggregateOutputType | null
  }

  export type ReportAvgAggregateOutputType = {
    id: number | null
    clientId: number | null
    medicId: number | null
  }

  export type ReportSumAggregateOutputType = {
    id: number | null
    clientId: number | null
    medicId: number | null
  }

  export type ReportMinAggregateOutputType = {
    id: number | null
    clientId: number | null
    medicId: number | null
    title: string | null
    text: string | null
    createdAt: Date | null
    updatedAt: Date | null
  }

  export type ReportMaxAggregateOutputType = {
    id: number | null
    clientId: number | null
    medicId: number | null
    title: string | null
    text: string | null
    createdAt: Date | null
    updatedAt: Date | null
  }

  export type ReportCountAggregateOutputType = {
    id: number
    clientId: number
    medicId: number
    title: number
    text: number
    createdAt: number
    updatedAt: number
    _all: number
  }


  export type ReportAvgAggregateInputType = {
    id?: true
    clientId?: true
    medicId?: true
  }

  export type ReportSumAggregateInputType = {
    id?: true
    clientId?: true
    medicId?: true
  }

  export type ReportMinAggregateInputType = {
    id?: true
    clientId?: true
    medicId?: true
    title?: true
    text?: true
    createdAt?: true
    updatedAt?: true
  }

  export type ReportMaxAggregateInputType = {
    id?: true
    clientId?: true
    medicId?: true
    title?: true
    text?: true
    createdAt?: true
    updatedAt?: true
  }

  export type ReportCountAggregateInputType = {
    id?: true
    clientId?: true
    medicId?: true
    title?: true
    text?: true
    createdAt?: true
    updatedAt?: true
    _all?: true
  }

  export type ReportAggregateArgs = {
    /**
     * Filter which Report to aggregate.
     * 
    **/
    where?: ReportWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of Reports to fetch.
     * 
    **/
    orderBy?: Enumerable<ReportOrderByWithRelationInput>
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the start position
     * 
    **/
    cursor?: ReportWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` Reports from the position of the cursor.
     * 
    **/
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` Reports.
     * 
    **/
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Count returned Reports
    **/
    _count?: true | ReportCountAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to average
    **/
    _avg?: ReportAvgAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to sum
    **/
    _sum?: ReportSumAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to find the minimum value
    **/
    _min?: ReportMinAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to find the maximum value
    **/
    _max?: ReportMaxAggregateInputType
  }

  export type GetReportAggregateType<T extends ReportAggregateArgs> = {
        [P in keyof T & keyof AggregateReport]: P extends '_count' | 'count'
      ? T[P] extends true
        ? number
        : GetScalarType<T[P], AggregateReport[P]>
      : GetScalarType<T[P], AggregateReport[P]>
  }




  export type ReportGroupByArgs = {
    where?: ReportWhereInput
    orderBy?: Enumerable<ReportOrderByWithAggregationInput>
    by: Array<ReportScalarFieldEnum>
    having?: ReportScalarWhereWithAggregatesInput
    take?: number
    skip?: number
    _count?: ReportCountAggregateInputType | true
    _avg?: ReportAvgAggregateInputType
    _sum?: ReportSumAggregateInputType
    _min?: ReportMinAggregateInputType
    _max?: ReportMaxAggregateInputType
  }


  export type ReportGroupByOutputType = {
    id: number
    clientId: number | null
    medicId: number | null
    title: string
    text: string
    createdAt: Date
    updatedAt: Date
    _count: ReportCountAggregateOutputType | null
    _avg: ReportAvgAggregateOutputType | null
    _sum: ReportSumAggregateOutputType | null
    _min: ReportMinAggregateOutputType | null
    _max: ReportMaxAggregateOutputType | null
  }

  type GetReportGroupByPayload<T extends ReportGroupByArgs> = PrismaPromise<
    Array<
      PickArray<ReportGroupByOutputType, T['by']> &
        {
          [P in ((keyof T) & (keyof ReportGroupByOutputType))]: P extends '_count'
            ? T[P] extends boolean
              ? number
              : GetScalarType<T[P], ReportGroupByOutputType[P]>
            : GetScalarType<T[P], ReportGroupByOutputType[P]>
        }
      >
    >


  export type ReportSelect = {
    id?: boolean
    clientId?: boolean
    Client?: boolean | ClientArgs
    medicId?: boolean
    Medic?: boolean | MedicArgs
    title?: boolean
    text?: boolean
    createdAt?: boolean
    updatedAt?: boolean
  }

  export type ReportInclude = {
    Client?: boolean | ClientArgs
    Medic?: boolean | MedicArgs
  }

  export type ReportGetPayload<
    S extends boolean | null | undefined | ReportArgs,
    U = keyof S
      > = S extends true
        ? Report
    : S extends undefined
    ? never
    : S extends ReportArgs | ReportFindManyArgs
    ?'include' extends U
    ? Report  & {
    [P in TrueKeys<S['include']>]:
        P extends 'Client' ? ClientGetPayload<S['include'][P]> | null :
        P extends 'Medic' ? MedicGetPayload<S['include'][P]> | null :  never
  } 
    : 'select' extends U
    ? {
    [P in TrueKeys<S['select']>]:
        P extends 'Client' ? ClientGetPayload<S['select'][P]> | null :
        P extends 'Medic' ? MedicGetPayload<S['select'][P]> | null :  P extends keyof Report ? Report[P] : never
  } 
    : Report
  : Report


  type ReportCountArgs = Merge<
    Omit<ReportFindManyArgs, 'select' | 'include'> & {
      select?: ReportCountAggregateInputType | true
    }
  >

  export interface ReportDelegate<GlobalRejectSettings> {
    /**
     * Find zero or one Report that matches the filter.
     * @param {ReportFindUniqueArgs} args - Arguments to find a Report
     * @example
     * // Get one Report
     * const report = await prisma.report.findUnique({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
    **/
    findUnique<T extends ReportFindUniqueArgs,  LocalRejectSettings = T["rejectOnNotFound"] extends RejectOnNotFound ? T['rejectOnNotFound'] : undefined>(
      args: SelectSubset<T, ReportFindUniqueArgs>
    ): HasReject<GlobalRejectSettings, LocalRejectSettings, 'findUnique', 'Report'> extends True ? CheckSelect<T, Prisma__ReportClient<Report>, Prisma__ReportClient<ReportGetPayload<T>>> : CheckSelect<T, Prisma__ReportClient<Report | null >, Prisma__ReportClient<ReportGetPayload<T> | null >>

    /**
     * Find the first Report that matches the filter.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {ReportFindFirstArgs} args - Arguments to find a Report
     * @example
     * // Get one Report
     * const report = await prisma.report.findFirst({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
    **/
    findFirst<T extends ReportFindFirstArgs,  LocalRejectSettings = T["rejectOnNotFound"] extends RejectOnNotFound ? T['rejectOnNotFound'] : undefined>(
      args?: SelectSubset<T, ReportFindFirstArgs>
    ): HasReject<GlobalRejectSettings, LocalRejectSettings, 'findFirst', 'Report'> extends True ? CheckSelect<T, Prisma__ReportClient<Report>, Prisma__ReportClient<ReportGetPayload<T>>> : CheckSelect<T, Prisma__ReportClient<Report | null >, Prisma__ReportClient<ReportGetPayload<T> | null >>

    /**
     * Find zero or more Reports that matches the filter.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {ReportFindManyArgs=} args - Arguments to filter and select certain fields only.
     * @example
     * // Get all Reports
     * const reports = await prisma.report.findMany()
     * 
     * // Get first 10 Reports
     * const reports = await prisma.report.findMany({ take: 10 })
     * 
     * // Only select the `id`
     * const reportWithIdOnly = await prisma.report.findMany({ select: { id: true } })
     * 
    **/
    findMany<T extends ReportFindManyArgs>(
      args?: SelectSubset<T, ReportFindManyArgs>
    ): CheckSelect<T, PrismaPromise<Array<Report>>, PrismaPromise<Array<ReportGetPayload<T>>>>

    /**
     * Create a Report.
     * @param {ReportCreateArgs} args - Arguments to create a Report.
     * @example
     * // Create one Report
     * const Report = await prisma.report.create({
     *   data: {
     *     // ... data to create a Report
     *   }
     * })
     * 
    **/
    create<T extends ReportCreateArgs>(
      args: SelectSubset<T, ReportCreateArgs>
    ): CheckSelect<T, Prisma__ReportClient<Report>, Prisma__ReportClient<ReportGetPayload<T>>>

    /**
     * Create many Reports.
     *     @param {ReportCreateManyArgs} args - Arguments to create many Reports.
     *     @example
     *     // Create many Reports
     *     const report = await prisma.report.createMany({
     *       data: {
     *         // ... provide data here
     *       }
     *     })
     *     
    **/
    createMany<T extends ReportCreateManyArgs>(
      args?: SelectSubset<T, ReportCreateManyArgs>
    ): PrismaPromise<BatchPayload>

    /**
     * Delete a Report.
     * @param {ReportDeleteArgs} args - Arguments to delete one Report.
     * @example
     * // Delete one Report
     * const Report = await prisma.report.delete({
     *   where: {
     *     // ... filter to delete one Report
     *   }
     * })
     * 
    **/
    delete<T extends ReportDeleteArgs>(
      args: SelectSubset<T, ReportDeleteArgs>
    ): CheckSelect<T, Prisma__ReportClient<Report>, Prisma__ReportClient<ReportGetPayload<T>>>

    /**
     * Update one Report.
     * @param {ReportUpdateArgs} args - Arguments to update one Report.
     * @example
     * // Update one Report
     * const report = await prisma.report.update({
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: {
     *     // ... provide data here
     *   }
     * })
     * 
    **/
    update<T extends ReportUpdateArgs>(
      args: SelectSubset<T, ReportUpdateArgs>
    ): CheckSelect<T, Prisma__ReportClient<Report>, Prisma__ReportClient<ReportGetPayload<T>>>

    /**
     * Delete zero or more Reports.
     * @param {ReportDeleteManyArgs} args - Arguments to filter Reports to delete.
     * @example
     * // Delete a few Reports
     * const { count } = await prisma.report.deleteMany({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     * 
    **/
    deleteMany<T extends ReportDeleteManyArgs>(
      args?: SelectSubset<T, ReportDeleteManyArgs>
    ): PrismaPromise<BatchPayload>

    /**
     * Update zero or more Reports.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {ReportUpdateManyArgs} args - Arguments to update one or more rows.
     * @example
     * // Update many Reports
     * const report = await prisma.report.updateMany({
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: {
     *     // ... provide data here
     *   }
     * })
     * 
    **/
    updateMany<T extends ReportUpdateManyArgs>(
      args: SelectSubset<T, ReportUpdateManyArgs>
    ): PrismaPromise<BatchPayload>

    /**
     * Create or update one Report.
     * @param {ReportUpsertArgs} args - Arguments to update or create a Report.
     * @example
     * // Update or create a Report
     * const report = await prisma.report.upsert({
     *   create: {
     *     // ... data to create a Report
     *   },
     *   update: {
     *     // ... in case it already exists, update
     *   },
     *   where: {
     *     // ... the filter for the Report we want to update
     *   }
     * })
    **/
    upsert<T extends ReportUpsertArgs>(
      args: SelectSubset<T, ReportUpsertArgs>
    ): CheckSelect<T, Prisma__ReportClient<Report>, Prisma__ReportClient<ReportGetPayload<T>>>

    /**
     * Count the number of Reports.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {ReportCountArgs} args - Arguments to filter Reports to count.
     * @example
     * // Count the number of Reports
     * const count = await prisma.report.count({
     *   where: {
     *     // ... the filter for the Reports we want to count
     *   }
     * })
    **/
    count<T extends ReportCountArgs>(
      args?: Subset<T, ReportCountArgs>,
    ): PrismaPromise<
      T extends _Record<'select', any>
        ? T['select'] extends true
          ? number
          : GetScalarType<T['select'], ReportCountAggregateOutputType>
        : number
    >

    /**
     * Allows you to perform aggregations operations on a Report.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {ReportAggregateArgs} args - Select which aggregations you would like to apply and on what fields.
     * @example
     * // Ordered by age ascending
     * // Where email contains prisma.io
     * // Limited to the 10 users
     * const aggregations = await prisma.user.aggregate({
     *   _avg: {
     *     age: true,
     *   },
     *   where: {
     *     email: {
     *       contains: "prisma.io",
     *     },
     *   },
     *   orderBy: {
     *     age: "asc",
     *   },
     *   take: 10,
     * })
    **/
    aggregate<T extends ReportAggregateArgs>(args: Subset<T, ReportAggregateArgs>): PrismaPromise<GetReportAggregateType<T>>

    /**
     * Group by Report.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {ReportGroupByArgs} args - Group by arguments.
     * @example
     * // Group by city, order by createdAt, get count
     * const result = await prisma.user.groupBy({
     *   by: ['city', 'createdAt'],
     *   orderBy: {
     *     createdAt: true
     *   },
     *   _count: {
     *     _all: true
     *   },
     * })
     * 
    **/
    groupBy<
      T extends ReportGroupByArgs,
      HasSelectOrTake extends Or<
        Extends<'skip', Keys<T>>,
        Extends<'take', Keys<T>>
      >,
      OrderByArg extends True extends HasSelectOrTake
        ? { orderBy: ReportGroupByArgs['orderBy'] }
        : { orderBy?: ReportGroupByArgs['orderBy'] },
      OrderFields extends ExcludeUnderscoreKeys<Keys<MaybeTupleToUnion<T['orderBy']>>>,
      ByFields extends TupleToUnion<T['by']>,
      ByValid extends Has<ByFields, OrderFields>,
      HavingFields extends GetHavingFields<T['having']>,
      HavingValid extends Has<ByFields, HavingFields>,
      ByEmpty extends T['by'] extends never[] ? True : False,
      InputErrors extends ByEmpty extends True
      ? `Error: "by" must not be empty.`
      : HavingValid extends False
      ? {
          [P in HavingFields]: P extends ByFields
            ? never
            : P extends string
            ? `Error: Field "${P}" used in "having" needs to be provided in "by".`
            : [
                Error,
                'Field ',
                P,
                ` in "having" needs to be provided in "by"`,
              ]
        }[HavingFields]
      : 'take' extends Keys<T>
      ? 'orderBy' extends Keys<T>
        ? ByValid extends True
          ? {}
          : {
              [P in OrderFields]: P extends ByFields
                ? never
                : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
            }[OrderFields]
        : 'Error: If you provide "take", you also need to provide "orderBy"'
      : 'skip' extends Keys<T>
      ? 'orderBy' extends Keys<T>
        ? ByValid extends True
          ? {}
          : {
              [P in OrderFields]: P extends ByFields
                ? never
                : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
            }[OrderFields]
        : 'Error: If you provide "skip", you also need to provide "orderBy"'
      : ByValid extends True
      ? {}
      : {
          [P in OrderFields]: P extends ByFields
            ? never
            : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
        }[OrderFields]
    >(args: SubsetIntersection<T, ReportGroupByArgs, OrderByArg> & InputErrors): {} extends InputErrors ? GetReportGroupByPayload<T> : PrismaPromise<InputErrors>
  }

  /**
   * The delegate class that acts as a "Promise-like" for Report.
   * Why is this prefixed with `Prisma__`?
   * Because we want to prevent naming conflicts as mentioned in
   * https://github.com/prisma/prisma-client-js/issues/707
   */
  export class Prisma__ReportClient<T> implements PrismaPromise<T> {
    [prisma]: true;
    private readonly _dmmf;
    private readonly _fetcher;
    private readonly _queryType;
    private readonly _rootField;
    private readonly _clientMethod;
    private readonly _args;
    private readonly _dataPath;
    private readonly _errorFormat;
    private readonly _measurePerformance?;
    private _isList;
    private _callsite;
    private _requestPromise?;
    constructor(_dmmf: runtime.DMMFClass, _fetcher: PrismaClientFetcher, _queryType: 'query' | 'mutation', _rootField: string, _clientMethod: string, _args: any, _dataPath: string[], _errorFormat: ErrorFormat, _measurePerformance?: boolean | undefined, _isList?: boolean);
    readonly [Symbol.toStringTag]: 'PrismaClientPromise';

    Client<T extends ClientArgs = {}>(args?: Subset<T, ClientArgs>): CheckSelect<T, Prisma__ClientClient<Client | null >, Prisma__ClientClient<ClientGetPayload<T> | null >>;

    Medic<T extends MedicArgs = {}>(args?: Subset<T, MedicArgs>): CheckSelect<T, Prisma__MedicClient<Medic | null >, Prisma__MedicClient<MedicGetPayload<T> | null >>;

    private get _document();
    /**
     * Attaches callbacks for the resolution and/or rejection of the Promise.
     * @param onfulfilled The callback to execute when the Promise is resolved.
     * @param onrejected The callback to execute when the Promise is rejected.
     * @returns A Promise for the completion of which ever callback is executed.
     */
    then<TResult1 = T, TResult2 = never>(onfulfilled?: ((value: T) => TResult1 | PromiseLike<TResult1>) | undefined | null, onrejected?: ((reason: any) => TResult2 | PromiseLike<TResult2>) | undefined | null): Promise<TResult1 | TResult2>;
    /**
     * Attaches a callback for only the rejection of the Promise.
     * @param onrejected The callback to execute when the Promise is rejected.
     * @returns A Promise for the completion of the callback.
     */
    catch<TResult = never>(onrejected?: ((reason: any) => TResult | PromiseLike<TResult>) | undefined | null): Promise<T | TResult>;
    /**
     * Attaches a callback that is invoked when the Promise is settled (fulfilled or rejected). The
     * resolved value cannot be modified from the callback.
     * @param onfinally The callback to execute when the Promise is settled (fulfilled or rejected).
     * @returns A Promise for the completion of the callback.
     */
    finally(onfinally?: (() => void) | undefined | null): Promise<T>;
  }

  // Custom InputTypes

  /**
   * Report findUnique
   */
  export type ReportFindUniqueArgs = {
    /**
     * Select specific fields to fetch from the Report
     * 
    **/
    select?: ReportSelect | null
    /**
     * Choose, which related nodes to fetch as well.
     * 
    **/
    include?: ReportInclude | null
    /**
     * Throw an Error if a Report can't be found
     * 
    **/
    rejectOnNotFound?: RejectOnNotFound
    /**
     * Filter, which Report to fetch.
     * 
    **/
    where: ReportWhereUniqueInput
  }


  /**
   * Report findFirst
   */
  export type ReportFindFirstArgs = {
    /**
     * Select specific fields to fetch from the Report
     * 
    **/
    select?: ReportSelect | null
    /**
     * Choose, which related nodes to fetch as well.
     * 
    **/
    include?: ReportInclude | null
    /**
     * Throw an Error if a Report can't be found
     * 
    **/
    rejectOnNotFound?: RejectOnNotFound
    /**
     * Filter, which Report to fetch.
     * 
    **/
    where?: ReportWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of Reports to fetch.
     * 
    **/
    orderBy?: Enumerable<ReportOrderByWithRelationInput>
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for searching for Reports.
     * 
    **/
    cursor?: ReportWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` Reports from the position of the cursor.
     * 
    **/
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` Reports.
     * 
    **/
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/distinct Distinct Docs}
     * 
     * Filter by unique combinations of Reports.
     * 
    **/
    distinct?: Enumerable<ReportScalarFieldEnum>
  }


  /**
   * Report findMany
   */
  export type ReportFindManyArgs = {
    /**
     * Select specific fields to fetch from the Report
     * 
    **/
    select?: ReportSelect | null
    /**
     * Choose, which related nodes to fetch as well.
     * 
    **/
    include?: ReportInclude | null
    /**
     * Filter, which Reports to fetch.
     * 
    **/
    where?: ReportWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of Reports to fetch.
     * 
    **/
    orderBy?: Enumerable<ReportOrderByWithRelationInput>
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for listing Reports.
     * 
    **/
    cursor?: ReportWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` Reports from the position of the cursor.
     * 
    **/
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` Reports.
     * 
    **/
    skip?: number
    distinct?: Enumerable<ReportScalarFieldEnum>
  }


  /**
   * Report create
   */
  export type ReportCreateArgs = {
    /**
     * Select specific fields to fetch from the Report
     * 
    **/
    select?: ReportSelect | null
    /**
     * Choose, which related nodes to fetch as well.
     * 
    **/
    include?: ReportInclude | null
    /**
     * The data needed to create a Report.
     * 
    **/
    data: XOR<ReportCreateInput, ReportUncheckedCreateInput>
  }


  /**
   * Report createMany
   */
  export type ReportCreateManyArgs = {
    /**
     * The data used to create many Reports.
     * 
    **/
    data: Enumerable<ReportCreateManyInput>
    skipDuplicates?: boolean
  }


  /**
   * Report update
   */
  export type ReportUpdateArgs = {
    /**
     * Select specific fields to fetch from the Report
     * 
    **/
    select?: ReportSelect | null
    /**
     * Choose, which related nodes to fetch as well.
     * 
    **/
    include?: ReportInclude | null
    /**
     * The data needed to update a Report.
     * 
    **/
    data: XOR<ReportUpdateInput, ReportUncheckedUpdateInput>
    /**
     * Choose, which Report to update.
     * 
    **/
    where: ReportWhereUniqueInput
  }


  /**
   * Report updateMany
   */
  export type ReportUpdateManyArgs = {
    /**
     * The data used to update Reports.
     * 
    **/
    data: XOR<ReportUpdateManyMutationInput, ReportUncheckedUpdateManyInput>
    /**
     * Filter which Reports to update
     * 
    **/
    where?: ReportWhereInput
  }


  /**
   * Report upsert
   */
  export type ReportUpsertArgs = {
    /**
     * Select specific fields to fetch from the Report
     * 
    **/
    select?: ReportSelect | null
    /**
     * Choose, which related nodes to fetch as well.
     * 
    **/
    include?: ReportInclude | null
    /**
     * The filter to search for the Report to update in case it exists.
     * 
    **/
    where: ReportWhereUniqueInput
    /**
     * In case the Report found by the `where` argument doesn't exist, create a new Report with this data.
     * 
    **/
    create: XOR<ReportCreateInput, ReportUncheckedCreateInput>
    /**
     * In case the Report was found with the provided `where` argument, update it with this data.
     * 
    **/
    update: XOR<ReportUpdateInput, ReportUncheckedUpdateInput>
  }


  /**
   * Report delete
   */
  export type ReportDeleteArgs = {
    /**
     * Select specific fields to fetch from the Report
     * 
    **/
    select?: ReportSelect | null
    /**
     * Choose, which related nodes to fetch as well.
     * 
    **/
    include?: ReportInclude | null
    /**
     * Filter which Report to delete.
     * 
    **/
    where: ReportWhereUniqueInput
  }


  /**
   * Report deleteMany
   */
  export type ReportDeleteManyArgs = {
    /**
     * Filter which Reports to delete
     * 
    **/
    where?: ReportWhereInput
  }


  /**
   * Report without action
   */
  export type ReportArgs = {
    /**
     * Select specific fields to fetch from the Report
     * 
    **/
    select?: ReportSelect | null
    /**
     * Choose, which related nodes to fetch as well.
     * 
    **/
    include?: ReportInclude | null
  }



  /**
   * Model Exam
   */


  export type AggregateExam = {
    _count: ExamCountAggregateOutputType | null
    _avg: ExamAvgAggregateOutputType | null
    _sum: ExamSumAggregateOutputType | null
    _min: ExamMinAggregateOutputType | null
    _max: ExamMaxAggregateOutputType | null
  }

  export type ExamAvgAggregateOutputType = {
    id: number | null
    clientId: number | null
    medicId: number | null
  }

  export type ExamSumAggregateOutputType = {
    id: number | null
    clientId: number | null
    medicId: number | null
  }

  export type ExamMinAggregateOutputType = {
    id: number | null
    clientId: number | null
    medicId: number | null
    title: string | null
    text: string | null
    createdAt: Date | null
    updatedAt: Date | null
  }

  export type ExamMaxAggregateOutputType = {
    id: number | null
    clientId: number | null
    medicId: number | null
    title: string | null
    text: string | null
    createdAt: Date | null
    updatedAt: Date | null
  }

  export type ExamCountAggregateOutputType = {
    id: number
    clientId: number
    medicId: number
    title: number
    text: number
    createdAt: number
    updatedAt: number
    _all: number
  }


  export type ExamAvgAggregateInputType = {
    id?: true
    clientId?: true
    medicId?: true
  }

  export type ExamSumAggregateInputType = {
    id?: true
    clientId?: true
    medicId?: true
  }

  export type ExamMinAggregateInputType = {
    id?: true
    clientId?: true
    medicId?: true
    title?: true
    text?: true
    createdAt?: true
    updatedAt?: true
  }

  export type ExamMaxAggregateInputType = {
    id?: true
    clientId?: true
    medicId?: true
    title?: true
    text?: true
    createdAt?: true
    updatedAt?: true
  }

  export type ExamCountAggregateInputType = {
    id?: true
    clientId?: true
    medicId?: true
    title?: true
    text?: true
    createdAt?: true
    updatedAt?: true
    _all?: true
  }

  export type ExamAggregateArgs = {
    /**
     * Filter which Exam to aggregate.
     * 
    **/
    where?: ExamWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of Exams to fetch.
     * 
    **/
    orderBy?: Enumerable<ExamOrderByWithRelationInput>
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the start position
     * 
    **/
    cursor?: ExamWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` Exams from the position of the cursor.
     * 
    **/
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` Exams.
     * 
    **/
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Count returned Exams
    **/
    _count?: true | ExamCountAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to average
    **/
    _avg?: ExamAvgAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to sum
    **/
    _sum?: ExamSumAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to find the minimum value
    **/
    _min?: ExamMinAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to find the maximum value
    **/
    _max?: ExamMaxAggregateInputType
  }

  export type GetExamAggregateType<T extends ExamAggregateArgs> = {
        [P in keyof T & keyof AggregateExam]: P extends '_count' | 'count'
      ? T[P] extends true
        ? number
        : GetScalarType<T[P], AggregateExam[P]>
      : GetScalarType<T[P], AggregateExam[P]>
  }




  export type ExamGroupByArgs = {
    where?: ExamWhereInput
    orderBy?: Enumerable<ExamOrderByWithAggregationInput>
    by: Array<ExamScalarFieldEnum>
    having?: ExamScalarWhereWithAggregatesInput
    take?: number
    skip?: number
    _count?: ExamCountAggregateInputType | true
    _avg?: ExamAvgAggregateInputType
    _sum?: ExamSumAggregateInputType
    _min?: ExamMinAggregateInputType
    _max?: ExamMaxAggregateInputType
  }


  export type ExamGroupByOutputType = {
    id: number
    clientId: number | null
    medicId: number | null
    title: string
    text: string
    createdAt: Date
    updatedAt: Date
    _count: ExamCountAggregateOutputType | null
    _avg: ExamAvgAggregateOutputType | null
    _sum: ExamSumAggregateOutputType | null
    _min: ExamMinAggregateOutputType | null
    _max: ExamMaxAggregateOutputType | null
  }

  type GetExamGroupByPayload<T extends ExamGroupByArgs> = PrismaPromise<
    Array<
      PickArray<ExamGroupByOutputType, T['by']> &
        {
          [P in ((keyof T) & (keyof ExamGroupByOutputType))]: P extends '_count'
            ? T[P] extends boolean
              ? number
              : GetScalarType<T[P], ExamGroupByOutputType[P]>
            : GetScalarType<T[P], ExamGroupByOutputType[P]>
        }
      >
    >


  export type ExamSelect = {
    id?: boolean
    clientId?: boolean
    Client?: boolean | ClientArgs
    medicId?: boolean
    Medic?: boolean | MedicArgs
    title?: boolean
    text?: boolean
    createdAt?: boolean
    updatedAt?: boolean
  }

  export type ExamInclude = {
    Client?: boolean | ClientArgs
    Medic?: boolean | MedicArgs
  }

  export type ExamGetPayload<
    S extends boolean | null | undefined | ExamArgs,
    U = keyof S
      > = S extends true
        ? Exam
    : S extends undefined
    ? never
    : S extends ExamArgs | ExamFindManyArgs
    ?'include' extends U
    ? Exam  & {
    [P in TrueKeys<S['include']>]:
        P extends 'Client' ? ClientGetPayload<S['include'][P]> | null :
        P extends 'Medic' ? MedicGetPayload<S['include'][P]> | null :  never
  } 
    : 'select' extends U
    ? {
    [P in TrueKeys<S['select']>]:
        P extends 'Client' ? ClientGetPayload<S['select'][P]> | null :
        P extends 'Medic' ? MedicGetPayload<S['select'][P]> | null :  P extends keyof Exam ? Exam[P] : never
  } 
    : Exam
  : Exam


  type ExamCountArgs = Merge<
    Omit<ExamFindManyArgs, 'select' | 'include'> & {
      select?: ExamCountAggregateInputType | true
    }
  >

  export interface ExamDelegate<GlobalRejectSettings> {
    /**
     * Find zero or one Exam that matches the filter.
     * @param {ExamFindUniqueArgs} args - Arguments to find a Exam
     * @example
     * // Get one Exam
     * const exam = await prisma.exam.findUnique({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
    **/
    findUnique<T extends ExamFindUniqueArgs,  LocalRejectSettings = T["rejectOnNotFound"] extends RejectOnNotFound ? T['rejectOnNotFound'] : undefined>(
      args: SelectSubset<T, ExamFindUniqueArgs>
    ): HasReject<GlobalRejectSettings, LocalRejectSettings, 'findUnique', 'Exam'> extends True ? CheckSelect<T, Prisma__ExamClient<Exam>, Prisma__ExamClient<ExamGetPayload<T>>> : CheckSelect<T, Prisma__ExamClient<Exam | null >, Prisma__ExamClient<ExamGetPayload<T> | null >>

    /**
     * Find the first Exam that matches the filter.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {ExamFindFirstArgs} args - Arguments to find a Exam
     * @example
     * // Get one Exam
     * const exam = await prisma.exam.findFirst({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
    **/
    findFirst<T extends ExamFindFirstArgs,  LocalRejectSettings = T["rejectOnNotFound"] extends RejectOnNotFound ? T['rejectOnNotFound'] : undefined>(
      args?: SelectSubset<T, ExamFindFirstArgs>
    ): HasReject<GlobalRejectSettings, LocalRejectSettings, 'findFirst', 'Exam'> extends True ? CheckSelect<T, Prisma__ExamClient<Exam>, Prisma__ExamClient<ExamGetPayload<T>>> : CheckSelect<T, Prisma__ExamClient<Exam | null >, Prisma__ExamClient<ExamGetPayload<T> | null >>

    /**
     * Find zero or more Exams that matches the filter.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {ExamFindManyArgs=} args - Arguments to filter and select certain fields only.
     * @example
     * // Get all Exams
     * const exams = await prisma.exam.findMany()
     * 
     * // Get first 10 Exams
     * const exams = await prisma.exam.findMany({ take: 10 })
     * 
     * // Only select the `id`
     * const examWithIdOnly = await prisma.exam.findMany({ select: { id: true } })
     * 
    **/
    findMany<T extends ExamFindManyArgs>(
      args?: SelectSubset<T, ExamFindManyArgs>
    ): CheckSelect<T, PrismaPromise<Array<Exam>>, PrismaPromise<Array<ExamGetPayload<T>>>>

    /**
     * Create a Exam.
     * @param {ExamCreateArgs} args - Arguments to create a Exam.
     * @example
     * // Create one Exam
     * const Exam = await prisma.exam.create({
     *   data: {
     *     // ... data to create a Exam
     *   }
     * })
     * 
    **/
    create<T extends ExamCreateArgs>(
      args: SelectSubset<T, ExamCreateArgs>
    ): CheckSelect<T, Prisma__ExamClient<Exam>, Prisma__ExamClient<ExamGetPayload<T>>>

    /**
     * Create many Exams.
     *     @param {ExamCreateManyArgs} args - Arguments to create many Exams.
     *     @example
     *     // Create many Exams
     *     const exam = await prisma.exam.createMany({
     *       data: {
     *         // ... provide data here
     *       }
     *     })
     *     
    **/
    createMany<T extends ExamCreateManyArgs>(
      args?: SelectSubset<T, ExamCreateManyArgs>
    ): PrismaPromise<BatchPayload>

    /**
     * Delete a Exam.
     * @param {ExamDeleteArgs} args - Arguments to delete one Exam.
     * @example
     * // Delete one Exam
     * const Exam = await prisma.exam.delete({
     *   where: {
     *     // ... filter to delete one Exam
     *   }
     * })
     * 
    **/
    delete<T extends ExamDeleteArgs>(
      args: SelectSubset<T, ExamDeleteArgs>
    ): CheckSelect<T, Prisma__ExamClient<Exam>, Prisma__ExamClient<ExamGetPayload<T>>>

    /**
     * Update one Exam.
     * @param {ExamUpdateArgs} args - Arguments to update one Exam.
     * @example
     * // Update one Exam
     * const exam = await prisma.exam.update({
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: {
     *     // ... provide data here
     *   }
     * })
     * 
    **/
    update<T extends ExamUpdateArgs>(
      args: SelectSubset<T, ExamUpdateArgs>
    ): CheckSelect<T, Prisma__ExamClient<Exam>, Prisma__ExamClient<ExamGetPayload<T>>>

    /**
     * Delete zero or more Exams.
     * @param {ExamDeleteManyArgs} args - Arguments to filter Exams to delete.
     * @example
     * // Delete a few Exams
     * const { count } = await prisma.exam.deleteMany({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     * 
    **/
    deleteMany<T extends ExamDeleteManyArgs>(
      args?: SelectSubset<T, ExamDeleteManyArgs>
    ): PrismaPromise<BatchPayload>

    /**
     * Update zero or more Exams.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {ExamUpdateManyArgs} args - Arguments to update one or more rows.
     * @example
     * // Update many Exams
     * const exam = await prisma.exam.updateMany({
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: {
     *     // ... provide data here
     *   }
     * })
     * 
    **/
    updateMany<T extends ExamUpdateManyArgs>(
      args: SelectSubset<T, ExamUpdateManyArgs>
    ): PrismaPromise<BatchPayload>

    /**
     * Create or update one Exam.
     * @param {ExamUpsertArgs} args - Arguments to update or create a Exam.
     * @example
     * // Update or create a Exam
     * const exam = await prisma.exam.upsert({
     *   create: {
     *     // ... data to create a Exam
     *   },
     *   update: {
     *     // ... in case it already exists, update
     *   },
     *   where: {
     *     // ... the filter for the Exam we want to update
     *   }
     * })
    **/
    upsert<T extends ExamUpsertArgs>(
      args: SelectSubset<T, ExamUpsertArgs>
    ): CheckSelect<T, Prisma__ExamClient<Exam>, Prisma__ExamClient<ExamGetPayload<T>>>

    /**
     * Count the number of Exams.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {ExamCountArgs} args - Arguments to filter Exams to count.
     * @example
     * // Count the number of Exams
     * const count = await prisma.exam.count({
     *   where: {
     *     // ... the filter for the Exams we want to count
     *   }
     * })
    **/
    count<T extends ExamCountArgs>(
      args?: Subset<T, ExamCountArgs>,
    ): PrismaPromise<
      T extends _Record<'select', any>
        ? T['select'] extends true
          ? number
          : GetScalarType<T['select'], ExamCountAggregateOutputType>
        : number
    >

    /**
     * Allows you to perform aggregations operations on a Exam.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {ExamAggregateArgs} args - Select which aggregations you would like to apply and on what fields.
     * @example
     * // Ordered by age ascending
     * // Where email contains prisma.io
     * // Limited to the 10 users
     * const aggregations = await prisma.user.aggregate({
     *   _avg: {
     *     age: true,
     *   },
     *   where: {
     *     email: {
     *       contains: "prisma.io",
     *     },
     *   },
     *   orderBy: {
     *     age: "asc",
     *   },
     *   take: 10,
     * })
    **/
    aggregate<T extends ExamAggregateArgs>(args: Subset<T, ExamAggregateArgs>): PrismaPromise<GetExamAggregateType<T>>

    /**
     * Group by Exam.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {ExamGroupByArgs} args - Group by arguments.
     * @example
     * // Group by city, order by createdAt, get count
     * const result = await prisma.user.groupBy({
     *   by: ['city', 'createdAt'],
     *   orderBy: {
     *     createdAt: true
     *   },
     *   _count: {
     *     _all: true
     *   },
     * })
     * 
    **/
    groupBy<
      T extends ExamGroupByArgs,
      HasSelectOrTake extends Or<
        Extends<'skip', Keys<T>>,
        Extends<'take', Keys<T>>
      >,
      OrderByArg extends True extends HasSelectOrTake
        ? { orderBy: ExamGroupByArgs['orderBy'] }
        : { orderBy?: ExamGroupByArgs['orderBy'] },
      OrderFields extends ExcludeUnderscoreKeys<Keys<MaybeTupleToUnion<T['orderBy']>>>,
      ByFields extends TupleToUnion<T['by']>,
      ByValid extends Has<ByFields, OrderFields>,
      HavingFields extends GetHavingFields<T['having']>,
      HavingValid extends Has<ByFields, HavingFields>,
      ByEmpty extends T['by'] extends never[] ? True : False,
      InputErrors extends ByEmpty extends True
      ? `Error: "by" must not be empty.`
      : HavingValid extends False
      ? {
          [P in HavingFields]: P extends ByFields
            ? never
            : P extends string
            ? `Error: Field "${P}" used in "having" needs to be provided in "by".`
            : [
                Error,
                'Field ',
                P,
                ` in "having" needs to be provided in "by"`,
              ]
        }[HavingFields]
      : 'take' extends Keys<T>
      ? 'orderBy' extends Keys<T>
        ? ByValid extends True
          ? {}
          : {
              [P in OrderFields]: P extends ByFields
                ? never
                : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
            }[OrderFields]
        : 'Error: If you provide "take", you also need to provide "orderBy"'
      : 'skip' extends Keys<T>
      ? 'orderBy' extends Keys<T>
        ? ByValid extends True
          ? {}
          : {
              [P in OrderFields]: P extends ByFields
                ? never
                : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
            }[OrderFields]
        : 'Error: If you provide "skip", you also need to provide "orderBy"'
      : ByValid extends True
      ? {}
      : {
          [P in OrderFields]: P extends ByFields
            ? never
            : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
        }[OrderFields]
    >(args: SubsetIntersection<T, ExamGroupByArgs, OrderByArg> & InputErrors): {} extends InputErrors ? GetExamGroupByPayload<T> : PrismaPromise<InputErrors>
  }

  /**
   * The delegate class that acts as a "Promise-like" for Exam.
   * Why is this prefixed with `Prisma__`?
   * Because we want to prevent naming conflicts as mentioned in
   * https://github.com/prisma/prisma-client-js/issues/707
   */
  export class Prisma__ExamClient<T> implements PrismaPromise<T> {
    [prisma]: true;
    private readonly _dmmf;
    private readonly _fetcher;
    private readonly _queryType;
    private readonly _rootField;
    private readonly _clientMethod;
    private readonly _args;
    private readonly _dataPath;
    private readonly _errorFormat;
    private readonly _measurePerformance?;
    private _isList;
    private _callsite;
    private _requestPromise?;
    constructor(_dmmf: runtime.DMMFClass, _fetcher: PrismaClientFetcher, _queryType: 'query' | 'mutation', _rootField: string, _clientMethod: string, _args: any, _dataPath: string[], _errorFormat: ErrorFormat, _measurePerformance?: boolean | undefined, _isList?: boolean);
    readonly [Symbol.toStringTag]: 'PrismaClientPromise';

    Client<T extends ClientArgs = {}>(args?: Subset<T, ClientArgs>): CheckSelect<T, Prisma__ClientClient<Client | null >, Prisma__ClientClient<ClientGetPayload<T> | null >>;

    Medic<T extends MedicArgs = {}>(args?: Subset<T, MedicArgs>): CheckSelect<T, Prisma__MedicClient<Medic | null >, Prisma__MedicClient<MedicGetPayload<T> | null >>;

    private get _document();
    /**
     * Attaches callbacks for the resolution and/or rejection of the Promise.
     * @param onfulfilled The callback to execute when the Promise is resolved.
     * @param onrejected The callback to execute when the Promise is rejected.
     * @returns A Promise for the completion of which ever callback is executed.
     */
    then<TResult1 = T, TResult2 = never>(onfulfilled?: ((value: T) => TResult1 | PromiseLike<TResult1>) | undefined | null, onrejected?: ((reason: any) => TResult2 | PromiseLike<TResult2>) | undefined | null): Promise<TResult1 | TResult2>;
    /**
     * Attaches a callback for only the rejection of the Promise.
     * @param onrejected The callback to execute when the Promise is rejected.
     * @returns A Promise for the completion of the callback.
     */
    catch<TResult = never>(onrejected?: ((reason: any) => TResult | PromiseLike<TResult>) | undefined | null): Promise<T | TResult>;
    /**
     * Attaches a callback that is invoked when the Promise is settled (fulfilled or rejected). The
     * resolved value cannot be modified from the callback.
     * @param onfinally The callback to execute when the Promise is settled (fulfilled or rejected).
     * @returns A Promise for the completion of the callback.
     */
    finally(onfinally?: (() => void) | undefined | null): Promise<T>;
  }

  // Custom InputTypes

  /**
   * Exam findUnique
   */
  export type ExamFindUniqueArgs = {
    /**
     * Select specific fields to fetch from the Exam
     * 
    **/
    select?: ExamSelect | null
    /**
     * Choose, which related nodes to fetch as well.
     * 
    **/
    include?: ExamInclude | null
    /**
     * Throw an Error if a Exam can't be found
     * 
    **/
    rejectOnNotFound?: RejectOnNotFound
    /**
     * Filter, which Exam to fetch.
     * 
    **/
    where: ExamWhereUniqueInput
  }


  /**
   * Exam findFirst
   */
  export type ExamFindFirstArgs = {
    /**
     * Select specific fields to fetch from the Exam
     * 
    **/
    select?: ExamSelect | null
    /**
     * Choose, which related nodes to fetch as well.
     * 
    **/
    include?: ExamInclude | null
    /**
     * Throw an Error if a Exam can't be found
     * 
    **/
    rejectOnNotFound?: RejectOnNotFound
    /**
     * Filter, which Exam to fetch.
     * 
    **/
    where?: ExamWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of Exams to fetch.
     * 
    **/
    orderBy?: Enumerable<ExamOrderByWithRelationInput>
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for searching for Exams.
     * 
    **/
    cursor?: ExamWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` Exams from the position of the cursor.
     * 
    **/
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` Exams.
     * 
    **/
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/distinct Distinct Docs}
     * 
     * Filter by unique combinations of Exams.
     * 
    **/
    distinct?: Enumerable<ExamScalarFieldEnum>
  }


  /**
   * Exam findMany
   */
  export type ExamFindManyArgs = {
    /**
     * Select specific fields to fetch from the Exam
     * 
    **/
    select?: ExamSelect | null
    /**
     * Choose, which related nodes to fetch as well.
     * 
    **/
    include?: ExamInclude | null
    /**
     * Filter, which Exams to fetch.
     * 
    **/
    where?: ExamWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of Exams to fetch.
     * 
    **/
    orderBy?: Enumerable<ExamOrderByWithRelationInput>
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for listing Exams.
     * 
    **/
    cursor?: ExamWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` Exams from the position of the cursor.
     * 
    **/
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` Exams.
     * 
    **/
    skip?: number
    distinct?: Enumerable<ExamScalarFieldEnum>
  }


  /**
   * Exam create
   */
  export type ExamCreateArgs = {
    /**
     * Select specific fields to fetch from the Exam
     * 
    **/
    select?: ExamSelect | null
    /**
     * Choose, which related nodes to fetch as well.
     * 
    **/
    include?: ExamInclude | null
    /**
     * The data needed to create a Exam.
     * 
    **/
    data: XOR<ExamCreateInput, ExamUncheckedCreateInput>
  }


  /**
   * Exam createMany
   */
  export type ExamCreateManyArgs = {
    /**
     * The data used to create many Exams.
     * 
    **/
    data: Enumerable<ExamCreateManyInput>
    skipDuplicates?: boolean
  }


  /**
   * Exam update
   */
  export type ExamUpdateArgs = {
    /**
     * Select specific fields to fetch from the Exam
     * 
    **/
    select?: ExamSelect | null
    /**
     * Choose, which related nodes to fetch as well.
     * 
    **/
    include?: ExamInclude | null
    /**
     * The data needed to update a Exam.
     * 
    **/
    data: XOR<ExamUpdateInput, ExamUncheckedUpdateInput>
    /**
     * Choose, which Exam to update.
     * 
    **/
    where: ExamWhereUniqueInput
  }


  /**
   * Exam updateMany
   */
  export type ExamUpdateManyArgs = {
    /**
     * The data used to update Exams.
     * 
    **/
    data: XOR<ExamUpdateManyMutationInput, ExamUncheckedUpdateManyInput>
    /**
     * Filter which Exams to update
     * 
    **/
    where?: ExamWhereInput
  }


  /**
   * Exam upsert
   */
  export type ExamUpsertArgs = {
    /**
     * Select specific fields to fetch from the Exam
     * 
    **/
    select?: ExamSelect | null
    /**
     * Choose, which related nodes to fetch as well.
     * 
    **/
    include?: ExamInclude | null
    /**
     * The filter to search for the Exam to update in case it exists.
     * 
    **/
    where: ExamWhereUniqueInput
    /**
     * In case the Exam found by the `where` argument doesn't exist, create a new Exam with this data.
     * 
    **/
    create: XOR<ExamCreateInput, ExamUncheckedCreateInput>
    /**
     * In case the Exam was found with the provided `where` argument, update it with this data.
     * 
    **/
    update: XOR<ExamUpdateInput, ExamUncheckedUpdateInput>
  }


  /**
   * Exam delete
   */
  export type ExamDeleteArgs = {
    /**
     * Select specific fields to fetch from the Exam
     * 
    **/
    select?: ExamSelect | null
    /**
     * Choose, which related nodes to fetch as well.
     * 
    **/
    include?: ExamInclude | null
    /**
     * Filter which Exam to delete.
     * 
    **/
    where: ExamWhereUniqueInput
  }


  /**
   * Exam deleteMany
   */
  export type ExamDeleteManyArgs = {
    /**
     * Filter which Exams to delete
     * 
    **/
    where?: ExamWhereInput
  }


  /**
   * Exam without action
   */
  export type ExamArgs = {
    /**
     * Select specific fields to fetch from the Exam
     * 
    **/
    select?: ExamSelect | null
    /**
     * Choose, which related nodes to fetch as well.
     * 
    **/
    include?: ExamInclude | null
  }



  /**
   * Model SessionMedic
   */


  export type AggregateSessionMedic = {
    _count: SessionMedicCountAggregateOutputType | null
    _avg: SessionMedicAvgAggregateOutputType | null
    _sum: SessionMedicSumAggregateOutputType | null
    _min: SessionMedicMinAggregateOutputType | null
    _max: SessionMedicMaxAggregateOutputType | null
  }

  export type SessionMedicAvgAggregateOutputType = {
    id: number | null
    medicId: number | null
  }

  export type SessionMedicSumAggregateOutputType = {
    id: number | null
    medicId: number | null
  }

  export type SessionMedicMinAggregateOutputType = {
    id: number | null
    medicId: number | null
    token: string | null
    createdAt: Date | null
    updatedAt: Date | null
  }

  export type SessionMedicMaxAggregateOutputType = {
    id: number | null
    medicId: number | null
    token: string | null
    createdAt: Date | null
    updatedAt: Date | null
  }

  export type SessionMedicCountAggregateOutputType = {
    id: number
    medicId: number
    token: number
    createdAt: number
    updatedAt: number
    _all: number
  }


  export type SessionMedicAvgAggregateInputType = {
    id?: true
    medicId?: true
  }

  export type SessionMedicSumAggregateInputType = {
    id?: true
    medicId?: true
  }

  export type SessionMedicMinAggregateInputType = {
    id?: true
    medicId?: true
    token?: true
    createdAt?: true
    updatedAt?: true
  }

  export type SessionMedicMaxAggregateInputType = {
    id?: true
    medicId?: true
    token?: true
    createdAt?: true
    updatedAt?: true
  }

  export type SessionMedicCountAggregateInputType = {
    id?: true
    medicId?: true
    token?: true
    createdAt?: true
    updatedAt?: true
    _all?: true
  }

  export type SessionMedicAggregateArgs = {
    /**
     * Filter which SessionMedic to aggregate.
     * 
    **/
    where?: SessionMedicWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of SessionMedics to fetch.
     * 
    **/
    orderBy?: Enumerable<SessionMedicOrderByWithRelationInput>
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the start position
     * 
    **/
    cursor?: SessionMedicWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` SessionMedics from the position of the cursor.
     * 
    **/
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` SessionMedics.
     * 
    **/
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Count returned SessionMedics
    **/
    _count?: true | SessionMedicCountAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to average
    **/
    _avg?: SessionMedicAvgAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to sum
    **/
    _sum?: SessionMedicSumAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to find the minimum value
    **/
    _min?: SessionMedicMinAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to find the maximum value
    **/
    _max?: SessionMedicMaxAggregateInputType
  }

  export type GetSessionMedicAggregateType<T extends SessionMedicAggregateArgs> = {
        [P in keyof T & keyof AggregateSessionMedic]: P extends '_count' | 'count'
      ? T[P] extends true
        ? number
        : GetScalarType<T[P], AggregateSessionMedic[P]>
      : GetScalarType<T[P], AggregateSessionMedic[P]>
  }




  export type SessionMedicGroupByArgs = {
    where?: SessionMedicWhereInput
    orderBy?: Enumerable<SessionMedicOrderByWithAggregationInput>
    by: Array<SessionMedicScalarFieldEnum>
    having?: SessionMedicScalarWhereWithAggregatesInput
    take?: number
    skip?: number
    _count?: SessionMedicCountAggregateInputType | true
    _avg?: SessionMedicAvgAggregateInputType
    _sum?: SessionMedicSumAggregateInputType
    _min?: SessionMedicMinAggregateInputType
    _max?: SessionMedicMaxAggregateInputType
  }


  export type SessionMedicGroupByOutputType = {
    id: number
    medicId: number | null
    token: string
    createdAt: Date
    updatedAt: Date
    _count: SessionMedicCountAggregateOutputType | null
    _avg: SessionMedicAvgAggregateOutputType | null
    _sum: SessionMedicSumAggregateOutputType | null
    _min: SessionMedicMinAggregateOutputType | null
    _max: SessionMedicMaxAggregateOutputType | null
  }

  type GetSessionMedicGroupByPayload<T extends SessionMedicGroupByArgs> = PrismaPromise<
    Array<
      PickArray<SessionMedicGroupByOutputType, T['by']> &
        {
          [P in ((keyof T) & (keyof SessionMedicGroupByOutputType))]: P extends '_count'
            ? T[P] extends boolean
              ? number
              : GetScalarType<T[P], SessionMedicGroupByOutputType[P]>
            : GetScalarType<T[P], SessionMedicGroupByOutputType[P]>
        }
      >
    >


  export type SessionMedicSelect = {
    id?: boolean
    medicId?: boolean
    Medic?: boolean | MedicArgs
    token?: boolean
    createdAt?: boolean
    updatedAt?: boolean
  }

  export type SessionMedicInclude = {
    Medic?: boolean | MedicArgs
  }

  export type SessionMedicGetPayload<
    S extends boolean | null | undefined | SessionMedicArgs,
    U = keyof S
      > = S extends true
        ? SessionMedic
    : S extends undefined
    ? never
    : S extends SessionMedicArgs | SessionMedicFindManyArgs
    ?'include' extends U
    ? SessionMedic  & {
    [P in TrueKeys<S['include']>]:
        P extends 'Medic' ? MedicGetPayload<S['include'][P]> | null :  never
  } 
    : 'select' extends U
    ? {
    [P in TrueKeys<S['select']>]:
        P extends 'Medic' ? MedicGetPayload<S['select'][P]> | null :  P extends keyof SessionMedic ? SessionMedic[P] : never
  } 
    : SessionMedic
  : SessionMedic


  type SessionMedicCountArgs = Merge<
    Omit<SessionMedicFindManyArgs, 'select' | 'include'> & {
      select?: SessionMedicCountAggregateInputType | true
    }
  >

  export interface SessionMedicDelegate<GlobalRejectSettings> {
    /**
     * Find zero or one SessionMedic that matches the filter.
     * @param {SessionMedicFindUniqueArgs} args - Arguments to find a SessionMedic
     * @example
     * // Get one SessionMedic
     * const sessionMedic = await prisma.sessionMedic.findUnique({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
    **/
    findUnique<T extends SessionMedicFindUniqueArgs,  LocalRejectSettings = T["rejectOnNotFound"] extends RejectOnNotFound ? T['rejectOnNotFound'] : undefined>(
      args: SelectSubset<T, SessionMedicFindUniqueArgs>
    ): HasReject<GlobalRejectSettings, LocalRejectSettings, 'findUnique', 'SessionMedic'> extends True ? CheckSelect<T, Prisma__SessionMedicClient<SessionMedic>, Prisma__SessionMedicClient<SessionMedicGetPayload<T>>> : CheckSelect<T, Prisma__SessionMedicClient<SessionMedic | null >, Prisma__SessionMedicClient<SessionMedicGetPayload<T> | null >>

    /**
     * Find the first SessionMedic that matches the filter.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {SessionMedicFindFirstArgs} args - Arguments to find a SessionMedic
     * @example
     * // Get one SessionMedic
     * const sessionMedic = await prisma.sessionMedic.findFirst({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
    **/
    findFirst<T extends SessionMedicFindFirstArgs,  LocalRejectSettings = T["rejectOnNotFound"] extends RejectOnNotFound ? T['rejectOnNotFound'] : undefined>(
      args?: SelectSubset<T, SessionMedicFindFirstArgs>
    ): HasReject<GlobalRejectSettings, LocalRejectSettings, 'findFirst', 'SessionMedic'> extends True ? CheckSelect<T, Prisma__SessionMedicClient<SessionMedic>, Prisma__SessionMedicClient<SessionMedicGetPayload<T>>> : CheckSelect<T, Prisma__SessionMedicClient<SessionMedic | null >, Prisma__SessionMedicClient<SessionMedicGetPayload<T> | null >>

    /**
     * Find zero or more SessionMedics that matches the filter.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {SessionMedicFindManyArgs=} args - Arguments to filter and select certain fields only.
     * @example
     * // Get all SessionMedics
     * const sessionMedics = await prisma.sessionMedic.findMany()
     * 
     * // Get first 10 SessionMedics
     * const sessionMedics = await prisma.sessionMedic.findMany({ take: 10 })
     * 
     * // Only select the `id`
     * const sessionMedicWithIdOnly = await prisma.sessionMedic.findMany({ select: { id: true } })
     * 
    **/
    findMany<T extends SessionMedicFindManyArgs>(
      args?: SelectSubset<T, SessionMedicFindManyArgs>
    ): CheckSelect<T, PrismaPromise<Array<SessionMedic>>, PrismaPromise<Array<SessionMedicGetPayload<T>>>>

    /**
     * Create a SessionMedic.
     * @param {SessionMedicCreateArgs} args - Arguments to create a SessionMedic.
     * @example
     * // Create one SessionMedic
     * const SessionMedic = await prisma.sessionMedic.create({
     *   data: {
     *     // ... data to create a SessionMedic
     *   }
     * })
     * 
    **/
    create<T extends SessionMedicCreateArgs>(
      args: SelectSubset<T, SessionMedicCreateArgs>
    ): CheckSelect<T, Prisma__SessionMedicClient<SessionMedic>, Prisma__SessionMedicClient<SessionMedicGetPayload<T>>>

    /**
     * Create many SessionMedics.
     *     @param {SessionMedicCreateManyArgs} args - Arguments to create many SessionMedics.
     *     @example
     *     // Create many SessionMedics
     *     const sessionMedic = await prisma.sessionMedic.createMany({
     *       data: {
     *         // ... provide data here
     *       }
     *     })
     *     
    **/
    createMany<T extends SessionMedicCreateManyArgs>(
      args?: SelectSubset<T, SessionMedicCreateManyArgs>
    ): PrismaPromise<BatchPayload>

    /**
     * Delete a SessionMedic.
     * @param {SessionMedicDeleteArgs} args - Arguments to delete one SessionMedic.
     * @example
     * // Delete one SessionMedic
     * const SessionMedic = await prisma.sessionMedic.delete({
     *   where: {
     *     // ... filter to delete one SessionMedic
     *   }
     * })
     * 
    **/
    delete<T extends SessionMedicDeleteArgs>(
      args: SelectSubset<T, SessionMedicDeleteArgs>
    ): CheckSelect<T, Prisma__SessionMedicClient<SessionMedic>, Prisma__SessionMedicClient<SessionMedicGetPayload<T>>>

    /**
     * Update one SessionMedic.
     * @param {SessionMedicUpdateArgs} args - Arguments to update one SessionMedic.
     * @example
     * // Update one SessionMedic
     * const sessionMedic = await prisma.sessionMedic.update({
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: {
     *     // ... provide data here
     *   }
     * })
     * 
    **/
    update<T extends SessionMedicUpdateArgs>(
      args: SelectSubset<T, SessionMedicUpdateArgs>
    ): CheckSelect<T, Prisma__SessionMedicClient<SessionMedic>, Prisma__SessionMedicClient<SessionMedicGetPayload<T>>>

    /**
     * Delete zero or more SessionMedics.
     * @param {SessionMedicDeleteManyArgs} args - Arguments to filter SessionMedics to delete.
     * @example
     * // Delete a few SessionMedics
     * const { count } = await prisma.sessionMedic.deleteMany({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     * 
    **/
    deleteMany<T extends SessionMedicDeleteManyArgs>(
      args?: SelectSubset<T, SessionMedicDeleteManyArgs>
    ): PrismaPromise<BatchPayload>

    /**
     * Update zero or more SessionMedics.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {SessionMedicUpdateManyArgs} args - Arguments to update one or more rows.
     * @example
     * // Update many SessionMedics
     * const sessionMedic = await prisma.sessionMedic.updateMany({
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: {
     *     // ... provide data here
     *   }
     * })
     * 
    **/
    updateMany<T extends SessionMedicUpdateManyArgs>(
      args: SelectSubset<T, SessionMedicUpdateManyArgs>
    ): PrismaPromise<BatchPayload>

    /**
     * Create or update one SessionMedic.
     * @param {SessionMedicUpsertArgs} args - Arguments to update or create a SessionMedic.
     * @example
     * // Update or create a SessionMedic
     * const sessionMedic = await prisma.sessionMedic.upsert({
     *   create: {
     *     // ... data to create a SessionMedic
     *   },
     *   update: {
     *     // ... in case it already exists, update
     *   },
     *   where: {
     *     // ... the filter for the SessionMedic we want to update
     *   }
     * })
    **/
    upsert<T extends SessionMedicUpsertArgs>(
      args: SelectSubset<T, SessionMedicUpsertArgs>
    ): CheckSelect<T, Prisma__SessionMedicClient<SessionMedic>, Prisma__SessionMedicClient<SessionMedicGetPayload<T>>>

    /**
     * Count the number of SessionMedics.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {SessionMedicCountArgs} args - Arguments to filter SessionMedics to count.
     * @example
     * // Count the number of SessionMedics
     * const count = await prisma.sessionMedic.count({
     *   where: {
     *     // ... the filter for the SessionMedics we want to count
     *   }
     * })
    **/
    count<T extends SessionMedicCountArgs>(
      args?: Subset<T, SessionMedicCountArgs>,
    ): PrismaPromise<
      T extends _Record<'select', any>
        ? T['select'] extends true
          ? number
          : GetScalarType<T['select'], SessionMedicCountAggregateOutputType>
        : number
    >

    /**
     * Allows you to perform aggregations operations on a SessionMedic.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {SessionMedicAggregateArgs} args - Select which aggregations you would like to apply and on what fields.
     * @example
     * // Ordered by age ascending
     * // Where email contains prisma.io
     * // Limited to the 10 users
     * const aggregations = await prisma.user.aggregate({
     *   _avg: {
     *     age: true,
     *   },
     *   where: {
     *     email: {
     *       contains: "prisma.io",
     *     },
     *   },
     *   orderBy: {
     *     age: "asc",
     *   },
     *   take: 10,
     * })
    **/
    aggregate<T extends SessionMedicAggregateArgs>(args: Subset<T, SessionMedicAggregateArgs>): PrismaPromise<GetSessionMedicAggregateType<T>>

    /**
     * Group by SessionMedic.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {SessionMedicGroupByArgs} args - Group by arguments.
     * @example
     * // Group by city, order by createdAt, get count
     * const result = await prisma.user.groupBy({
     *   by: ['city', 'createdAt'],
     *   orderBy: {
     *     createdAt: true
     *   },
     *   _count: {
     *     _all: true
     *   },
     * })
     * 
    **/
    groupBy<
      T extends SessionMedicGroupByArgs,
      HasSelectOrTake extends Or<
        Extends<'skip', Keys<T>>,
        Extends<'take', Keys<T>>
      >,
      OrderByArg extends True extends HasSelectOrTake
        ? { orderBy: SessionMedicGroupByArgs['orderBy'] }
        : { orderBy?: SessionMedicGroupByArgs['orderBy'] },
      OrderFields extends ExcludeUnderscoreKeys<Keys<MaybeTupleToUnion<T['orderBy']>>>,
      ByFields extends TupleToUnion<T['by']>,
      ByValid extends Has<ByFields, OrderFields>,
      HavingFields extends GetHavingFields<T['having']>,
      HavingValid extends Has<ByFields, HavingFields>,
      ByEmpty extends T['by'] extends never[] ? True : False,
      InputErrors extends ByEmpty extends True
      ? `Error: "by" must not be empty.`
      : HavingValid extends False
      ? {
          [P in HavingFields]: P extends ByFields
            ? never
            : P extends string
            ? `Error: Field "${P}" used in "having" needs to be provided in "by".`
            : [
                Error,
                'Field ',
                P,
                ` in "having" needs to be provided in "by"`,
              ]
        }[HavingFields]
      : 'take' extends Keys<T>
      ? 'orderBy' extends Keys<T>
        ? ByValid extends True
          ? {}
          : {
              [P in OrderFields]: P extends ByFields
                ? never
                : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
            }[OrderFields]
        : 'Error: If you provide "take", you also need to provide "orderBy"'
      : 'skip' extends Keys<T>
      ? 'orderBy' extends Keys<T>
        ? ByValid extends True
          ? {}
          : {
              [P in OrderFields]: P extends ByFields
                ? never
                : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
            }[OrderFields]
        : 'Error: If you provide "skip", you also need to provide "orderBy"'
      : ByValid extends True
      ? {}
      : {
          [P in OrderFields]: P extends ByFields
            ? never
            : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
        }[OrderFields]
    >(args: SubsetIntersection<T, SessionMedicGroupByArgs, OrderByArg> & InputErrors): {} extends InputErrors ? GetSessionMedicGroupByPayload<T> : PrismaPromise<InputErrors>
  }

  /**
   * The delegate class that acts as a "Promise-like" for SessionMedic.
   * Why is this prefixed with `Prisma__`?
   * Because we want to prevent naming conflicts as mentioned in
   * https://github.com/prisma/prisma-client-js/issues/707
   */
  export class Prisma__SessionMedicClient<T> implements PrismaPromise<T> {
    [prisma]: true;
    private readonly _dmmf;
    private readonly _fetcher;
    private readonly _queryType;
    private readonly _rootField;
    private readonly _clientMethod;
    private readonly _args;
    private readonly _dataPath;
    private readonly _errorFormat;
    private readonly _measurePerformance?;
    private _isList;
    private _callsite;
    private _requestPromise?;
    constructor(_dmmf: runtime.DMMFClass, _fetcher: PrismaClientFetcher, _queryType: 'query' | 'mutation', _rootField: string, _clientMethod: string, _args: any, _dataPath: string[], _errorFormat: ErrorFormat, _measurePerformance?: boolean | undefined, _isList?: boolean);
    readonly [Symbol.toStringTag]: 'PrismaClientPromise';

    Medic<T extends MedicArgs = {}>(args?: Subset<T, MedicArgs>): CheckSelect<T, Prisma__MedicClient<Medic | null >, Prisma__MedicClient<MedicGetPayload<T> | null >>;

    private get _document();
    /**
     * Attaches callbacks for the resolution and/or rejection of the Promise.
     * @param onfulfilled The callback to execute when the Promise is resolved.
     * @param onrejected The callback to execute when the Promise is rejected.
     * @returns A Promise for the completion of which ever callback is executed.
     */
    then<TResult1 = T, TResult2 = never>(onfulfilled?: ((value: T) => TResult1 | PromiseLike<TResult1>) | undefined | null, onrejected?: ((reason: any) => TResult2 | PromiseLike<TResult2>) | undefined | null): Promise<TResult1 | TResult2>;
    /**
     * Attaches a callback for only the rejection of the Promise.
     * @param onrejected The callback to execute when the Promise is rejected.
     * @returns A Promise for the completion of the callback.
     */
    catch<TResult = never>(onrejected?: ((reason: any) => TResult | PromiseLike<TResult>) | undefined | null): Promise<T | TResult>;
    /**
     * Attaches a callback that is invoked when the Promise is settled (fulfilled or rejected). The
     * resolved value cannot be modified from the callback.
     * @param onfinally The callback to execute when the Promise is settled (fulfilled or rejected).
     * @returns A Promise for the completion of the callback.
     */
    finally(onfinally?: (() => void) | undefined | null): Promise<T>;
  }

  // Custom InputTypes

  /**
   * SessionMedic findUnique
   */
  export type SessionMedicFindUniqueArgs = {
    /**
     * Select specific fields to fetch from the SessionMedic
     * 
    **/
    select?: SessionMedicSelect | null
    /**
     * Choose, which related nodes to fetch as well.
     * 
    **/
    include?: SessionMedicInclude | null
    /**
     * Throw an Error if a SessionMedic can't be found
     * 
    **/
    rejectOnNotFound?: RejectOnNotFound
    /**
     * Filter, which SessionMedic to fetch.
     * 
    **/
    where: SessionMedicWhereUniqueInput
  }


  /**
   * SessionMedic findFirst
   */
  export type SessionMedicFindFirstArgs = {
    /**
     * Select specific fields to fetch from the SessionMedic
     * 
    **/
    select?: SessionMedicSelect | null
    /**
     * Choose, which related nodes to fetch as well.
     * 
    **/
    include?: SessionMedicInclude | null
    /**
     * Throw an Error if a SessionMedic can't be found
     * 
    **/
    rejectOnNotFound?: RejectOnNotFound
    /**
     * Filter, which SessionMedic to fetch.
     * 
    **/
    where?: SessionMedicWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of SessionMedics to fetch.
     * 
    **/
    orderBy?: Enumerable<SessionMedicOrderByWithRelationInput>
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for searching for SessionMedics.
     * 
    **/
    cursor?: SessionMedicWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` SessionMedics from the position of the cursor.
     * 
    **/
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` SessionMedics.
     * 
    **/
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/distinct Distinct Docs}
     * 
     * Filter by unique combinations of SessionMedics.
     * 
    **/
    distinct?: Enumerable<SessionMedicScalarFieldEnum>
  }


  /**
   * SessionMedic findMany
   */
  export type SessionMedicFindManyArgs = {
    /**
     * Select specific fields to fetch from the SessionMedic
     * 
    **/
    select?: SessionMedicSelect | null
    /**
     * Choose, which related nodes to fetch as well.
     * 
    **/
    include?: SessionMedicInclude | null
    /**
     * Filter, which SessionMedics to fetch.
     * 
    **/
    where?: SessionMedicWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of SessionMedics to fetch.
     * 
    **/
    orderBy?: Enumerable<SessionMedicOrderByWithRelationInput>
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for listing SessionMedics.
     * 
    **/
    cursor?: SessionMedicWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` SessionMedics from the position of the cursor.
     * 
    **/
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` SessionMedics.
     * 
    **/
    skip?: number
    distinct?: Enumerable<SessionMedicScalarFieldEnum>
  }


  /**
   * SessionMedic create
   */
  export type SessionMedicCreateArgs = {
    /**
     * Select specific fields to fetch from the SessionMedic
     * 
    **/
    select?: SessionMedicSelect | null
    /**
     * Choose, which related nodes to fetch as well.
     * 
    **/
    include?: SessionMedicInclude | null
    /**
     * The data needed to create a SessionMedic.
     * 
    **/
    data: XOR<SessionMedicCreateInput, SessionMedicUncheckedCreateInput>
  }


  /**
   * SessionMedic createMany
   */
  export type SessionMedicCreateManyArgs = {
    /**
     * The data used to create many SessionMedics.
     * 
    **/
    data: Enumerable<SessionMedicCreateManyInput>
    skipDuplicates?: boolean
  }


  /**
   * SessionMedic update
   */
  export type SessionMedicUpdateArgs = {
    /**
     * Select specific fields to fetch from the SessionMedic
     * 
    **/
    select?: SessionMedicSelect | null
    /**
     * Choose, which related nodes to fetch as well.
     * 
    **/
    include?: SessionMedicInclude | null
    /**
     * The data needed to update a SessionMedic.
     * 
    **/
    data: XOR<SessionMedicUpdateInput, SessionMedicUncheckedUpdateInput>
    /**
     * Choose, which SessionMedic to update.
     * 
    **/
    where: SessionMedicWhereUniqueInput
  }


  /**
   * SessionMedic updateMany
   */
  export type SessionMedicUpdateManyArgs = {
    /**
     * The data used to update SessionMedics.
     * 
    **/
    data: XOR<SessionMedicUpdateManyMutationInput, SessionMedicUncheckedUpdateManyInput>
    /**
     * Filter which SessionMedics to update
     * 
    **/
    where?: SessionMedicWhereInput
  }


  /**
   * SessionMedic upsert
   */
  export type SessionMedicUpsertArgs = {
    /**
     * Select specific fields to fetch from the SessionMedic
     * 
    **/
    select?: SessionMedicSelect | null
    /**
     * Choose, which related nodes to fetch as well.
     * 
    **/
    include?: SessionMedicInclude | null
    /**
     * The filter to search for the SessionMedic to update in case it exists.
     * 
    **/
    where: SessionMedicWhereUniqueInput
    /**
     * In case the SessionMedic found by the `where` argument doesn't exist, create a new SessionMedic with this data.
     * 
    **/
    create: XOR<SessionMedicCreateInput, SessionMedicUncheckedCreateInput>
    /**
     * In case the SessionMedic was found with the provided `where` argument, update it with this data.
     * 
    **/
    update: XOR<SessionMedicUpdateInput, SessionMedicUncheckedUpdateInput>
  }


  /**
   * SessionMedic delete
   */
  export type SessionMedicDeleteArgs = {
    /**
     * Select specific fields to fetch from the SessionMedic
     * 
    **/
    select?: SessionMedicSelect | null
    /**
     * Choose, which related nodes to fetch as well.
     * 
    **/
    include?: SessionMedicInclude | null
    /**
     * Filter which SessionMedic to delete.
     * 
    **/
    where: SessionMedicWhereUniqueInput
  }


  /**
   * SessionMedic deleteMany
   */
  export type SessionMedicDeleteManyArgs = {
    /**
     * Filter which SessionMedics to delete
     * 
    **/
    where?: SessionMedicWhereInput
  }


  /**
   * SessionMedic without action
   */
  export type SessionMedicArgs = {
    /**
     * Select specific fields to fetch from the SessionMedic
     * 
    **/
    select?: SessionMedicSelect | null
    /**
     * Choose, which related nodes to fetch as well.
     * 
    **/
    include?: SessionMedicInclude | null
  }



  /**
   * Enums
   */

  // Based on
  // https://github.com/microsoft/TypeScript/issues/3192#issuecomment-261720275

  export const ClientScalarFieldEnum: {
    id: 'id',
    cpf: 'cpf',
    name: 'name',
    email: 'email',
    password: 'password',
    adress: 'adress',
    phone: 'phone',
    birthday: 'birthday',
    createdAt: 'createdAt',
    updatedAt: 'updatedAt'
  };

  export type ClientScalarFieldEnum = (typeof ClientScalarFieldEnum)[keyof typeof ClientScalarFieldEnum]


  export const SessionScalarFieldEnum: {
    id: 'id',
    clientId: 'clientId',
    token: 'token',
    createdAt: 'createdAt',
    updatedAt: 'updatedAt'
  };

  export type SessionScalarFieldEnum = (typeof SessionScalarFieldEnum)[keyof typeof SessionScalarFieldEnum]


  export const ReceptionistScalarFieldEnum: {
    id: 'id',
    cpf: 'cpf',
    name: 'name',
    email: 'email',
    password: 'password',
    adress: 'adress',
    phone: 'phone',
    birthday: 'birthday',
    createdAt: 'createdAt',
    updatedAt: 'updatedAt'
  };

  export type ReceptionistScalarFieldEnum = (typeof ReceptionistScalarFieldEnum)[keyof typeof ReceptionistScalarFieldEnum]


  export const SessionReceptionistScalarFieldEnum: {
    id: 'id',
    receptionistId: 'receptionistId',
    token: 'token',
    createdAt: 'createdAt',
    updatedAt: 'updatedAt'
  };

  export type SessionReceptionistScalarFieldEnum = (typeof SessionReceptionistScalarFieldEnum)[keyof typeof SessionReceptionistScalarFieldEnum]


  export const MedicScalarFieldEnum: {
    id: 'id',
    cpf: 'cpf',
    name: 'name',
    email: 'email',
    password: 'password',
    adress: 'adress',
    phone: 'phone',
    birthday: 'birthday',
    specialty: 'specialty',
    createdAt: 'createdAt',
    updatedAt: 'updatedAt'
  };

  export type MedicScalarFieldEnum = (typeof MedicScalarFieldEnum)[keyof typeof MedicScalarFieldEnum]


  export const AppointementScalarFieldEnum: {
    id: 'id',
    clientId: 'clientId',
    medicId: 'medicId',
    appointementDate: 'appointementDate',
    createdAt: 'createdAt',
    updatedAt: 'updatedAt'
  };

  export type AppointementScalarFieldEnum = (typeof AppointementScalarFieldEnum)[keyof typeof AppointementScalarFieldEnum]


  export const PrescriptionScalarFieldEnum: {
    id: 'id',
    clientId: 'clientId',
    medicId: 'medicId',
    medications: 'medications',
    description: 'description',
    requestingRenewal: 'requestingRenewal',
    expirationDate: 'expirationDate',
    createdAt: 'createdAt',
    updatedAt: 'updatedAt'
  };

  export type PrescriptionScalarFieldEnum = (typeof PrescriptionScalarFieldEnum)[keyof typeof PrescriptionScalarFieldEnum]


  export const ReportScalarFieldEnum: {
    id: 'id',
    clientId: 'clientId',
    medicId: 'medicId',
    title: 'title',
    text: 'text',
    createdAt: 'createdAt',
    updatedAt: 'updatedAt'
  };

  export type ReportScalarFieldEnum = (typeof ReportScalarFieldEnum)[keyof typeof ReportScalarFieldEnum]


  export const ExamScalarFieldEnum: {
    id: 'id',
    clientId: 'clientId',
    medicId: 'medicId',
    title: 'title',
    text: 'text',
    createdAt: 'createdAt',
    updatedAt: 'updatedAt'
  };

  export type ExamScalarFieldEnum = (typeof ExamScalarFieldEnum)[keyof typeof ExamScalarFieldEnum]


  export const SessionMedicScalarFieldEnum: {
    id: 'id',
    medicId: 'medicId',
    token: 'token',
    createdAt: 'createdAt',
    updatedAt: 'updatedAt'
  };

  export type SessionMedicScalarFieldEnum = (typeof SessionMedicScalarFieldEnum)[keyof typeof SessionMedicScalarFieldEnum]


  export const SortOrder: {
    asc: 'asc',
    desc: 'desc'
  };

  export type SortOrder = (typeof SortOrder)[keyof typeof SortOrder]


  export const JsonNullValueInput: {
    JsonNull: 'JsonNull'
  };

  export type JsonNullValueInput = (typeof JsonNullValueInput)[keyof typeof JsonNullValueInput]


  export const QueryMode: {
    default: 'default',
    insensitive: 'insensitive'
  };

  export type QueryMode = (typeof QueryMode)[keyof typeof QueryMode]


  export const JsonNullValueFilter: {
    DbNull: 'DbNull',
    JsonNull: 'JsonNull',
    AnyNull: 'AnyNull'
  };

  export type JsonNullValueFilter = (typeof JsonNullValueFilter)[keyof typeof JsonNullValueFilter]


  /**
   * Deep Input Types
   */


  export type ClientWhereInput = {
    AND?: Enumerable<ClientWhereInput>
    OR?: Enumerable<ClientWhereInput>
    NOT?: Enumerable<ClientWhereInput>
    id?: IntFilter | number
    cpf?: StringFilter | string
    name?: StringFilter | string
    email?: StringNullableFilter | string | null
    password?: StringFilter | string
    adress?: StringNullableFilter | string | null
    phone?: StringNullableFilter | string | null
    birthday?: DateTimeNullableFilter | Date | string | null
    createdAt?: DateTimeFilter | Date | string
    updatedAt?: DateTimeFilter | Date | string
    Session?: SessionListRelationFilter
    Appointment?: AppointementListRelationFilter
    Pescription?: PrescriptionListRelationFilter
    Report?: ReportListRelationFilter
    Exam?: ExamListRelationFilter
  }

  export type ClientOrderByWithRelationInput = {
    id?: SortOrder
    cpf?: SortOrder
    name?: SortOrder
    email?: SortOrder
    password?: SortOrder
    adress?: SortOrder
    phone?: SortOrder
    birthday?: SortOrder
    createdAt?: SortOrder
    updatedAt?: SortOrder
    Session?: SessionOrderByRelationAggregateInput
    Appointment?: AppointementOrderByRelationAggregateInput
    Pescription?: PrescriptionOrderByRelationAggregateInput
    Report?: ReportOrderByRelationAggregateInput
    Exam?: ExamOrderByRelationAggregateInput
  }

  export type ClientWhereUniqueInput = {
    id?: number
    cpf?: string
    email?: string
  }

  export type ClientOrderByWithAggregationInput = {
    id?: SortOrder
    cpf?: SortOrder
    name?: SortOrder
    email?: SortOrder
    password?: SortOrder
    adress?: SortOrder
    phone?: SortOrder
    birthday?: SortOrder
    createdAt?: SortOrder
    updatedAt?: SortOrder
    _count?: ClientCountOrderByAggregateInput
    _avg?: ClientAvgOrderByAggregateInput
    _max?: ClientMaxOrderByAggregateInput
    _min?: ClientMinOrderByAggregateInput
    _sum?: ClientSumOrderByAggregateInput
  }

  export type ClientScalarWhereWithAggregatesInput = {
    AND?: Enumerable<ClientScalarWhereWithAggregatesInput>
    OR?: Enumerable<ClientScalarWhereWithAggregatesInput>
    NOT?: Enumerable<ClientScalarWhereWithAggregatesInput>
    id?: IntWithAggregatesFilter | number
    cpf?: StringWithAggregatesFilter | string
    name?: StringWithAggregatesFilter | string
    email?: StringNullableWithAggregatesFilter | string | null
    password?: StringWithAggregatesFilter | string
    adress?: StringNullableWithAggregatesFilter | string | null
    phone?: StringNullableWithAggregatesFilter | string | null
    birthday?: DateTimeNullableWithAggregatesFilter | Date | string | null
    createdAt?: DateTimeWithAggregatesFilter | Date | string
    updatedAt?: DateTimeWithAggregatesFilter | Date | string
  }

  export type SessionWhereInput = {
    AND?: Enumerable<SessionWhereInput>
    OR?: Enumerable<SessionWhereInput>
    NOT?: Enumerable<SessionWhereInput>
    id?: IntFilter | number
    clientId?: IntNullableFilter | number | null
    Client?: XOR<ClientRelationFilter, ClientWhereInput> | null
    token?: StringFilter | string
    createdAt?: DateTimeFilter | Date | string
    updatedAt?: DateTimeFilter | Date | string
  }

  export type SessionOrderByWithRelationInput = {
    id?: SortOrder
    clientId?: SortOrder
    Client?: ClientOrderByWithRelationInput
    token?: SortOrder
    createdAt?: SortOrder
    updatedAt?: SortOrder
  }

  export type SessionWhereUniqueInput = {
    id?: number
  }

  export type SessionOrderByWithAggregationInput = {
    id?: SortOrder
    clientId?: SortOrder
    token?: SortOrder
    createdAt?: SortOrder
    updatedAt?: SortOrder
    _count?: SessionCountOrderByAggregateInput
    _avg?: SessionAvgOrderByAggregateInput
    _max?: SessionMaxOrderByAggregateInput
    _min?: SessionMinOrderByAggregateInput
    _sum?: SessionSumOrderByAggregateInput
  }

  export type SessionScalarWhereWithAggregatesInput = {
    AND?: Enumerable<SessionScalarWhereWithAggregatesInput>
    OR?: Enumerable<SessionScalarWhereWithAggregatesInput>
    NOT?: Enumerable<SessionScalarWhereWithAggregatesInput>
    id?: IntWithAggregatesFilter | number
    clientId?: IntNullableWithAggregatesFilter | number | null
    token?: StringWithAggregatesFilter | string
    createdAt?: DateTimeWithAggregatesFilter | Date | string
    updatedAt?: DateTimeWithAggregatesFilter | Date | string
  }

  export type ReceptionistWhereInput = {
    AND?: Enumerable<ReceptionistWhereInput>
    OR?: Enumerable<ReceptionistWhereInput>
    NOT?: Enumerable<ReceptionistWhereInput>
    id?: IntFilter | number
    cpf?: StringFilter | string
    name?: StringFilter | string
    email?: StringNullableFilter | string | null
    password?: StringFilter | string
    adress?: StringNullableFilter | string | null
    phone?: StringNullableFilter | string | null
    birthday?: DateTimeNullableFilter | Date | string | null
    createdAt?: DateTimeFilter | Date | string
    updatedAt?: DateTimeFilter | Date | string
    SessionReceptionist?: SessionReceptionistListRelationFilter
  }

  export type ReceptionistOrderByWithRelationInput = {
    id?: SortOrder
    cpf?: SortOrder
    name?: SortOrder
    email?: SortOrder
    password?: SortOrder
    adress?: SortOrder
    phone?: SortOrder
    birthday?: SortOrder
    createdAt?: SortOrder
    updatedAt?: SortOrder
    SessionReceptionist?: SessionReceptionistOrderByRelationAggregateInput
  }

  export type ReceptionistWhereUniqueInput = {
    id?: number
    cpf?: string
    email?: string
  }

  export type ReceptionistOrderByWithAggregationInput = {
    id?: SortOrder
    cpf?: SortOrder
    name?: SortOrder
    email?: SortOrder
    password?: SortOrder
    adress?: SortOrder
    phone?: SortOrder
    birthday?: SortOrder
    createdAt?: SortOrder
    updatedAt?: SortOrder
    _count?: ReceptionistCountOrderByAggregateInput
    _avg?: ReceptionistAvgOrderByAggregateInput
    _max?: ReceptionistMaxOrderByAggregateInput
    _min?: ReceptionistMinOrderByAggregateInput
    _sum?: ReceptionistSumOrderByAggregateInput
  }

  export type ReceptionistScalarWhereWithAggregatesInput = {
    AND?: Enumerable<ReceptionistScalarWhereWithAggregatesInput>
    OR?: Enumerable<ReceptionistScalarWhereWithAggregatesInput>
    NOT?: Enumerable<ReceptionistScalarWhereWithAggregatesInput>
    id?: IntWithAggregatesFilter | number
    cpf?: StringWithAggregatesFilter | string
    name?: StringWithAggregatesFilter | string
    email?: StringNullableWithAggregatesFilter | string | null
    password?: StringWithAggregatesFilter | string
    adress?: StringNullableWithAggregatesFilter | string | null
    phone?: StringNullableWithAggregatesFilter | string | null
    birthday?: DateTimeNullableWithAggregatesFilter | Date | string | null
    createdAt?: DateTimeWithAggregatesFilter | Date | string
    updatedAt?: DateTimeWithAggregatesFilter | Date | string
  }

  export type SessionReceptionistWhereInput = {
    AND?: Enumerable<SessionReceptionistWhereInput>
    OR?: Enumerable<SessionReceptionistWhereInput>
    NOT?: Enumerable<SessionReceptionistWhereInput>
    id?: IntFilter | number
    receptionistId?: IntNullableFilter | number | null
    Receptionist?: XOR<ReceptionistRelationFilter, ReceptionistWhereInput> | null
    token?: StringFilter | string
    createdAt?: DateTimeFilter | Date | string
    updatedAt?: DateTimeFilter | Date | string
  }

  export type SessionReceptionistOrderByWithRelationInput = {
    id?: SortOrder
    receptionistId?: SortOrder
    Receptionist?: ReceptionistOrderByWithRelationInput
    token?: SortOrder
    createdAt?: SortOrder
    updatedAt?: SortOrder
  }

  export type SessionReceptionistWhereUniqueInput = {
    id?: number
  }

  export type SessionReceptionistOrderByWithAggregationInput = {
    id?: SortOrder
    receptionistId?: SortOrder
    token?: SortOrder
    createdAt?: SortOrder
    updatedAt?: SortOrder
    _count?: SessionReceptionistCountOrderByAggregateInput
    _avg?: SessionReceptionistAvgOrderByAggregateInput
    _max?: SessionReceptionistMaxOrderByAggregateInput
    _min?: SessionReceptionistMinOrderByAggregateInput
    _sum?: SessionReceptionistSumOrderByAggregateInput
  }

  export type SessionReceptionistScalarWhereWithAggregatesInput = {
    AND?: Enumerable<SessionReceptionistScalarWhereWithAggregatesInput>
    OR?: Enumerable<SessionReceptionistScalarWhereWithAggregatesInput>
    NOT?: Enumerable<SessionReceptionistScalarWhereWithAggregatesInput>
    id?: IntWithAggregatesFilter | number
    receptionistId?: IntNullableWithAggregatesFilter | number | null
    token?: StringWithAggregatesFilter | string
    createdAt?: DateTimeWithAggregatesFilter | Date | string
    updatedAt?: DateTimeWithAggregatesFilter | Date | string
  }

  export type MedicWhereInput = {
    AND?: Enumerable<MedicWhereInput>
    OR?: Enumerable<MedicWhereInput>
    NOT?: Enumerable<MedicWhereInput>
    id?: IntFilter | number
    cpf?: StringFilter | string
    name?: StringFilter | string
    email?: StringNullableFilter | string | null
    password?: StringFilter | string
    adress?: StringNullableFilter | string | null
    phone?: StringNullableFilter | string | null
    birthday?: DateTimeNullableFilter | Date | string | null
    specialty?: StringNullableFilter | string | null
    createdAt?: DateTimeFilter | Date | string
    updatedAt?: DateTimeFilter | Date | string
    SessionMedic?: SessionMedicListRelationFilter
    Appointment?: AppointementListRelationFilter
    Pescription?: PrescriptionListRelationFilter
    Report?: ReportListRelationFilter
    Exam?: ExamListRelationFilter
  }

  export type MedicOrderByWithRelationInput = {
    id?: SortOrder
    cpf?: SortOrder
    name?: SortOrder
    email?: SortOrder
    password?: SortOrder
    adress?: SortOrder
    phone?: SortOrder
    birthday?: SortOrder
    specialty?: SortOrder
    createdAt?: SortOrder
    updatedAt?: SortOrder
    SessionMedic?: SessionMedicOrderByRelationAggregateInput
    Appointment?: AppointementOrderByRelationAggregateInput
    Pescription?: PrescriptionOrderByRelationAggregateInput
    Report?: ReportOrderByRelationAggregateInput
    Exam?: ExamOrderByRelationAggregateInput
  }

  export type MedicWhereUniqueInput = {
    id?: number
    cpf?: string
    email?: string
  }

  export type MedicOrderByWithAggregationInput = {
    id?: SortOrder
    cpf?: SortOrder
    name?: SortOrder
    email?: SortOrder
    password?: SortOrder
    adress?: SortOrder
    phone?: SortOrder
    birthday?: SortOrder
    specialty?: SortOrder
    createdAt?: SortOrder
    updatedAt?: SortOrder
    _count?: MedicCountOrderByAggregateInput
    _avg?: MedicAvgOrderByAggregateInput
    _max?: MedicMaxOrderByAggregateInput
    _min?: MedicMinOrderByAggregateInput
    _sum?: MedicSumOrderByAggregateInput
  }

  export type MedicScalarWhereWithAggregatesInput = {
    AND?: Enumerable<MedicScalarWhereWithAggregatesInput>
    OR?: Enumerable<MedicScalarWhereWithAggregatesInput>
    NOT?: Enumerable<MedicScalarWhereWithAggregatesInput>
    id?: IntWithAggregatesFilter | number
    cpf?: StringWithAggregatesFilter | string
    name?: StringWithAggregatesFilter | string
    email?: StringNullableWithAggregatesFilter | string | null
    password?: StringWithAggregatesFilter | string
    adress?: StringNullableWithAggregatesFilter | string | null
    phone?: StringNullableWithAggregatesFilter | string | null
    birthday?: DateTimeNullableWithAggregatesFilter | Date | string | null
    specialty?: StringNullableWithAggregatesFilter | string | null
    createdAt?: DateTimeWithAggregatesFilter | Date | string
    updatedAt?: DateTimeWithAggregatesFilter | Date | string
  }

  export type AppointementWhereInput = {
    AND?: Enumerable<AppointementWhereInput>
    OR?: Enumerable<AppointementWhereInput>
    NOT?: Enumerable<AppointementWhereInput>
    id?: IntFilter | number
    clientId?: IntNullableFilter | number | null
    Client?: XOR<ClientRelationFilter, ClientWhereInput> | null
    medicId?: IntNullableFilter | number | null
    Medic?: XOR<MedicRelationFilter, MedicWhereInput> | null
    appointementDate?: DateTimeFilter | Date | string
    createdAt?: DateTimeFilter | Date | string
    updatedAt?: DateTimeFilter | Date | string
  }

  export type AppointementOrderByWithRelationInput = {
    id?: SortOrder
    clientId?: SortOrder
    Client?: ClientOrderByWithRelationInput
    medicId?: SortOrder
    Medic?: MedicOrderByWithRelationInput
    appointementDate?: SortOrder
    createdAt?: SortOrder
    updatedAt?: SortOrder
  }

  export type AppointementWhereUniqueInput = {
    id?: number
  }

  export type AppointementOrderByWithAggregationInput = {
    id?: SortOrder
    clientId?: SortOrder
    medicId?: SortOrder
    appointementDate?: SortOrder
    createdAt?: SortOrder
    updatedAt?: SortOrder
    _count?: AppointementCountOrderByAggregateInput
    _avg?: AppointementAvgOrderByAggregateInput
    _max?: AppointementMaxOrderByAggregateInput
    _min?: AppointementMinOrderByAggregateInput
    _sum?: AppointementSumOrderByAggregateInput
  }

  export type AppointementScalarWhereWithAggregatesInput = {
    AND?: Enumerable<AppointementScalarWhereWithAggregatesInput>
    OR?: Enumerable<AppointementScalarWhereWithAggregatesInput>
    NOT?: Enumerable<AppointementScalarWhereWithAggregatesInput>
    id?: IntWithAggregatesFilter | number
    clientId?: IntNullableWithAggregatesFilter | number | null
    medicId?: IntNullableWithAggregatesFilter | number | null
    appointementDate?: DateTimeWithAggregatesFilter | Date | string
    createdAt?: DateTimeWithAggregatesFilter | Date | string
    updatedAt?: DateTimeWithAggregatesFilter | Date | string
  }

  export type PrescriptionWhereInput = {
    AND?: Enumerable<PrescriptionWhereInput>
    OR?: Enumerable<PrescriptionWhereInput>
    NOT?: Enumerable<PrescriptionWhereInput>
    id?: IntFilter | number
    clientId?: IntNullableFilter | number | null
    Client?: XOR<ClientRelationFilter, ClientWhereInput> | null
    medicId?: IntNullableFilter | number | null
    Medic?: XOR<MedicRelationFilter, MedicWhereInput> | null
    medications?: JsonFilter
    description?: StringFilter | string
    requestingRenewal?: BoolFilter | boolean
    expirationDate?: DateTimeFilter | Date | string
    createdAt?: DateTimeFilter | Date | string
    updatedAt?: DateTimeFilter | Date | string
  }

  export type PrescriptionOrderByWithRelationInput = {
    id?: SortOrder
    clientId?: SortOrder
    Client?: ClientOrderByWithRelationInput
    medicId?: SortOrder
    Medic?: MedicOrderByWithRelationInput
    medications?: SortOrder
    description?: SortOrder
    requestingRenewal?: SortOrder
    expirationDate?: SortOrder
    createdAt?: SortOrder
    updatedAt?: SortOrder
  }

  export type PrescriptionWhereUniqueInput = {
    id?: number
  }

  export type PrescriptionOrderByWithAggregationInput = {
    id?: SortOrder
    clientId?: SortOrder
    medicId?: SortOrder
    medications?: SortOrder
    description?: SortOrder
    requestingRenewal?: SortOrder
    expirationDate?: SortOrder
    createdAt?: SortOrder
    updatedAt?: SortOrder
    _count?: PrescriptionCountOrderByAggregateInput
    _avg?: PrescriptionAvgOrderByAggregateInput
    _max?: PrescriptionMaxOrderByAggregateInput
    _min?: PrescriptionMinOrderByAggregateInput
    _sum?: PrescriptionSumOrderByAggregateInput
  }

  export type PrescriptionScalarWhereWithAggregatesInput = {
    AND?: Enumerable<PrescriptionScalarWhereWithAggregatesInput>
    OR?: Enumerable<PrescriptionScalarWhereWithAggregatesInput>
    NOT?: Enumerable<PrescriptionScalarWhereWithAggregatesInput>
    id?: IntWithAggregatesFilter | number
    clientId?: IntNullableWithAggregatesFilter | number | null
    medicId?: IntNullableWithAggregatesFilter | number | null
    medications?: JsonWithAggregatesFilter
    description?: StringWithAggregatesFilter | string
    requestingRenewal?: BoolWithAggregatesFilter | boolean
    expirationDate?: DateTimeWithAggregatesFilter | Date | string
    createdAt?: DateTimeWithAggregatesFilter | Date | string
    updatedAt?: DateTimeWithAggregatesFilter | Date | string
  }

  export type ReportWhereInput = {
    AND?: Enumerable<ReportWhereInput>
    OR?: Enumerable<ReportWhereInput>
    NOT?: Enumerable<ReportWhereInput>
    id?: IntFilter | number
    clientId?: IntNullableFilter | number | null
    Client?: XOR<ClientRelationFilter, ClientWhereInput> | null
    medicId?: IntNullableFilter | number | null
    Medic?: XOR<MedicRelationFilter, MedicWhereInput> | null
    title?: StringFilter | string
    text?: StringFilter | string
    createdAt?: DateTimeFilter | Date | string
    updatedAt?: DateTimeFilter | Date | string
  }

  export type ReportOrderByWithRelationInput = {
    id?: SortOrder
    clientId?: SortOrder
    Client?: ClientOrderByWithRelationInput
    medicId?: SortOrder
    Medic?: MedicOrderByWithRelationInput
    title?: SortOrder
    text?: SortOrder
    createdAt?: SortOrder
    updatedAt?: SortOrder
  }

  export type ReportWhereUniqueInput = {
    id?: number
  }

  export type ReportOrderByWithAggregationInput = {
    id?: SortOrder
    clientId?: SortOrder
    medicId?: SortOrder
    title?: SortOrder
    text?: SortOrder
    createdAt?: SortOrder
    updatedAt?: SortOrder
    _count?: ReportCountOrderByAggregateInput
    _avg?: ReportAvgOrderByAggregateInput
    _max?: ReportMaxOrderByAggregateInput
    _min?: ReportMinOrderByAggregateInput
    _sum?: ReportSumOrderByAggregateInput
  }

  export type ReportScalarWhereWithAggregatesInput = {
    AND?: Enumerable<ReportScalarWhereWithAggregatesInput>
    OR?: Enumerable<ReportScalarWhereWithAggregatesInput>
    NOT?: Enumerable<ReportScalarWhereWithAggregatesInput>
    id?: IntWithAggregatesFilter | number
    clientId?: IntNullableWithAggregatesFilter | number | null
    medicId?: IntNullableWithAggregatesFilter | number | null
    title?: StringWithAggregatesFilter | string
    text?: StringWithAggregatesFilter | string
    createdAt?: DateTimeWithAggregatesFilter | Date | string
    updatedAt?: DateTimeWithAggregatesFilter | Date | string
  }

  export type ExamWhereInput = {
    AND?: Enumerable<ExamWhereInput>
    OR?: Enumerable<ExamWhereInput>
    NOT?: Enumerable<ExamWhereInput>
    id?: IntFilter | number
    clientId?: IntNullableFilter | number | null
    Client?: XOR<ClientRelationFilter, ClientWhereInput> | null
    medicId?: IntNullableFilter | number | null
    Medic?: XOR<MedicRelationFilter, MedicWhereInput> | null
    title?: StringFilter | string
    text?: StringFilter | string
    createdAt?: DateTimeFilter | Date | string
    updatedAt?: DateTimeFilter | Date | string
  }

  export type ExamOrderByWithRelationInput = {
    id?: SortOrder
    clientId?: SortOrder
    Client?: ClientOrderByWithRelationInput
    medicId?: SortOrder
    Medic?: MedicOrderByWithRelationInput
    title?: SortOrder
    text?: SortOrder
    createdAt?: SortOrder
    updatedAt?: SortOrder
  }

  export type ExamWhereUniqueInput = {
    id?: number
  }

  export type ExamOrderByWithAggregationInput = {
    id?: SortOrder
    clientId?: SortOrder
    medicId?: SortOrder
    title?: SortOrder
    text?: SortOrder
    createdAt?: SortOrder
    updatedAt?: SortOrder
    _count?: ExamCountOrderByAggregateInput
    _avg?: ExamAvgOrderByAggregateInput
    _max?: ExamMaxOrderByAggregateInput
    _min?: ExamMinOrderByAggregateInput
    _sum?: ExamSumOrderByAggregateInput
  }

  export type ExamScalarWhereWithAggregatesInput = {
    AND?: Enumerable<ExamScalarWhereWithAggregatesInput>
    OR?: Enumerable<ExamScalarWhereWithAggregatesInput>
    NOT?: Enumerable<ExamScalarWhereWithAggregatesInput>
    id?: IntWithAggregatesFilter | number
    clientId?: IntNullableWithAggregatesFilter | number | null
    medicId?: IntNullableWithAggregatesFilter | number | null
    title?: StringWithAggregatesFilter | string
    text?: StringWithAggregatesFilter | string
    createdAt?: DateTimeWithAggregatesFilter | Date | string
    updatedAt?: DateTimeWithAggregatesFilter | Date | string
  }

  export type SessionMedicWhereInput = {
    AND?: Enumerable<SessionMedicWhereInput>
    OR?: Enumerable<SessionMedicWhereInput>
    NOT?: Enumerable<SessionMedicWhereInput>
    id?: IntFilter | number
    medicId?: IntNullableFilter | number | null
    Medic?: XOR<MedicRelationFilter, MedicWhereInput> | null
    token?: StringFilter | string
    createdAt?: DateTimeFilter | Date | string
    updatedAt?: DateTimeFilter | Date | string
  }

  export type SessionMedicOrderByWithRelationInput = {
    id?: SortOrder
    medicId?: SortOrder
    Medic?: MedicOrderByWithRelationInput
    token?: SortOrder
    createdAt?: SortOrder
    updatedAt?: SortOrder
  }

  export type SessionMedicWhereUniqueInput = {
    id?: number
  }

  export type SessionMedicOrderByWithAggregationInput = {
    id?: SortOrder
    medicId?: SortOrder
    token?: SortOrder
    createdAt?: SortOrder
    updatedAt?: SortOrder
    _count?: SessionMedicCountOrderByAggregateInput
    _avg?: SessionMedicAvgOrderByAggregateInput
    _max?: SessionMedicMaxOrderByAggregateInput
    _min?: SessionMedicMinOrderByAggregateInput
    _sum?: SessionMedicSumOrderByAggregateInput
  }

  export type SessionMedicScalarWhereWithAggregatesInput = {
    AND?: Enumerable<SessionMedicScalarWhereWithAggregatesInput>
    OR?: Enumerable<SessionMedicScalarWhereWithAggregatesInput>
    NOT?: Enumerable<SessionMedicScalarWhereWithAggregatesInput>
    id?: IntWithAggregatesFilter | number
    medicId?: IntNullableWithAggregatesFilter | number | null
    token?: StringWithAggregatesFilter | string
    createdAt?: DateTimeWithAggregatesFilter | Date | string
    updatedAt?: DateTimeWithAggregatesFilter | Date | string
  }

  export type ClientCreateInput = {
    cpf: string
    name: string
    email?: string | null
    password: string
    adress?: string | null
    phone?: string | null
    birthday?: Date | string | null
    createdAt?: Date | string
    updatedAt?: Date | string
    Session?: SessionCreateNestedManyWithoutClientInput
    Appointment?: AppointementCreateNestedManyWithoutClientInput
    Pescription?: PrescriptionCreateNestedManyWithoutClientInput
    Report?: ReportCreateNestedManyWithoutClientInput
    Exam?: ExamCreateNestedManyWithoutClientInput
  }

  export type ClientUncheckedCreateInput = {
    id?: number
    cpf: string
    name: string
    email?: string | null
    password: string
    adress?: string | null
    phone?: string | null
    birthday?: Date | string | null
    createdAt?: Date | string
    updatedAt?: Date | string
    Session?: SessionUncheckedCreateNestedManyWithoutClientInput
    Appointment?: AppointementUncheckedCreateNestedManyWithoutClientInput
    Pescription?: PrescriptionUncheckedCreateNestedManyWithoutClientInput
    Report?: ReportUncheckedCreateNestedManyWithoutClientInput
    Exam?: ExamUncheckedCreateNestedManyWithoutClientInput
  }

  export type ClientUpdateInput = {
    cpf?: StringFieldUpdateOperationsInput | string
    name?: StringFieldUpdateOperationsInput | string
    email?: NullableStringFieldUpdateOperationsInput | string | null
    password?: StringFieldUpdateOperationsInput | string
    adress?: NullableStringFieldUpdateOperationsInput | string | null
    phone?: NullableStringFieldUpdateOperationsInput | string | null
    birthday?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
    Session?: SessionUpdateManyWithoutClientInput
    Appointment?: AppointementUpdateManyWithoutClientInput
    Pescription?: PrescriptionUpdateManyWithoutClientInput
    Report?: ReportUpdateManyWithoutClientInput
    Exam?: ExamUpdateManyWithoutClientInput
  }

  export type ClientUncheckedUpdateInput = {
    id?: IntFieldUpdateOperationsInput | number
    cpf?: StringFieldUpdateOperationsInput | string
    name?: StringFieldUpdateOperationsInput | string
    email?: NullableStringFieldUpdateOperationsInput | string | null
    password?: StringFieldUpdateOperationsInput | string
    adress?: NullableStringFieldUpdateOperationsInput | string | null
    phone?: NullableStringFieldUpdateOperationsInput | string | null
    birthday?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
    Session?: SessionUncheckedUpdateManyWithoutClientInput
    Appointment?: AppointementUncheckedUpdateManyWithoutClientInput
    Pescription?: PrescriptionUncheckedUpdateManyWithoutClientInput
    Report?: ReportUncheckedUpdateManyWithoutClientInput
    Exam?: ExamUncheckedUpdateManyWithoutClientInput
  }

  export type ClientCreateManyInput = {
    id?: number
    cpf: string
    name: string
    email?: string | null
    password: string
    adress?: string | null
    phone?: string | null
    birthday?: Date | string | null
    createdAt?: Date | string
    updatedAt?: Date | string
  }

  export type ClientUpdateManyMutationInput = {
    cpf?: StringFieldUpdateOperationsInput | string
    name?: StringFieldUpdateOperationsInput | string
    email?: NullableStringFieldUpdateOperationsInput | string | null
    password?: StringFieldUpdateOperationsInput | string
    adress?: NullableStringFieldUpdateOperationsInput | string | null
    phone?: NullableStringFieldUpdateOperationsInput | string | null
    birthday?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
  }

  export type ClientUncheckedUpdateManyInput = {
    id?: IntFieldUpdateOperationsInput | number
    cpf?: StringFieldUpdateOperationsInput | string
    name?: StringFieldUpdateOperationsInput | string
    email?: NullableStringFieldUpdateOperationsInput | string | null
    password?: StringFieldUpdateOperationsInput | string
    adress?: NullableStringFieldUpdateOperationsInput | string | null
    phone?: NullableStringFieldUpdateOperationsInput | string | null
    birthday?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
  }

  export type SessionCreateInput = {
    Client?: ClientCreateNestedOneWithoutSessionInput
    token: string
    createdAt?: Date | string
    updatedAt?: Date | string
  }

  export type SessionUncheckedCreateInput = {
    id?: number
    clientId?: number | null
    token: string
    createdAt?: Date | string
    updatedAt?: Date | string
  }

  export type SessionUpdateInput = {
    Client?: ClientUpdateOneWithoutSessionInput
    token?: StringFieldUpdateOperationsInput | string
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
  }

  export type SessionUncheckedUpdateInput = {
    id?: IntFieldUpdateOperationsInput | number
    clientId?: NullableIntFieldUpdateOperationsInput | number | null
    token?: StringFieldUpdateOperationsInput | string
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
  }

  export type SessionCreateManyInput = {
    id?: number
    clientId?: number | null
    token: string
    createdAt?: Date | string
    updatedAt?: Date | string
  }

  export type SessionUpdateManyMutationInput = {
    token?: StringFieldUpdateOperationsInput | string
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
  }

  export type SessionUncheckedUpdateManyInput = {
    id?: IntFieldUpdateOperationsInput | number
    clientId?: NullableIntFieldUpdateOperationsInput | number | null
    token?: StringFieldUpdateOperationsInput | string
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
  }

  export type ReceptionistCreateInput = {
    cpf: string
    name: string
    email?: string | null
    password: string
    adress?: string | null
    phone?: string | null
    birthday?: Date | string | null
    createdAt?: Date | string
    updatedAt?: Date | string
    SessionReceptionist?: SessionReceptionistCreateNestedManyWithoutReceptionistInput
  }

  export type ReceptionistUncheckedCreateInput = {
    id?: number
    cpf: string
    name: string
    email?: string | null
    password: string
    adress?: string | null
    phone?: string | null
    birthday?: Date | string | null
    createdAt?: Date | string
    updatedAt?: Date | string
    SessionReceptionist?: SessionReceptionistUncheckedCreateNestedManyWithoutReceptionistInput
  }

  export type ReceptionistUpdateInput = {
    cpf?: StringFieldUpdateOperationsInput | string
    name?: StringFieldUpdateOperationsInput | string
    email?: NullableStringFieldUpdateOperationsInput | string | null
    password?: StringFieldUpdateOperationsInput | string
    adress?: NullableStringFieldUpdateOperationsInput | string | null
    phone?: NullableStringFieldUpdateOperationsInput | string | null
    birthday?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
    SessionReceptionist?: SessionReceptionistUpdateManyWithoutReceptionistInput
  }

  export type ReceptionistUncheckedUpdateInput = {
    id?: IntFieldUpdateOperationsInput | number
    cpf?: StringFieldUpdateOperationsInput | string
    name?: StringFieldUpdateOperationsInput | string
    email?: NullableStringFieldUpdateOperationsInput | string | null
    password?: StringFieldUpdateOperationsInput | string
    adress?: NullableStringFieldUpdateOperationsInput | string | null
    phone?: NullableStringFieldUpdateOperationsInput | string | null
    birthday?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
    SessionReceptionist?: SessionReceptionistUncheckedUpdateManyWithoutReceptionistInput
  }

  export type ReceptionistCreateManyInput = {
    id?: number
    cpf: string
    name: string
    email?: string | null
    password: string
    adress?: string | null
    phone?: string | null
    birthday?: Date | string | null
    createdAt?: Date | string
    updatedAt?: Date | string
  }

  export type ReceptionistUpdateManyMutationInput = {
    cpf?: StringFieldUpdateOperationsInput | string
    name?: StringFieldUpdateOperationsInput | string
    email?: NullableStringFieldUpdateOperationsInput | string | null
    password?: StringFieldUpdateOperationsInput | string
    adress?: NullableStringFieldUpdateOperationsInput | string | null
    phone?: NullableStringFieldUpdateOperationsInput | string | null
    birthday?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
  }

  export type ReceptionistUncheckedUpdateManyInput = {
    id?: IntFieldUpdateOperationsInput | number
    cpf?: StringFieldUpdateOperationsInput | string
    name?: StringFieldUpdateOperationsInput | string
    email?: NullableStringFieldUpdateOperationsInput | string | null
    password?: StringFieldUpdateOperationsInput | string
    adress?: NullableStringFieldUpdateOperationsInput | string | null
    phone?: NullableStringFieldUpdateOperationsInput | string | null
    birthday?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
  }

  export type SessionReceptionistCreateInput = {
    Receptionist?: ReceptionistCreateNestedOneWithoutSessionReceptionistInput
    token: string
    createdAt?: Date | string
    updatedAt?: Date | string
  }

  export type SessionReceptionistUncheckedCreateInput = {
    id?: number
    receptionistId?: number | null
    token: string
    createdAt?: Date | string
    updatedAt?: Date | string
  }

  export type SessionReceptionistUpdateInput = {
    Receptionist?: ReceptionistUpdateOneWithoutSessionReceptionistInput
    token?: StringFieldUpdateOperationsInput | string
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
  }

  export type SessionReceptionistUncheckedUpdateInput = {
    id?: IntFieldUpdateOperationsInput | number
    receptionistId?: NullableIntFieldUpdateOperationsInput | number | null
    token?: StringFieldUpdateOperationsInput | string
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
  }

  export type SessionReceptionistCreateManyInput = {
    id?: number
    receptionistId?: number | null
    token: string
    createdAt?: Date | string
    updatedAt?: Date | string
  }

  export type SessionReceptionistUpdateManyMutationInput = {
    token?: StringFieldUpdateOperationsInput | string
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
  }

  export type SessionReceptionistUncheckedUpdateManyInput = {
    id?: IntFieldUpdateOperationsInput | number
    receptionistId?: NullableIntFieldUpdateOperationsInput | number | null
    token?: StringFieldUpdateOperationsInput | string
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
  }

  export type MedicCreateInput = {
    cpf: string
    name: string
    email?: string | null
    password: string
    adress?: string | null
    phone?: string | null
    birthday?: Date | string | null
    specialty?: string | null
    createdAt?: Date | string
    updatedAt?: Date | string
    SessionMedic?: SessionMedicCreateNestedManyWithoutMedicInput
    Appointment?: AppointementCreateNestedManyWithoutMedicInput
    Pescription?: PrescriptionCreateNestedManyWithoutMedicInput
    Report?: ReportCreateNestedManyWithoutMedicInput
    Exam?: ExamCreateNestedManyWithoutMedicInput
  }

  export type MedicUncheckedCreateInput = {
    id?: number
    cpf: string
    name: string
    email?: string | null
    password: string
    adress?: string | null
    phone?: string | null
    birthday?: Date | string | null
    specialty?: string | null
    createdAt?: Date | string
    updatedAt?: Date | string
    SessionMedic?: SessionMedicUncheckedCreateNestedManyWithoutMedicInput
    Appointment?: AppointementUncheckedCreateNestedManyWithoutMedicInput
    Pescription?: PrescriptionUncheckedCreateNestedManyWithoutMedicInput
    Report?: ReportUncheckedCreateNestedManyWithoutMedicInput
    Exam?: ExamUncheckedCreateNestedManyWithoutMedicInput
  }

  export type MedicUpdateInput = {
    cpf?: StringFieldUpdateOperationsInput | string
    name?: StringFieldUpdateOperationsInput | string
    email?: NullableStringFieldUpdateOperationsInput | string | null
    password?: StringFieldUpdateOperationsInput | string
    adress?: NullableStringFieldUpdateOperationsInput | string | null
    phone?: NullableStringFieldUpdateOperationsInput | string | null
    birthday?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    specialty?: NullableStringFieldUpdateOperationsInput | string | null
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
    SessionMedic?: SessionMedicUpdateManyWithoutMedicInput
    Appointment?: AppointementUpdateManyWithoutMedicInput
    Pescription?: PrescriptionUpdateManyWithoutMedicInput
    Report?: ReportUpdateManyWithoutMedicInput
    Exam?: ExamUpdateManyWithoutMedicInput
  }

  export type MedicUncheckedUpdateInput = {
    id?: IntFieldUpdateOperationsInput | number
    cpf?: StringFieldUpdateOperationsInput | string
    name?: StringFieldUpdateOperationsInput | string
    email?: NullableStringFieldUpdateOperationsInput | string | null
    password?: StringFieldUpdateOperationsInput | string
    adress?: NullableStringFieldUpdateOperationsInput | string | null
    phone?: NullableStringFieldUpdateOperationsInput | string | null
    birthday?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    specialty?: NullableStringFieldUpdateOperationsInput | string | null
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
    SessionMedic?: SessionMedicUncheckedUpdateManyWithoutMedicInput
    Appointment?: AppointementUncheckedUpdateManyWithoutMedicInput
    Pescription?: PrescriptionUncheckedUpdateManyWithoutMedicInput
    Report?: ReportUncheckedUpdateManyWithoutMedicInput
    Exam?: ExamUncheckedUpdateManyWithoutMedicInput
  }

  export type MedicCreateManyInput = {
    id?: number
    cpf: string
    name: string
    email?: string | null
    password: string
    adress?: string | null
    phone?: string | null
    birthday?: Date | string | null
    specialty?: string | null
    createdAt?: Date | string
    updatedAt?: Date | string
  }

  export type MedicUpdateManyMutationInput = {
    cpf?: StringFieldUpdateOperationsInput | string
    name?: StringFieldUpdateOperationsInput | string
    email?: NullableStringFieldUpdateOperationsInput | string | null
    password?: StringFieldUpdateOperationsInput | string
    adress?: NullableStringFieldUpdateOperationsInput | string | null
    phone?: NullableStringFieldUpdateOperationsInput | string | null
    birthday?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    specialty?: NullableStringFieldUpdateOperationsInput | string | null
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
  }

  export type MedicUncheckedUpdateManyInput = {
    id?: IntFieldUpdateOperationsInput | number
    cpf?: StringFieldUpdateOperationsInput | string
    name?: StringFieldUpdateOperationsInput | string
    email?: NullableStringFieldUpdateOperationsInput | string | null
    password?: StringFieldUpdateOperationsInput | string
    adress?: NullableStringFieldUpdateOperationsInput | string | null
    phone?: NullableStringFieldUpdateOperationsInput | string | null
    birthday?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    specialty?: NullableStringFieldUpdateOperationsInput | string | null
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
  }

  export type AppointementCreateInput = {
    Client?: ClientCreateNestedOneWithoutAppointmentInput
    Medic?: MedicCreateNestedOneWithoutAppointmentInput
    appointementDate: Date | string
    createdAt?: Date | string
    updatedAt?: Date | string
  }

  export type AppointementUncheckedCreateInput = {
    id?: number
    clientId?: number | null
    medicId?: number | null
    appointementDate: Date | string
    createdAt?: Date | string
    updatedAt?: Date | string
  }

  export type AppointementUpdateInput = {
    Client?: ClientUpdateOneWithoutAppointmentInput
    Medic?: MedicUpdateOneWithoutAppointmentInput
    appointementDate?: DateTimeFieldUpdateOperationsInput | Date | string
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
  }

  export type AppointementUncheckedUpdateInput = {
    id?: IntFieldUpdateOperationsInput | number
    clientId?: NullableIntFieldUpdateOperationsInput | number | null
    medicId?: NullableIntFieldUpdateOperationsInput | number | null
    appointementDate?: DateTimeFieldUpdateOperationsInput | Date | string
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
  }

  export type AppointementCreateManyInput = {
    id?: number
    clientId?: number | null
    medicId?: number | null
    appointementDate: Date | string
    createdAt?: Date | string
    updatedAt?: Date | string
  }

  export type AppointementUpdateManyMutationInput = {
    appointementDate?: DateTimeFieldUpdateOperationsInput | Date | string
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
  }

  export type AppointementUncheckedUpdateManyInput = {
    id?: IntFieldUpdateOperationsInput | number
    clientId?: NullableIntFieldUpdateOperationsInput | number | null
    medicId?: NullableIntFieldUpdateOperationsInput | number | null
    appointementDate?: DateTimeFieldUpdateOperationsInput | Date | string
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
  }

  export type PrescriptionCreateInput = {
    Client?: ClientCreateNestedOneWithoutPescriptionInput
    Medic?: MedicCreateNestedOneWithoutPescriptionInput
    medications: JsonNullValueInput | InputJsonValue
    description: string
    requestingRenewal: boolean
    expirationDate: Date | string
    createdAt?: Date | string
    updatedAt?: Date | string
  }

  export type PrescriptionUncheckedCreateInput = {
    id?: number
    clientId?: number | null
    medicId?: number | null
    medications: JsonNullValueInput | InputJsonValue
    description: string
    requestingRenewal: boolean
    expirationDate: Date | string
    createdAt?: Date | string
    updatedAt?: Date | string
  }

  export type PrescriptionUpdateInput = {
    Client?: ClientUpdateOneWithoutPescriptionInput
    Medic?: MedicUpdateOneWithoutPescriptionInput
    medications?: JsonNullValueInput | InputJsonValue
    description?: StringFieldUpdateOperationsInput | string
    requestingRenewal?: BoolFieldUpdateOperationsInput | boolean
    expirationDate?: DateTimeFieldUpdateOperationsInput | Date | string
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
  }

  export type PrescriptionUncheckedUpdateInput = {
    id?: IntFieldUpdateOperationsInput | number
    clientId?: NullableIntFieldUpdateOperationsInput | number | null
    medicId?: NullableIntFieldUpdateOperationsInput | number | null
    medications?: JsonNullValueInput | InputJsonValue
    description?: StringFieldUpdateOperationsInput | string
    requestingRenewal?: BoolFieldUpdateOperationsInput | boolean
    expirationDate?: DateTimeFieldUpdateOperationsInput | Date | string
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
  }

  export type PrescriptionCreateManyInput = {
    id?: number
    clientId?: number | null
    medicId?: number | null
    medications: JsonNullValueInput | InputJsonValue
    description: string
    requestingRenewal: boolean
    expirationDate: Date | string
    createdAt?: Date | string
    updatedAt?: Date | string
  }

  export type PrescriptionUpdateManyMutationInput = {
    medications?: JsonNullValueInput | InputJsonValue
    description?: StringFieldUpdateOperationsInput | string
    requestingRenewal?: BoolFieldUpdateOperationsInput | boolean
    expirationDate?: DateTimeFieldUpdateOperationsInput | Date | string
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
  }

  export type PrescriptionUncheckedUpdateManyInput = {
    id?: IntFieldUpdateOperationsInput | number
    clientId?: NullableIntFieldUpdateOperationsInput | number | null
    medicId?: NullableIntFieldUpdateOperationsInput | number | null
    medications?: JsonNullValueInput | InputJsonValue
    description?: StringFieldUpdateOperationsInput | string
    requestingRenewal?: BoolFieldUpdateOperationsInput | boolean
    expirationDate?: DateTimeFieldUpdateOperationsInput | Date | string
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
  }

  export type ReportCreateInput = {
    Client?: ClientCreateNestedOneWithoutReportInput
    Medic?: MedicCreateNestedOneWithoutReportInput
    title: string
    text: string
    createdAt?: Date | string
    updatedAt?: Date | string
  }

  export type ReportUncheckedCreateInput = {
    id?: number
    clientId?: number | null
    medicId?: number | null
    title: string
    text: string
    createdAt?: Date | string
    updatedAt?: Date | string
  }

  export type ReportUpdateInput = {
    Client?: ClientUpdateOneWithoutReportInput
    Medic?: MedicUpdateOneWithoutReportInput
    title?: StringFieldUpdateOperationsInput | string
    text?: StringFieldUpdateOperationsInput | string
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
  }

  export type ReportUncheckedUpdateInput = {
    id?: IntFieldUpdateOperationsInput | number
    clientId?: NullableIntFieldUpdateOperationsInput | number | null
    medicId?: NullableIntFieldUpdateOperationsInput | number | null
    title?: StringFieldUpdateOperationsInput | string
    text?: StringFieldUpdateOperationsInput | string
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
  }

  export type ReportCreateManyInput = {
    id?: number
    clientId?: number | null
    medicId?: number | null
    title: string
    text: string
    createdAt?: Date | string
    updatedAt?: Date | string
  }

  export type ReportUpdateManyMutationInput = {
    title?: StringFieldUpdateOperationsInput | string
    text?: StringFieldUpdateOperationsInput | string
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
  }

  export type ReportUncheckedUpdateManyInput = {
    id?: IntFieldUpdateOperationsInput | number
    clientId?: NullableIntFieldUpdateOperationsInput | number | null
    medicId?: NullableIntFieldUpdateOperationsInput | number | null
    title?: StringFieldUpdateOperationsInput | string
    text?: StringFieldUpdateOperationsInput | string
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
  }

  export type ExamCreateInput = {
    Client?: ClientCreateNestedOneWithoutExamInput
    Medic?: MedicCreateNestedOneWithoutExamInput
    title: string
    text: string
    createdAt?: Date | string
    updatedAt?: Date | string
  }

  export type ExamUncheckedCreateInput = {
    id?: number
    clientId?: number | null
    medicId?: number | null
    title: string
    text: string
    createdAt?: Date | string
    updatedAt?: Date | string
  }

  export type ExamUpdateInput = {
    Client?: ClientUpdateOneWithoutExamInput
    Medic?: MedicUpdateOneWithoutExamInput
    title?: StringFieldUpdateOperationsInput | string
    text?: StringFieldUpdateOperationsInput | string
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
  }

  export type ExamUncheckedUpdateInput = {
    id?: IntFieldUpdateOperationsInput | number
    clientId?: NullableIntFieldUpdateOperationsInput | number | null
    medicId?: NullableIntFieldUpdateOperationsInput | number | null
    title?: StringFieldUpdateOperationsInput | string
    text?: StringFieldUpdateOperationsInput | string
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
  }

  export type ExamCreateManyInput = {
    id?: number
    clientId?: number | null
    medicId?: number | null
    title: string
    text: string
    createdAt?: Date | string
    updatedAt?: Date | string
  }

  export type ExamUpdateManyMutationInput = {
    title?: StringFieldUpdateOperationsInput | string
    text?: StringFieldUpdateOperationsInput | string
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
  }

  export type ExamUncheckedUpdateManyInput = {
    id?: IntFieldUpdateOperationsInput | number
    clientId?: NullableIntFieldUpdateOperationsInput | number | null
    medicId?: NullableIntFieldUpdateOperationsInput | number | null
    title?: StringFieldUpdateOperationsInput | string
    text?: StringFieldUpdateOperationsInput | string
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
  }

  export type SessionMedicCreateInput = {
    Medic?: MedicCreateNestedOneWithoutSessionMedicInput
    token: string
    createdAt?: Date | string
    updatedAt?: Date | string
  }

  export type SessionMedicUncheckedCreateInput = {
    id?: number
    medicId?: number | null
    token: string
    createdAt?: Date | string
    updatedAt?: Date | string
  }

  export type SessionMedicUpdateInput = {
    Medic?: MedicUpdateOneWithoutSessionMedicInput
    token?: StringFieldUpdateOperationsInput | string
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
  }

  export type SessionMedicUncheckedUpdateInput = {
    id?: IntFieldUpdateOperationsInput | number
    medicId?: NullableIntFieldUpdateOperationsInput | number | null
    token?: StringFieldUpdateOperationsInput | string
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
  }

  export type SessionMedicCreateManyInput = {
    id?: number
    medicId?: number | null
    token: string
    createdAt?: Date | string
    updatedAt?: Date | string
  }

  export type SessionMedicUpdateManyMutationInput = {
    token?: StringFieldUpdateOperationsInput | string
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
  }

  export type SessionMedicUncheckedUpdateManyInput = {
    id?: IntFieldUpdateOperationsInput | number
    medicId?: NullableIntFieldUpdateOperationsInput | number | null
    token?: StringFieldUpdateOperationsInput | string
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
  }

  export type IntFilter = {
    equals?: number
    in?: Enumerable<number>
    notIn?: Enumerable<number>
    lt?: number
    lte?: number
    gt?: number
    gte?: number
    not?: NestedIntFilter | number
  }

  export type StringFilter = {
    equals?: string
    in?: Enumerable<string>
    notIn?: Enumerable<string>
    lt?: string
    lte?: string
    gt?: string
    gte?: string
    contains?: string
    startsWith?: string
    endsWith?: string
    mode?: QueryMode
    not?: NestedStringFilter | string
  }

  export type StringNullableFilter = {
    equals?: string | null
    in?: Enumerable<string> | null
    notIn?: Enumerable<string> | null
    lt?: string
    lte?: string
    gt?: string
    gte?: string
    contains?: string
    startsWith?: string
    endsWith?: string
    mode?: QueryMode
    not?: NestedStringNullableFilter | string | null
  }

  export type DateTimeNullableFilter = {
    equals?: Date | string | null
    in?: Enumerable<Date> | Enumerable<string> | null
    notIn?: Enumerable<Date> | Enumerable<string> | null
    lt?: Date | string
    lte?: Date | string
    gt?: Date | string
    gte?: Date | string
    not?: NestedDateTimeNullableFilter | Date | string | null
  }

  export type DateTimeFilter = {
    equals?: Date | string
    in?: Enumerable<Date> | Enumerable<string>
    notIn?: Enumerable<Date> | Enumerable<string>
    lt?: Date | string
    lte?: Date | string
    gt?: Date | string
    gte?: Date | string
    not?: NestedDateTimeFilter | Date | string
  }

  export type SessionListRelationFilter = {
    every?: SessionWhereInput
    some?: SessionWhereInput
    none?: SessionWhereInput
  }

  export type AppointementListRelationFilter = {
    every?: AppointementWhereInput
    some?: AppointementWhereInput
    none?: AppointementWhereInput
  }

  export type PrescriptionListRelationFilter = {
    every?: PrescriptionWhereInput
    some?: PrescriptionWhereInput
    none?: PrescriptionWhereInput
  }

  export type ReportListRelationFilter = {
    every?: ReportWhereInput
    some?: ReportWhereInput
    none?: ReportWhereInput
  }

  export type ExamListRelationFilter = {
    every?: ExamWhereInput
    some?: ExamWhereInput
    none?: ExamWhereInput
  }

  export type SessionOrderByRelationAggregateInput = {
    _count?: SortOrder
  }

  export type AppointementOrderByRelationAggregateInput = {
    _count?: SortOrder
  }

  export type PrescriptionOrderByRelationAggregateInput = {
    _count?: SortOrder
  }

  export type ReportOrderByRelationAggregateInput = {
    _count?: SortOrder
  }

  export type ExamOrderByRelationAggregateInput = {
    _count?: SortOrder
  }

  export type ClientCountOrderByAggregateInput = {
    id?: SortOrder
    cpf?: SortOrder
    name?: SortOrder
    email?: SortOrder
    password?: SortOrder
    adress?: SortOrder
    phone?: SortOrder
    birthday?: SortOrder
    createdAt?: SortOrder
    updatedAt?: SortOrder
  }

  export type ClientAvgOrderByAggregateInput = {
    id?: SortOrder
  }

  export type ClientMaxOrderByAggregateInput = {
    id?: SortOrder
    cpf?: SortOrder
    name?: SortOrder
    email?: SortOrder
    password?: SortOrder
    adress?: SortOrder
    phone?: SortOrder
    birthday?: SortOrder
    createdAt?: SortOrder
    updatedAt?: SortOrder
  }

  export type ClientMinOrderByAggregateInput = {
    id?: SortOrder
    cpf?: SortOrder
    name?: SortOrder
    email?: SortOrder
    password?: SortOrder
    adress?: SortOrder
    phone?: SortOrder
    birthday?: SortOrder
    createdAt?: SortOrder
    updatedAt?: SortOrder
  }

  export type ClientSumOrderByAggregateInput = {
    id?: SortOrder
  }

  export type IntWithAggregatesFilter = {
    equals?: number
    in?: Enumerable<number>
    notIn?: Enumerable<number>
    lt?: number
    lte?: number
    gt?: number
    gte?: number
    not?: NestedIntWithAggregatesFilter | number
    _count?: NestedIntFilter
    _avg?: NestedFloatFilter
    _sum?: NestedIntFilter
    _min?: NestedIntFilter
    _max?: NestedIntFilter
  }

  export type StringWithAggregatesFilter = {
    equals?: string
    in?: Enumerable<string>
    notIn?: Enumerable<string>
    lt?: string
    lte?: string
    gt?: string
    gte?: string
    contains?: string
    startsWith?: string
    endsWith?: string
    mode?: QueryMode
    not?: NestedStringWithAggregatesFilter | string
    _count?: NestedIntFilter
    _min?: NestedStringFilter
    _max?: NestedStringFilter
  }

  export type StringNullableWithAggregatesFilter = {
    equals?: string | null
    in?: Enumerable<string> | null
    notIn?: Enumerable<string> | null
    lt?: string
    lte?: string
    gt?: string
    gte?: string
    contains?: string
    startsWith?: string
    endsWith?: string
    mode?: QueryMode
    not?: NestedStringNullableWithAggregatesFilter | string | null
    _count?: NestedIntNullableFilter
    _min?: NestedStringNullableFilter
    _max?: NestedStringNullableFilter
  }

  export type DateTimeNullableWithAggregatesFilter = {
    equals?: Date | string | null
    in?: Enumerable<Date> | Enumerable<string> | null
    notIn?: Enumerable<Date> | Enumerable<string> | null
    lt?: Date | string
    lte?: Date | string
    gt?: Date | string
    gte?: Date | string
    not?: NestedDateTimeNullableWithAggregatesFilter | Date | string | null
    _count?: NestedIntNullableFilter
    _min?: NestedDateTimeNullableFilter
    _max?: NestedDateTimeNullableFilter
  }

  export type DateTimeWithAggregatesFilter = {
    equals?: Date | string
    in?: Enumerable<Date> | Enumerable<string>
    notIn?: Enumerable<Date> | Enumerable<string>
    lt?: Date | string
    lte?: Date | string
    gt?: Date | string
    gte?: Date | string
    not?: NestedDateTimeWithAggregatesFilter | Date | string
    _count?: NestedIntFilter
    _min?: NestedDateTimeFilter
    _max?: NestedDateTimeFilter
  }

  export type IntNullableFilter = {
    equals?: number | null
    in?: Enumerable<number> | null
    notIn?: Enumerable<number> | null
    lt?: number
    lte?: number
    gt?: number
    gte?: number
    not?: NestedIntNullableFilter | number | null
  }

  export type ClientRelationFilter = {
    is?: ClientWhereInput | null
    isNot?: ClientWhereInput | null
  }

  export type SessionCountOrderByAggregateInput = {
    id?: SortOrder
    clientId?: SortOrder
    token?: SortOrder
    createdAt?: SortOrder
    updatedAt?: SortOrder
  }

  export type SessionAvgOrderByAggregateInput = {
    id?: SortOrder
    clientId?: SortOrder
  }

  export type SessionMaxOrderByAggregateInput = {
    id?: SortOrder
    clientId?: SortOrder
    token?: SortOrder
    createdAt?: SortOrder
    updatedAt?: SortOrder
  }

  export type SessionMinOrderByAggregateInput = {
    id?: SortOrder
    clientId?: SortOrder
    token?: SortOrder
    createdAt?: SortOrder
    updatedAt?: SortOrder
  }

  export type SessionSumOrderByAggregateInput = {
    id?: SortOrder
    clientId?: SortOrder
  }

  export type IntNullableWithAggregatesFilter = {
    equals?: number | null
    in?: Enumerable<number> | null
    notIn?: Enumerable<number> | null
    lt?: number
    lte?: number
    gt?: number
    gte?: number
    not?: NestedIntNullableWithAggregatesFilter | number | null
    _count?: NestedIntNullableFilter
    _avg?: NestedFloatNullableFilter
    _sum?: NestedIntNullableFilter
    _min?: NestedIntNullableFilter
    _max?: NestedIntNullableFilter
  }

  export type SessionReceptionistListRelationFilter = {
    every?: SessionReceptionistWhereInput
    some?: SessionReceptionistWhereInput
    none?: SessionReceptionistWhereInput
  }

  export type SessionReceptionistOrderByRelationAggregateInput = {
    _count?: SortOrder
  }

  export type ReceptionistCountOrderByAggregateInput = {
    id?: SortOrder
    cpf?: SortOrder
    name?: SortOrder
    email?: SortOrder
    password?: SortOrder
    adress?: SortOrder
    phone?: SortOrder
    birthday?: SortOrder
    createdAt?: SortOrder
    updatedAt?: SortOrder
  }

  export type ReceptionistAvgOrderByAggregateInput = {
    id?: SortOrder
  }

  export type ReceptionistMaxOrderByAggregateInput = {
    id?: SortOrder
    cpf?: SortOrder
    name?: SortOrder
    email?: SortOrder
    password?: SortOrder
    adress?: SortOrder
    phone?: SortOrder
    birthday?: SortOrder
    createdAt?: SortOrder
    updatedAt?: SortOrder
  }

  export type ReceptionistMinOrderByAggregateInput = {
    id?: SortOrder
    cpf?: SortOrder
    name?: SortOrder
    email?: SortOrder
    password?: SortOrder
    adress?: SortOrder
    phone?: SortOrder
    birthday?: SortOrder
    createdAt?: SortOrder
    updatedAt?: SortOrder
  }

  export type ReceptionistSumOrderByAggregateInput = {
    id?: SortOrder
  }

  export type ReceptionistRelationFilter = {
    is?: ReceptionistWhereInput | null
    isNot?: ReceptionistWhereInput | null
  }

  export type SessionReceptionistCountOrderByAggregateInput = {
    id?: SortOrder
    receptionistId?: SortOrder
    token?: SortOrder
    createdAt?: SortOrder
    updatedAt?: SortOrder
  }

  export type SessionReceptionistAvgOrderByAggregateInput = {
    id?: SortOrder
    receptionistId?: SortOrder
  }

  export type SessionReceptionistMaxOrderByAggregateInput = {
    id?: SortOrder
    receptionistId?: SortOrder
    token?: SortOrder
    createdAt?: SortOrder
    updatedAt?: SortOrder
  }

  export type SessionReceptionistMinOrderByAggregateInput = {
    id?: SortOrder
    receptionistId?: SortOrder
    token?: SortOrder
    createdAt?: SortOrder
    updatedAt?: SortOrder
  }

  export type SessionReceptionistSumOrderByAggregateInput = {
    id?: SortOrder
    receptionistId?: SortOrder
  }

  export type SessionMedicListRelationFilter = {
    every?: SessionMedicWhereInput
    some?: SessionMedicWhereInput
    none?: SessionMedicWhereInput
  }

  export type SessionMedicOrderByRelationAggregateInput = {
    _count?: SortOrder
  }

  export type MedicCountOrderByAggregateInput = {
    id?: SortOrder
    cpf?: SortOrder
    name?: SortOrder
    email?: SortOrder
    password?: SortOrder
    adress?: SortOrder
    phone?: SortOrder
    birthday?: SortOrder
    specialty?: SortOrder
    createdAt?: SortOrder
    updatedAt?: SortOrder
  }

  export type MedicAvgOrderByAggregateInput = {
    id?: SortOrder
  }

  export type MedicMaxOrderByAggregateInput = {
    id?: SortOrder
    cpf?: SortOrder
    name?: SortOrder
    email?: SortOrder
    password?: SortOrder
    adress?: SortOrder
    phone?: SortOrder
    birthday?: SortOrder
    specialty?: SortOrder
    createdAt?: SortOrder
    updatedAt?: SortOrder
  }

  export type MedicMinOrderByAggregateInput = {
    id?: SortOrder
    cpf?: SortOrder
    name?: SortOrder
    email?: SortOrder
    password?: SortOrder
    adress?: SortOrder
    phone?: SortOrder
    birthday?: SortOrder
    specialty?: SortOrder
    createdAt?: SortOrder
    updatedAt?: SortOrder
  }

  export type MedicSumOrderByAggregateInput = {
    id?: SortOrder
  }

  export type MedicRelationFilter = {
    is?: MedicWhereInput | null
    isNot?: MedicWhereInput | null
  }

  export type AppointementCountOrderByAggregateInput = {
    id?: SortOrder
    clientId?: SortOrder
    medicId?: SortOrder
    appointementDate?: SortOrder
    createdAt?: SortOrder
    updatedAt?: SortOrder
  }

  export type AppointementAvgOrderByAggregateInput = {
    id?: SortOrder
    clientId?: SortOrder
    medicId?: SortOrder
  }

  export type AppointementMaxOrderByAggregateInput = {
    id?: SortOrder
    clientId?: SortOrder
    medicId?: SortOrder
    appointementDate?: SortOrder
    createdAt?: SortOrder
    updatedAt?: SortOrder
  }

  export type AppointementMinOrderByAggregateInput = {
    id?: SortOrder
    clientId?: SortOrder
    medicId?: SortOrder
    appointementDate?: SortOrder
    createdAt?: SortOrder
    updatedAt?: SortOrder
  }

  export type AppointementSumOrderByAggregateInput = {
    id?: SortOrder
    clientId?: SortOrder
    medicId?: SortOrder
  }
  export type JsonFilter = 
    | PatchUndefined<
        Either<Required<JsonFilterBase>, Exclude<keyof Required<JsonFilterBase>, 'path'>>,
        Required<JsonFilterBase>
      >
    | OptionalFlat<Omit<Required<JsonFilterBase>, 'path'>>

  export type JsonFilterBase = {
    equals?: JsonNullValueFilter | InputJsonValue
    not?: JsonNullValueFilter | InputJsonValue
  }

  export type BoolFilter = {
    equals?: boolean
    not?: NestedBoolFilter | boolean
  }

  export type PrescriptionCountOrderByAggregateInput = {
    id?: SortOrder
    clientId?: SortOrder
    medicId?: SortOrder
    medications?: SortOrder
    description?: SortOrder
    requestingRenewal?: SortOrder
    expirationDate?: SortOrder
    createdAt?: SortOrder
    updatedAt?: SortOrder
  }

  export type PrescriptionAvgOrderByAggregateInput = {
    id?: SortOrder
    clientId?: SortOrder
    medicId?: SortOrder
  }

  export type PrescriptionMaxOrderByAggregateInput = {
    id?: SortOrder
    clientId?: SortOrder
    medicId?: SortOrder
    description?: SortOrder
    requestingRenewal?: SortOrder
    expirationDate?: SortOrder
    createdAt?: SortOrder
    updatedAt?: SortOrder
  }

  export type PrescriptionMinOrderByAggregateInput = {
    id?: SortOrder
    clientId?: SortOrder
    medicId?: SortOrder
    description?: SortOrder
    requestingRenewal?: SortOrder
    expirationDate?: SortOrder
    createdAt?: SortOrder
    updatedAt?: SortOrder
  }

  export type PrescriptionSumOrderByAggregateInput = {
    id?: SortOrder
    clientId?: SortOrder
    medicId?: SortOrder
  }
  export type JsonWithAggregatesFilter = 
    | PatchUndefined<
        Either<Required<JsonWithAggregatesFilterBase>, Exclude<keyof Required<JsonWithAggregatesFilterBase>, 'path'>>,
        Required<JsonWithAggregatesFilterBase>
      >
    | OptionalFlat<Omit<Required<JsonWithAggregatesFilterBase>, 'path'>>

  export type JsonWithAggregatesFilterBase = {
    equals?: JsonNullValueFilter | InputJsonValue
    not?: JsonNullValueFilter | InputJsonValue
    _count?: NestedIntFilter
    _min?: NestedJsonFilter
    _max?: NestedJsonFilter
  }

  export type BoolWithAggregatesFilter = {
    equals?: boolean
    not?: NestedBoolWithAggregatesFilter | boolean
    _count?: NestedIntFilter
    _min?: NestedBoolFilter
    _max?: NestedBoolFilter
  }

  export type ReportCountOrderByAggregateInput = {
    id?: SortOrder
    clientId?: SortOrder
    medicId?: SortOrder
    title?: SortOrder
    text?: SortOrder
    createdAt?: SortOrder
    updatedAt?: SortOrder
  }

  export type ReportAvgOrderByAggregateInput = {
    id?: SortOrder
    clientId?: SortOrder
    medicId?: SortOrder
  }

  export type ReportMaxOrderByAggregateInput = {
    id?: SortOrder
    clientId?: SortOrder
    medicId?: SortOrder
    title?: SortOrder
    text?: SortOrder
    createdAt?: SortOrder
    updatedAt?: SortOrder
  }

  export type ReportMinOrderByAggregateInput = {
    id?: SortOrder
    clientId?: SortOrder
    medicId?: SortOrder
    title?: SortOrder
    text?: SortOrder
    createdAt?: SortOrder
    updatedAt?: SortOrder
  }

  export type ReportSumOrderByAggregateInput = {
    id?: SortOrder
    clientId?: SortOrder
    medicId?: SortOrder
  }

  export type ExamCountOrderByAggregateInput = {
    id?: SortOrder
    clientId?: SortOrder
    medicId?: SortOrder
    title?: SortOrder
    text?: SortOrder
    createdAt?: SortOrder
    updatedAt?: SortOrder
  }

  export type ExamAvgOrderByAggregateInput = {
    id?: SortOrder
    clientId?: SortOrder
    medicId?: SortOrder
  }

  export type ExamMaxOrderByAggregateInput = {
    id?: SortOrder
    clientId?: SortOrder
    medicId?: SortOrder
    title?: SortOrder
    text?: SortOrder
    createdAt?: SortOrder
    updatedAt?: SortOrder
  }

  export type ExamMinOrderByAggregateInput = {
    id?: SortOrder
    clientId?: SortOrder
    medicId?: SortOrder
    title?: SortOrder
    text?: SortOrder
    createdAt?: SortOrder
    updatedAt?: SortOrder
  }

  export type ExamSumOrderByAggregateInput = {
    id?: SortOrder
    clientId?: SortOrder
    medicId?: SortOrder
  }

  export type SessionMedicCountOrderByAggregateInput = {
    id?: SortOrder
    medicId?: SortOrder
    token?: SortOrder
    createdAt?: SortOrder
    updatedAt?: SortOrder
  }

  export type SessionMedicAvgOrderByAggregateInput = {
    id?: SortOrder
    medicId?: SortOrder
  }

  export type SessionMedicMaxOrderByAggregateInput = {
    id?: SortOrder
    medicId?: SortOrder
    token?: SortOrder
    createdAt?: SortOrder
    updatedAt?: SortOrder
  }

  export type SessionMedicMinOrderByAggregateInput = {
    id?: SortOrder
    medicId?: SortOrder
    token?: SortOrder
    createdAt?: SortOrder
    updatedAt?: SortOrder
  }

  export type SessionMedicSumOrderByAggregateInput = {
    id?: SortOrder
    medicId?: SortOrder
  }

  export type SessionCreateNestedManyWithoutClientInput = {
    create?: XOR<Enumerable<SessionCreateWithoutClientInput>, Enumerable<SessionUncheckedCreateWithoutClientInput>>
    connectOrCreate?: Enumerable<SessionCreateOrConnectWithoutClientInput>
    createMany?: SessionCreateManyClientInputEnvelope
    connect?: Enumerable<SessionWhereUniqueInput>
  }

  export type AppointementCreateNestedManyWithoutClientInput = {
    create?: XOR<Enumerable<AppointementCreateWithoutClientInput>, Enumerable<AppointementUncheckedCreateWithoutClientInput>>
    connectOrCreate?: Enumerable<AppointementCreateOrConnectWithoutClientInput>
    createMany?: AppointementCreateManyClientInputEnvelope
    connect?: Enumerable<AppointementWhereUniqueInput>
  }

  export type PrescriptionCreateNestedManyWithoutClientInput = {
    create?: XOR<Enumerable<PrescriptionCreateWithoutClientInput>, Enumerable<PrescriptionUncheckedCreateWithoutClientInput>>
    connectOrCreate?: Enumerable<PrescriptionCreateOrConnectWithoutClientInput>
    createMany?: PrescriptionCreateManyClientInputEnvelope
    connect?: Enumerable<PrescriptionWhereUniqueInput>
  }

  export type ReportCreateNestedManyWithoutClientInput = {
    create?: XOR<Enumerable<ReportCreateWithoutClientInput>, Enumerable<ReportUncheckedCreateWithoutClientInput>>
    connectOrCreate?: Enumerable<ReportCreateOrConnectWithoutClientInput>
    createMany?: ReportCreateManyClientInputEnvelope
    connect?: Enumerable<ReportWhereUniqueInput>
  }

  export type ExamCreateNestedManyWithoutClientInput = {
    create?: XOR<Enumerable<ExamCreateWithoutClientInput>, Enumerable<ExamUncheckedCreateWithoutClientInput>>
    connectOrCreate?: Enumerable<ExamCreateOrConnectWithoutClientInput>
    createMany?: ExamCreateManyClientInputEnvelope
    connect?: Enumerable<ExamWhereUniqueInput>
  }

  export type SessionUncheckedCreateNestedManyWithoutClientInput = {
    create?: XOR<Enumerable<SessionCreateWithoutClientInput>, Enumerable<SessionUncheckedCreateWithoutClientInput>>
    connectOrCreate?: Enumerable<SessionCreateOrConnectWithoutClientInput>
    createMany?: SessionCreateManyClientInputEnvelope
    connect?: Enumerable<SessionWhereUniqueInput>
  }

  export type AppointementUncheckedCreateNestedManyWithoutClientInput = {
    create?: XOR<Enumerable<AppointementCreateWithoutClientInput>, Enumerable<AppointementUncheckedCreateWithoutClientInput>>
    connectOrCreate?: Enumerable<AppointementCreateOrConnectWithoutClientInput>
    createMany?: AppointementCreateManyClientInputEnvelope
    connect?: Enumerable<AppointementWhereUniqueInput>
  }

  export type PrescriptionUncheckedCreateNestedManyWithoutClientInput = {
    create?: XOR<Enumerable<PrescriptionCreateWithoutClientInput>, Enumerable<PrescriptionUncheckedCreateWithoutClientInput>>
    connectOrCreate?: Enumerable<PrescriptionCreateOrConnectWithoutClientInput>
    createMany?: PrescriptionCreateManyClientInputEnvelope
    connect?: Enumerable<PrescriptionWhereUniqueInput>
  }

  export type ReportUncheckedCreateNestedManyWithoutClientInput = {
    create?: XOR<Enumerable<ReportCreateWithoutClientInput>, Enumerable<ReportUncheckedCreateWithoutClientInput>>
    connectOrCreate?: Enumerable<ReportCreateOrConnectWithoutClientInput>
    createMany?: ReportCreateManyClientInputEnvelope
    connect?: Enumerable<ReportWhereUniqueInput>
  }

  export type ExamUncheckedCreateNestedManyWithoutClientInput = {
    create?: XOR<Enumerable<ExamCreateWithoutClientInput>, Enumerable<ExamUncheckedCreateWithoutClientInput>>
    connectOrCreate?: Enumerable<ExamCreateOrConnectWithoutClientInput>
    createMany?: ExamCreateManyClientInputEnvelope
    connect?: Enumerable<ExamWhereUniqueInput>
  }

  export type StringFieldUpdateOperationsInput = {
    set?: string
  }

  export type NullableStringFieldUpdateOperationsInput = {
    set?: string | null
  }

  export type NullableDateTimeFieldUpdateOperationsInput = {
    set?: Date | string | null
  }

  export type DateTimeFieldUpdateOperationsInput = {
    set?: Date | string
  }

  export type SessionUpdateManyWithoutClientInput = {
    create?: XOR<Enumerable<SessionCreateWithoutClientInput>, Enumerable<SessionUncheckedCreateWithoutClientInput>>
    connectOrCreate?: Enumerable<SessionCreateOrConnectWithoutClientInput>
    upsert?: Enumerable<SessionUpsertWithWhereUniqueWithoutClientInput>
    createMany?: SessionCreateManyClientInputEnvelope
    set?: Enumerable<SessionWhereUniqueInput>
    disconnect?: Enumerable<SessionWhereUniqueInput>
    delete?: Enumerable<SessionWhereUniqueInput>
    connect?: Enumerable<SessionWhereUniqueInput>
    update?: Enumerable<SessionUpdateWithWhereUniqueWithoutClientInput>
    updateMany?: Enumerable<SessionUpdateManyWithWhereWithoutClientInput>
    deleteMany?: Enumerable<SessionScalarWhereInput>
  }

  export type AppointementUpdateManyWithoutClientInput = {
    create?: XOR<Enumerable<AppointementCreateWithoutClientInput>, Enumerable<AppointementUncheckedCreateWithoutClientInput>>
    connectOrCreate?: Enumerable<AppointementCreateOrConnectWithoutClientInput>
    upsert?: Enumerable<AppointementUpsertWithWhereUniqueWithoutClientInput>
    createMany?: AppointementCreateManyClientInputEnvelope
    set?: Enumerable<AppointementWhereUniqueInput>
    disconnect?: Enumerable<AppointementWhereUniqueInput>
    delete?: Enumerable<AppointementWhereUniqueInput>
    connect?: Enumerable<AppointementWhereUniqueInput>
    update?: Enumerable<AppointementUpdateWithWhereUniqueWithoutClientInput>
    updateMany?: Enumerable<AppointementUpdateManyWithWhereWithoutClientInput>
    deleteMany?: Enumerable<AppointementScalarWhereInput>
  }

  export type PrescriptionUpdateManyWithoutClientInput = {
    create?: XOR<Enumerable<PrescriptionCreateWithoutClientInput>, Enumerable<PrescriptionUncheckedCreateWithoutClientInput>>
    connectOrCreate?: Enumerable<PrescriptionCreateOrConnectWithoutClientInput>
    upsert?: Enumerable<PrescriptionUpsertWithWhereUniqueWithoutClientInput>
    createMany?: PrescriptionCreateManyClientInputEnvelope
    set?: Enumerable<PrescriptionWhereUniqueInput>
    disconnect?: Enumerable<PrescriptionWhereUniqueInput>
    delete?: Enumerable<PrescriptionWhereUniqueInput>
    connect?: Enumerable<PrescriptionWhereUniqueInput>
    update?: Enumerable<PrescriptionUpdateWithWhereUniqueWithoutClientInput>
    updateMany?: Enumerable<PrescriptionUpdateManyWithWhereWithoutClientInput>
    deleteMany?: Enumerable<PrescriptionScalarWhereInput>
  }

  export type ReportUpdateManyWithoutClientInput = {
    create?: XOR<Enumerable<ReportCreateWithoutClientInput>, Enumerable<ReportUncheckedCreateWithoutClientInput>>
    connectOrCreate?: Enumerable<ReportCreateOrConnectWithoutClientInput>
    upsert?: Enumerable<ReportUpsertWithWhereUniqueWithoutClientInput>
    createMany?: ReportCreateManyClientInputEnvelope
    set?: Enumerable<ReportWhereUniqueInput>
    disconnect?: Enumerable<ReportWhereUniqueInput>
    delete?: Enumerable<ReportWhereUniqueInput>
    connect?: Enumerable<ReportWhereUniqueInput>
    update?: Enumerable<ReportUpdateWithWhereUniqueWithoutClientInput>
    updateMany?: Enumerable<ReportUpdateManyWithWhereWithoutClientInput>
    deleteMany?: Enumerable<ReportScalarWhereInput>
  }

  export type ExamUpdateManyWithoutClientInput = {
    create?: XOR<Enumerable<ExamCreateWithoutClientInput>, Enumerable<ExamUncheckedCreateWithoutClientInput>>
    connectOrCreate?: Enumerable<ExamCreateOrConnectWithoutClientInput>
    upsert?: Enumerable<ExamUpsertWithWhereUniqueWithoutClientInput>
    createMany?: ExamCreateManyClientInputEnvelope
    set?: Enumerable<ExamWhereUniqueInput>
    disconnect?: Enumerable<ExamWhereUniqueInput>
    delete?: Enumerable<ExamWhereUniqueInput>
    connect?: Enumerable<ExamWhereUniqueInput>
    update?: Enumerable<ExamUpdateWithWhereUniqueWithoutClientInput>
    updateMany?: Enumerable<ExamUpdateManyWithWhereWithoutClientInput>
    deleteMany?: Enumerable<ExamScalarWhereInput>
  }

  export type IntFieldUpdateOperationsInput = {
    set?: number
    increment?: number
    decrement?: number
    multiply?: number
    divide?: number
  }

  export type SessionUncheckedUpdateManyWithoutClientInput = {
    create?: XOR<Enumerable<SessionCreateWithoutClientInput>, Enumerable<SessionUncheckedCreateWithoutClientInput>>
    connectOrCreate?: Enumerable<SessionCreateOrConnectWithoutClientInput>
    upsert?: Enumerable<SessionUpsertWithWhereUniqueWithoutClientInput>
    createMany?: SessionCreateManyClientInputEnvelope
    set?: Enumerable<SessionWhereUniqueInput>
    disconnect?: Enumerable<SessionWhereUniqueInput>
    delete?: Enumerable<SessionWhereUniqueInput>
    connect?: Enumerable<SessionWhereUniqueInput>
    update?: Enumerable<SessionUpdateWithWhereUniqueWithoutClientInput>
    updateMany?: Enumerable<SessionUpdateManyWithWhereWithoutClientInput>
    deleteMany?: Enumerable<SessionScalarWhereInput>
  }

  export type AppointementUncheckedUpdateManyWithoutClientInput = {
    create?: XOR<Enumerable<AppointementCreateWithoutClientInput>, Enumerable<AppointementUncheckedCreateWithoutClientInput>>
    connectOrCreate?: Enumerable<AppointementCreateOrConnectWithoutClientInput>
    upsert?: Enumerable<AppointementUpsertWithWhereUniqueWithoutClientInput>
    createMany?: AppointementCreateManyClientInputEnvelope
    set?: Enumerable<AppointementWhereUniqueInput>
    disconnect?: Enumerable<AppointementWhereUniqueInput>
    delete?: Enumerable<AppointementWhereUniqueInput>
    connect?: Enumerable<AppointementWhereUniqueInput>
    update?: Enumerable<AppointementUpdateWithWhereUniqueWithoutClientInput>
    updateMany?: Enumerable<AppointementUpdateManyWithWhereWithoutClientInput>
    deleteMany?: Enumerable<AppointementScalarWhereInput>
  }

  export type PrescriptionUncheckedUpdateManyWithoutClientInput = {
    create?: XOR<Enumerable<PrescriptionCreateWithoutClientInput>, Enumerable<PrescriptionUncheckedCreateWithoutClientInput>>
    connectOrCreate?: Enumerable<PrescriptionCreateOrConnectWithoutClientInput>
    upsert?: Enumerable<PrescriptionUpsertWithWhereUniqueWithoutClientInput>
    createMany?: PrescriptionCreateManyClientInputEnvelope
    set?: Enumerable<PrescriptionWhereUniqueInput>
    disconnect?: Enumerable<PrescriptionWhereUniqueInput>
    delete?: Enumerable<PrescriptionWhereUniqueInput>
    connect?: Enumerable<PrescriptionWhereUniqueInput>
    update?: Enumerable<PrescriptionUpdateWithWhereUniqueWithoutClientInput>
    updateMany?: Enumerable<PrescriptionUpdateManyWithWhereWithoutClientInput>
    deleteMany?: Enumerable<PrescriptionScalarWhereInput>
  }

  export type ReportUncheckedUpdateManyWithoutClientInput = {
    create?: XOR<Enumerable<ReportCreateWithoutClientInput>, Enumerable<ReportUncheckedCreateWithoutClientInput>>
    connectOrCreate?: Enumerable<ReportCreateOrConnectWithoutClientInput>
    upsert?: Enumerable<ReportUpsertWithWhereUniqueWithoutClientInput>
    createMany?: ReportCreateManyClientInputEnvelope
    set?: Enumerable<ReportWhereUniqueInput>
    disconnect?: Enumerable<ReportWhereUniqueInput>
    delete?: Enumerable<ReportWhereUniqueInput>
    connect?: Enumerable<ReportWhereUniqueInput>
    update?: Enumerable<ReportUpdateWithWhereUniqueWithoutClientInput>
    updateMany?: Enumerable<ReportUpdateManyWithWhereWithoutClientInput>
    deleteMany?: Enumerable<ReportScalarWhereInput>
  }

  export type ExamUncheckedUpdateManyWithoutClientInput = {
    create?: XOR<Enumerable<ExamCreateWithoutClientInput>, Enumerable<ExamUncheckedCreateWithoutClientInput>>
    connectOrCreate?: Enumerable<ExamCreateOrConnectWithoutClientInput>
    upsert?: Enumerable<ExamUpsertWithWhereUniqueWithoutClientInput>
    createMany?: ExamCreateManyClientInputEnvelope
    set?: Enumerable<ExamWhereUniqueInput>
    disconnect?: Enumerable<ExamWhereUniqueInput>
    delete?: Enumerable<ExamWhereUniqueInput>
    connect?: Enumerable<ExamWhereUniqueInput>
    update?: Enumerable<ExamUpdateWithWhereUniqueWithoutClientInput>
    updateMany?: Enumerable<ExamUpdateManyWithWhereWithoutClientInput>
    deleteMany?: Enumerable<ExamScalarWhereInput>
  }

  export type ClientCreateNestedOneWithoutSessionInput = {
    create?: XOR<ClientCreateWithoutSessionInput, ClientUncheckedCreateWithoutSessionInput>
    connectOrCreate?: ClientCreateOrConnectWithoutSessionInput
    connect?: ClientWhereUniqueInput
  }

  export type ClientUpdateOneWithoutSessionInput = {
    create?: XOR<ClientCreateWithoutSessionInput, ClientUncheckedCreateWithoutSessionInput>
    connectOrCreate?: ClientCreateOrConnectWithoutSessionInput
    upsert?: ClientUpsertWithoutSessionInput
    disconnect?: boolean
    delete?: boolean
    connect?: ClientWhereUniqueInput
    update?: XOR<ClientUpdateWithoutSessionInput, ClientUncheckedUpdateWithoutSessionInput>
  }

  export type NullableIntFieldUpdateOperationsInput = {
    set?: number | null
    increment?: number
    decrement?: number
    multiply?: number
    divide?: number
  }

  export type SessionReceptionistCreateNestedManyWithoutReceptionistInput = {
    create?: XOR<Enumerable<SessionReceptionistCreateWithoutReceptionistInput>, Enumerable<SessionReceptionistUncheckedCreateWithoutReceptionistInput>>
    connectOrCreate?: Enumerable<SessionReceptionistCreateOrConnectWithoutReceptionistInput>
    createMany?: SessionReceptionistCreateManyReceptionistInputEnvelope
    connect?: Enumerable<SessionReceptionistWhereUniqueInput>
  }

  export type SessionReceptionistUncheckedCreateNestedManyWithoutReceptionistInput = {
    create?: XOR<Enumerable<SessionReceptionistCreateWithoutReceptionistInput>, Enumerable<SessionReceptionistUncheckedCreateWithoutReceptionistInput>>
    connectOrCreate?: Enumerable<SessionReceptionistCreateOrConnectWithoutReceptionistInput>
    createMany?: SessionReceptionistCreateManyReceptionistInputEnvelope
    connect?: Enumerable<SessionReceptionistWhereUniqueInput>
  }

  export type SessionReceptionistUpdateManyWithoutReceptionistInput = {
    create?: XOR<Enumerable<SessionReceptionistCreateWithoutReceptionistInput>, Enumerable<SessionReceptionistUncheckedCreateWithoutReceptionistInput>>
    connectOrCreate?: Enumerable<SessionReceptionistCreateOrConnectWithoutReceptionistInput>
    upsert?: Enumerable<SessionReceptionistUpsertWithWhereUniqueWithoutReceptionistInput>
    createMany?: SessionReceptionistCreateManyReceptionistInputEnvelope
    set?: Enumerable<SessionReceptionistWhereUniqueInput>
    disconnect?: Enumerable<SessionReceptionistWhereUniqueInput>
    delete?: Enumerable<SessionReceptionistWhereUniqueInput>
    connect?: Enumerable<SessionReceptionistWhereUniqueInput>
    update?: Enumerable<SessionReceptionistUpdateWithWhereUniqueWithoutReceptionistInput>
    updateMany?: Enumerable<SessionReceptionistUpdateManyWithWhereWithoutReceptionistInput>
    deleteMany?: Enumerable<SessionReceptionistScalarWhereInput>
  }

  export type SessionReceptionistUncheckedUpdateManyWithoutReceptionistInput = {
    create?: XOR<Enumerable<SessionReceptionistCreateWithoutReceptionistInput>, Enumerable<SessionReceptionistUncheckedCreateWithoutReceptionistInput>>
    connectOrCreate?: Enumerable<SessionReceptionistCreateOrConnectWithoutReceptionistInput>
    upsert?: Enumerable<SessionReceptionistUpsertWithWhereUniqueWithoutReceptionistInput>
    createMany?: SessionReceptionistCreateManyReceptionistInputEnvelope
    set?: Enumerable<SessionReceptionistWhereUniqueInput>
    disconnect?: Enumerable<SessionReceptionistWhereUniqueInput>
    delete?: Enumerable<SessionReceptionistWhereUniqueInput>
    connect?: Enumerable<SessionReceptionistWhereUniqueInput>
    update?: Enumerable<SessionReceptionistUpdateWithWhereUniqueWithoutReceptionistInput>
    updateMany?: Enumerable<SessionReceptionistUpdateManyWithWhereWithoutReceptionistInput>
    deleteMany?: Enumerable<SessionReceptionistScalarWhereInput>
  }

  export type ReceptionistCreateNestedOneWithoutSessionReceptionistInput = {
    create?: XOR<ReceptionistCreateWithoutSessionReceptionistInput, ReceptionistUncheckedCreateWithoutSessionReceptionistInput>
    connectOrCreate?: ReceptionistCreateOrConnectWithoutSessionReceptionistInput
    connect?: ReceptionistWhereUniqueInput
  }

  export type ReceptionistUpdateOneWithoutSessionReceptionistInput = {
    create?: XOR<ReceptionistCreateWithoutSessionReceptionistInput, ReceptionistUncheckedCreateWithoutSessionReceptionistInput>
    connectOrCreate?: ReceptionistCreateOrConnectWithoutSessionReceptionistInput
    upsert?: ReceptionistUpsertWithoutSessionReceptionistInput
    disconnect?: boolean
    delete?: boolean
    connect?: ReceptionistWhereUniqueInput
    update?: XOR<ReceptionistUpdateWithoutSessionReceptionistInput, ReceptionistUncheckedUpdateWithoutSessionReceptionistInput>
  }

  export type SessionMedicCreateNestedManyWithoutMedicInput = {
    create?: XOR<Enumerable<SessionMedicCreateWithoutMedicInput>, Enumerable<SessionMedicUncheckedCreateWithoutMedicInput>>
    connectOrCreate?: Enumerable<SessionMedicCreateOrConnectWithoutMedicInput>
    createMany?: SessionMedicCreateManyMedicInputEnvelope
    connect?: Enumerable<SessionMedicWhereUniqueInput>
  }

  export type AppointementCreateNestedManyWithoutMedicInput = {
    create?: XOR<Enumerable<AppointementCreateWithoutMedicInput>, Enumerable<AppointementUncheckedCreateWithoutMedicInput>>
    connectOrCreate?: Enumerable<AppointementCreateOrConnectWithoutMedicInput>
    createMany?: AppointementCreateManyMedicInputEnvelope
    connect?: Enumerable<AppointementWhereUniqueInput>
  }

  export type PrescriptionCreateNestedManyWithoutMedicInput = {
    create?: XOR<Enumerable<PrescriptionCreateWithoutMedicInput>, Enumerable<PrescriptionUncheckedCreateWithoutMedicInput>>
    connectOrCreate?: Enumerable<PrescriptionCreateOrConnectWithoutMedicInput>
    createMany?: PrescriptionCreateManyMedicInputEnvelope
    connect?: Enumerable<PrescriptionWhereUniqueInput>
  }

  export type ReportCreateNestedManyWithoutMedicInput = {
    create?: XOR<Enumerable<ReportCreateWithoutMedicInput>, Enumerable<ReportUncheckedCreateWithoutMedicInput>>
    connectOrCreate?: Enumerable<ReportCreateOrConnectWithoutMedicInput>
    createMany?: ReportCreateManyMedicInputEnvelope
    connect?: Enumerable<ReportWhereUniqueInput>
  }

  export type ExamCreateNestedManyWithoutMedicInput = {
    create?: XOR<Enumerable<ExamCreateWithoutMedicInput>, Enumerable<ExamUncheckedCreateWithoutMedicInput>>
    connectOrCreate?: Enumerable<ExamCreateOrConnectWithoutMedicInput>
    createMany?: ExamCreateManyMedicInputEnvelope
    connect?: Enumerable<ExamWhereUniqueInput>
  }

  export type SessionMedicUncheckedCreateNestedManyWithoutMedicInput = {
    create?: XOR<Enumerable<SessionMedicCreateWithoutMedicInput>, Enumerable<SessionMedicUncheckedCreateWithoutMedicInput>>
    connectOrCreate?: Enumerable<SessionMedicCreateOrConnectWithoutMedicInput>
    createMany?: SessionMedicCreateManyMedicInputEnvelope
    connect?: Enumerable<SessionMedicWhereUniqueInput>
  }

  export type AppointementUncheckedCreateNestedManyWithoutMedicInput = {
    create?: XOR<Enumerable<AppointementCreateWithoutMedicInput>, Enumerable<AppointementUncheckedCreateWithoutMedicInput>>
    connectOrCreate?: Enumerable<AppointementCreateOrConnectWithoutMedicInput>
    createMany?: AppointementCreateManyMedicInputEnvelope
    connect?: Enumerable<AppointementWhereUniqueInput>
  }

  export type PrescriptionUncheckedCreateNestedManyWithoutMedicInput = {
    create?: XOR<Enumerable<PrescriptionCreateWithoutMedicInput>, Enumerable<PrescriptionUncheckedCreateWithoutMedicInput>>
    connectOrCreate?: Enumerable<PrescriptionCreateOrConnectWithoutMedicInput>
    createMany?: PrescriptionCreateManyMedicInputEnvelope
    connect?: Enumerable<PrescriptionWhereUniqueInput>
  }

  export type ReportUncheckedCreateNestedManyWithoutMedicInput = {
    create?: XOR<Enumerable<ReportCreateWithoutMedicInput>, Enumerable<ReportUncheckedCreateWithoutMedicInput>>
    connectOrCreate?: Enumerable<ReportCreateOrConnectWithoutMedicInput>
    createMany?: ReportCreateManyMedicInputEnvelope
    connect?: Enumerable<ReportWhereUniqueInput>
  }

  export type ExamUncheckedCreateNestedManyWithoutMedicInput = {
    create?: XOR<Enumerable<ExamCreateWithoutMedicInput>, Enumerable<ExamUncheckedCreateWithoutMedicInput>>
    connectOrCreate?: Enumerable<ExamCreateOrConnectWithoutMedicInput>
    createMany?: ExamCreateManyMedicInputEnvelope
    connect?: Enumerable<ExamWhereUniqueInput>
  }

  export type SessionMedicUpdateManyWithoutMedicInput = {
    create?: XOR<Enumerable<SessionMedicCreateWithoutMedicInput>, Enumerable<SessionMedicUncheckedCreateWithoutMedicInput>>
    connectOrCreate?: Enumerable<SessionMedicCreateOrConnectWithoutMedicInput>
    upsert?: Enumerable<SessionMedicUpsertWithWhereUniqueWithoutMedicInput>
    createMany?: SessionMedicCreateManyMedicInputEnvelope
    set?: Enumerable<SessionMedicWhereUniqueInput>
    disconnect?: Enumerable<SessionMedicWhereUniqueInput>
    delete?: Enumerable<SessionMedicWhereUniqueInput>
    connect?: Enumerable<SessionMedicWhereUniqueInput>
    update?: Enumerable<SessionMedicUpdateWithWhereUniqueWithoutMedicInput>
    updateMany?: Enumerable<SessionMedicUpdateManyWithWhereWithoutMedicInput>
    deleteMany?: Enumerable<SessionMedicScalarWhereInput>
  }

  export type AppointementUpdateManyWithoutMedicInput = {
    create?: XOR<Enumerable<AppointementCreateWithoutMedicInput>, Enumerable<AppointementUncheckedCreateWithoutMedicInput>>
    connectOrCreate?: Enumerable<AppointementCreateOrConnectWithoutMedicInput>
    upsert?: Enumerable<AppointementUpsertWithWhereUniqueWithoutMedicInput>
    createMany?: AppointementCreateManyMedicInputEnvelope
    set?: Enumerable<AppointementWhereUniqueInput>
    disconnect?: Enumerable<AppointementWhereUniqueInput>
    delete?: Enumerable<AppointementWhereUniqueInput>
    connect?: Enumerable<AppointementWhereUniqueInput>
    update?: Enumerable<AppointementUpdateWithWhereUniqueWithoutMedicInput>
    updateMany?: Enumerable<AppointementUpdateManyWithWhereWithoutMedicInput>
    deleteMany?: Enumerable<AppointementScalarWhereInput>
  }

  export type PrescriptionUpdateManyWithoutMedicInput = {
    create?: XOR<Enumerable<PrescriptionCreateWithoutMedicInput>, Enumerable<PrescriptionUncheckedCreateWithoutMedicInput>>
    connectOrCreate?: Enumerable<PrescriptionCreateOrConnectWithoutMedicInput>
    upsert?: Enumerable<PrescriptionUpsertWithWhereUniqueWithoutMedicInput>
    createMany?: PrescriptionCreateManyMedicInputEnvelope
    set?: Enumerable<PrescriptionWhereUniqueInput>
    disconnect?: Enumerable<PrescriptionWhereUniqueInput>
    delete?: Enumerable<PrescriptionWhereUniqueInput>
    connect?: Enumerable<PrescriptionWhereUniqueInput>
    update?: Enumerable<PrescriptionUpdateWithWhereUniqueWithoutMedicInput>
    updateMany?: Enumerable<PrescriptionUpdateManyWithWhereWithoutMedicInput>
    deleteMany?: Enumerable<PrescriptionScalarWhereInput>
  }

  export type ReportUpdateManyWithoutMedicInput = {
    create?: XOR<Enumerable<ReportCreateWithoutMedicInput>, Enumerable<ReportUncheckedCreateWithoutMedicInput>>
    connectOrCreate?: Enumerable<ReportCreateOrConnectWithoutMedicInput>
    upsert?: Enumerable<ReportUpsertWithWhereUniqueWithoutMedicInput>
    createMany?: ReportCreateManyMedicInputEnvelope
    set?: Enumerable<ReportWhereUniqueInput>
    disconnect?: Enumerable<ReportWhereUniqueInput>
    delete?: Enumerable<ReportWhereUniqueInput>
    connect?: Enumerable<ReportWhereUniqueInput>
    update?: Enumerable<ReportUpdateWithWhereUniqueWithoutMedicInput>
    updateMany?: Enumerable<ReportUpdateManyWithWhereWithoutMedicInput>
    deleteMany?: Enumerable<ReportScalarWhereInput>
  }

  export type ExamUpdateManyWithoutMedicInput = {
    create?: XOR<Enumerable<ExamCreateWithoutMedicInput>, Enumerable<ExamUncheckedCreateWithoutMedicInput>>
    connectOrCreate?: Enumerable<ExamCreateOrConnectWithoutMedicInput>
    upsert?: Enumerable<ExamUpsertWithWhereUniqueWithoutMedicInput>
    createMany?: ExamCreateManyMedicInputEnvelope
    set?: Enumerable<ExamWhereUniqueInput>
    disconnect?: Enumerable<ExamWhereUniqueInput>
    delete?: Enumerable<ExamWhereUniqueInput>
    connect?: Enumerable<ExamWhereUniqueInput>
    update?: Enumerable<ExamUpdateWithWhereUniqueWithoutMedicInput>
    updateMany?: Enumerable<ExamUpdateManyWithWhereWithoutMedicInput>
    deleteMany?: Enumerable<ExamScalarWhereInput>
  }

  export type SessionMedicUncheckedUpdateManyWithoutMedicInput = {
    create?: XOR<Enumerable<SessionMedicCreateWithoutMedicInput>, Enumerable<SessionMedicUncheckedCreateWithoutMedicInput>>
    connectOrCreate?: Enumerable<SessionMedicCreateOrConnectWithoutMedicInput>
    upsert?: Enumerable<SessionMedicUpsertWithWhereUniqueWithoutMedicInput>
    createMany?: SessionMedicCreateManyMedicInputEnvelope
    set?: Enumerable<SessionMedicWhereUniqueInput>
    disconnect?: Enumerable<SessionMedicWhereUniqueInput>
    delete?: Enumerable<SessionMedicWhereUniqueInput>
    connect?: Enumerable<SessionMedicWhereUniqueInput>
    update?: Enumerable<SessionMedicUpdateWithWhereUniqueWithoutMedicInput>
    updateMany?: Enumerable<SessionMedicUpdateManyWithWhereWithoutMedicInput>
    deleteMany?: Enumerable<SessionMedicScalarWhereInput>
  }

  export type AppointementUncheckedUpdateManyWithoutMedicInput = {
    create?: XOR<Enumerable<AppointementCreateWithoutMedicInput>, Enumerable<AppointementUncheckedCreateWithoutMedicInput>>
    connectOrCreate?: Enumerable<AppointementCreateOrConnectWithoutMedicInput>
    upsert?: Enumerable<AppointementUpsertWithWhereUniqueWithoutMedicInput>
    createMany?: AppointementCreateManyMedicInputEnvelope
    set?: Enumerable<AppointementWhereUniqueInput>
    disconnect?: Enumerable<AppointementWhereUniqueInput>
    delete?: Enumerable<AppointementWhereUniqueInput>
    connect?: Enumerable<AppointementWhereUniqueInput>
    update?: Enumerable<AppointementUpdateWithWhereUniqueWithoutMedicInput>
    updateMany?: Enumerable<AppointementUpdateManyWithWhereWithoutMedicInput>
    deleteMany?: Enumerable<AppointementScalarWhereInput>
  }

  export type PrescriptionUncheckedUpdateManyWithoutMedicInput = {
    create?: XOR<Enumerable<PrescriptionCreateWithoutMedicInput>, Enumerable<PrescriptionUncheckedCreateWithoutMedicInput>>
    connectOrCreate?: Enumerable<PrescriptionCreateOrConnectWithoutMedicInput>
    upsert?: Enumerable<PrescriptionUpsertWithWhereUniqueWithoutMedicInput>
    createMany?: PrescriptionCreateManyMedicInputEnvelope
    set?: Enumerable<PrescriptionWhereUniqueInput>
    disconnect?: Enumerable<PrescriptionWhereUniqueInput>
    delete?: Enumerable<PrescriptionWhereUniqueInput>
    connect?: Enumerable<PrescriptionWhereUniqueInput>
    update?: Enumerable<PrescriptionUpdateWithWhereUniqueWithoutMedicInput>
    updateMany?: Enumerable<PrescriptionUpdateManyWithWhereWithoutMedicInput>
    deleteMany?: Enumerable<PrescriptionScalarWhereInput>
  }

  export type ReportUncheckedUpdateManyWithoutMedicInput = {
    create?: XOR<Enumerable<ReportCreateWithoutMedicInput>, Enumerable<ReportUncheckedCreateWithoutMedicInput>>
    connectOrCreate?: Enumerable<ReportCreateOrConnectWithoutMedicInput>
    upsert?: Enumerable<ReportUpsertWithWhereUniqueWithoutMedicInput>
    createMany?: ReportCreateManyMedicInputEnvelope
    set?: Enumerable<ReportWhereUniqueInput>
    disconnect?: Enumerable<ReportWhereUniqueInput>
    delete?: Enumerable<ReportWhereUniqueInput>
    connect?: Enumerable<ReportWhereUniqueInput>
    update?: Enumerable<ReportUpdateWithWhereUniqueWithoutMedicInput>
    updateMany?: Enumerable<ReportUpdateManyWithWhereWithoutMedicInput>
    deleteMany?: Enumerable<ReportScalarWhereInput>
  }

  export type ExamUncheckedUpdateManyWithoutMedicInput = {
    create?: XOR<Enumerable<ExamCreateWithoutMedicInput>, Enumerable<ExamUncheckedCreateWithoutMedicInput>>
    connectOrCreate?: Enumerable<ExamCreateOrConnectWithoutMedicInput>
    upsert?: Enumerable<ExamUpsertWithWhereUniqueWithoutMedicInput>
    createMany?: ExamCreateManyMedicInputEnvelope
    set?: Enumerable<ExamWhereUniqueInput>
    disconnect?: Enumerable<ExamWhereUniqueInput>
    delete?: Enumerable<ExamWhereUniqueInput>
    connect?: Enumerable<ExamWhereUniqueInput>
    update?: Enumerable<ExamUpdateWithWhereUniqueWithoutMedicInput>
    updateMany?: Enumerable<ExamUpdateManyWithWhereWithoutMedicInput>
    deleteMany?: Enumerable<ExamScalarWhereInput>
  }

  export type ClientCreateNestedOneWithoutAppointmentInput = {
    create?: XOR<ClientCreateWithoutAppointmentInput, ClientUncheckedCreateWithoutAppointmentInput>
    connectOrCreate?: ClientCreateOrConnectWithoutAppointmentInput
    connect?: ClientWhereUniqueInput
  }

  export type MedicCreateNestedOneWithoutAppointmentInput = {
    create?: XOR<MedicCreateWithoutAppointmentInput, MedicUncheckedCreateWithoutAppointmentInput>
    connectOrCreate?: MedicCreateOrConnectWithoutAppointmentInput
    connect?: MedicWhereUniqueInput
  }

  export type ClientUpdateOneWithoutAppointmentInput = {
    create?: XOR<ClientCreateWithoutAppointmentInput, ClientUncheckedCreateWithoutAppointmentInput>
    connectOrCreate?: ClientCreateOrConnectWithoutAppointmentInput
    upsert?: ClientUpsertWithoutAppointmentInput
    disconnect?: boolean
    delete?: boolean
    connect?: ClientWhereUniqueInput
    update?: XOR<ClientUpdateWithoutAppointmentInput, ClientUncheckedUpdateWithoutAppointmentInput>
  }

  export type MedicUpdateOneWithoutAppointmentInput = {
    create?: XOR<MedicCreateWithoutAppointmentInput, MedicUncheckedCreateWithoutAppointmentInput>
    connectOrCreate?: MedicCreateOrConnectWithoutAppointmentInput
    upsert?: MedicUpsertWithoutAppointmentInput
    disconnect?: boolean
    delete?: boolean
    connect?: MedicWhereUniqueInput
    update?: XOR<MedicUpdateWithoutAppointmentInput, MedicUncheckedUpdateWithoutAppointmentInput>
  }

  export type ClientCreateNestedOneWithoutPescriptionInput = {
    create?: XOR<ClientCreateWithoutPescriptionInput, ClientUncheckedCreateWithoutPescriptionInput>
    connectOrCreate?: ClientCreateOrConnectWithoutPescriptionInput
    connect?: ClientWhereUniqueInput
  }

  export type MedicCreateNestedOneWithoutPescriptionInput = {
    create?: XOR<MedicCreateWithoutPescriptionInput, MedicUncheckedCreateWithoutPescriptionInput>
    connectOrCreate?: MedicCreateOrConnectWithoutPescriptionInput
    connect?: MedicWhereUniqueInput
  }

  export type ClientUpdateOneWithoutPescriptionInput = {
    create?: XOR<ClientCreateWithoutPescriptionInput, ClientUncheckedCreateWithoutPescriptionInput>
    connectOrCreate?: ClientCreateOrConnectWithoutPescriptionInput
    upsert?: ClientUpsertWithoutPescriptionInput
    disconnect?: boolean
    delete?: boolean
    connect?: ClientWhereUniqueInput
    update?: XOR<ClientUpdateWithoutPescriptionInput, ClientUncheckedUpdateWithoutPescriptionInput>
  }

  export type MedicUpdateOneWithoutPescriptionInput = {
    create?: XOR<MedicCreateWithoutPescriptionInput, MedicUncheckedCreateWithoutPescriptionInput>
    connectOrCreate?: MedicCreateOrConnectWithoutPescriptionInput
    upsert?: MedicUpsertWithoutPescriptionInput
    disconnect?: boolean
    delete?: boolean
    connect?: MedicWhereUniqueInput
    update?: XOR<MedicUpdateWithoutPescriptionInput, MedicUncheckedUpdateWithoutPescriptionInput>
  }

  export type BoolFieldUpdateOperationsInput = {
    set?: boolean
  }

  export type ClientCreateNestedOneWithoutReportInput = {
    create?: XOR<ClientCreateWithoutReportInput, ClientUncheckedCreateWithoutReportInput>
    connectOrCreate?: ClientCreateOrConnectWithoutReportInput
    connect?: ClientWhereUniqueInput
  }

  export type MedicCreateNestedOneWithoutReportInput = {
    create?: XOR<MedicCreateWithoutReportInput, MedicUncheckedCreateWithoutReportInput>
    connectOrCreate?: MedicCreateOrConnectWithoutReportInput
    connect?: MedicWhereUniqueInput
  }

  export type ClientUpdateOneWithoutReportInput = {
    create?: XOR<ClientCreateWithoutReportInput, ClientUncheckedCreateWithoutReportInput>
    connectOrCreate?: ClientCreateOrConnectWithoutReportInput
    upsert?: ClientUpsertWithoutReportInput
    disconnect?: boolean
    delete?: boolean
    connect?: ClientWhereUniqueInput
    update?: XOR<ClientUpdateWithoutReportInput, ClientUncheckedUpdateWithoutReportInput>
  }

  export type MedicUpdateOneWithoutReportInput = {
    create?: XOR<MedicCreateWithoutReportInput, MedicUncheckedCreateWithoutReportInput>
    connectOrCreate?: MedicCreateOrConnectWithoutReportInput
    upsert?: MedicUpsertWithoutReportInput
    disconnect?: boolean
    delete?: boolean
    connect?: MedicWhereUniqueInput
    update?: XOR<MedicUpdateWithoutReportInput, MedicUncheckedUpdateWithoutReportInput>
  }

  export type ClientCreateNestedOneWithoutExamInput = {
    create?: XOR<ClientCreateWithoutExamInput, ClientUncheckedCreateWithoutExamInput>
    connectOrCreate?: ClientCreateOrConnectWithoutExamInput
    connect?: ClientWhereUniqueInput
  }

  export type MedicCreateNestedOneWithoutExamInput = {
    create?: XOR<MedicCreateWithoutExamInput, MedicUncheckedCreateWithoutExamInput>
    connectOrCreate?: MedicCreateOrConnectWithoutExamInput
    connect?: MedicWhereUniqueInput
  }

  export type ClientUpdateOneWithoutExamInput = {
    create?: XOR<ClientCreateWithoutExamInput, ClientUncheckedCreateWithoutExamInput>
    connectOrCreate?: ClientCreateOrConnectWithoutExamInput
    upsert?: ClientUpsertWithoutExamInput
    disconnect?: boolean
    delete?: boolean
    connect?: ClientWhereUniqueInput
    update?: XOR<ClientUpdateWithoutExamInput, ClientUncheckedUpdateWithoutExamInput>
  }

  export type MedicUpdateOneWithoutExamInput = {
    create?: XOR<MedicCreateWithoutExamInput, MedicUncheckedCreateWithoutExamInput>
    connectOrCreate?: MedicCreateOrConnectWithoutExamInput
    upsert?: MedicUpsertWithoutExamInput
    disconnect?: boolean
    delete?: boolean
    connect?: MedicWhereUniqueInput
    update?: XOR<MedicUpdateWithoutExamInput, MedicUncheckedUpdateWithoutExamInput>
  }

  export type MedicCreateNestedOneWithoutSessionMedicInput = {
    create?: XOR<MedicCreateWithoutSessionMedicInput, MedicUncheckedCreateWithoutSessionMedicInput>
    connectOrCreate?: MedicCreateOrConnectWithoutSessionMedicInput
    connect?: MedicWhereUniqueInput
  }

  export type MedicUpdateOneWithoutSessionMedicInput = {
    create?: XOR<MedicCreateWithoutSessionMedicInput, MedicUncheckedCreateWithoutSessionMedicInput>
    connectOrCreate?: MedicCreateOrConnectWithoutSessionMedicInput
    upsert?: MedicUpsertWithoutSessionMedicInput
    disconnect?: boolean
    delete?: boolean
    connect?: MedicWhereUniqueInput
    update?: XOR<MedicUpdateWithoutSessionMedicInput, MedicUncheckedUpdateWithoutSessionMedicInput>
  }

  export type NestedIntFilter = {
    equals?: number
    in?: Enumerable<number>
    notIn?: Enumerable<number>
    lt?: number
    lte?: number
    gt?: number
    gte?: number
    not?: NestedIntFilter | number
  }

  export type NestedStringFilter = {
    equals?: string
    in?: Enumerable<string>
    notIn?: Enumerable<string>
    lt?: string
    lte?: string
    gt?: string
    gte?: string
    contains?: string
    startsWith?: string
    endsWith?: string
    not?: NestedStringFilter | string
  }

  export type NestedStringNullableFilter = {
    equals?: string | null
    in?: Enumerable<string> | null
    notIn?: Enumerable<string> | null
    lt?: string
    lte?: string
    gt?: string
    gte?: string
    contains?: string
    startsWith?: string
    endsWith?: string
    not?: NestedStringNullableFilter | string | null
  }

  export type NestedDateTimeNullableFilter = {
    equals?: Date | string | null
    in?: Enumerable<Date> | Enumerable<string> | null
    notIn?: Enumerable<Date> | Enumerable<string> | null
    lt?: Date | string
    lte?: Date | string
    gt?: Date | string
    gte?: Date | string
    not?: NestedDateTimeNullableFilter | Date | string | null
  }

  export type NestedDateTimeFilter = {
    equals?: Date | string
    in?: Enumerable<Date> | Enumerable<string>
    notIn?: Enumerable<Date> | Enumerable<string>
    lt?: Date | string
    lte?: Date | string
    gt?: Date | string
    gte?: Date | string
    not?: NestedDateTimeFilter | Date | string
  }

  export type NestedIntWithAggregatesFilter = {
    equals?: number
    in?: Enumerable<number>
    notIn?: Enumerable<number>
    lt?: number
    lte?: number
    gt?: number
    gte?: number
    not?: NestedIntWithAggregatesFilter | number
    _count?: NestedIntFilter
    _avg?: NestedFloatFilter
    _sum?: NestedIntFilter
    _min?: NestedIntFilter
    _max?: NestedIntFilter
  }

  export type NestedFloatFilter = {
    equals?: number
    in?: Enumerable<number>
    notIn?: Enumerable<number>
    lt?: number
    lte?: number
    gt?: number
    gte?: number
    not?: NestedFloatFilter | number
  }

  export type NestedStringWithAggregatesFilter = {
    equals?: string
    in?: Enumerable<string>
    notIn?: Enumerable<string>
    lt?: string
    lte?: string
    gt?: string
    gte?: string
    contains?: string
    startsWith?: string
    endsWith?: string
    not?: NestedStringWithAggregatesFilter | string
    _count?: NestedIntFilter
    _min?: NestedStringFilter
    _max?: NestedStringFilter
  }

  export type NestedStringNullableWithAggregatesFilter = {
    equals?: string | null
    in?: Enumerable<string> | null
    notIn?: Enumerable<string> | null
    lt?: string
    lte?: string
    gt?: string
    gte?: string
    contains?: string
    startsWith?: string
    endsWith?: string
    not?: NestedStringNullableWithAggregatesFilter | string | null
    _count?: NestedIntNullableFilter
    _min?: NestedStringNullableFilter
    _max?: NestedStringNullableFilter
  }

  export type NestedIntNullableFilter = {
    equals?: number | null
    in?: Enumerable<number> | null
    notIn?: Enumerable<number> | null
    lt?: number
    lte?: number
    gt?: number
    gte?: number
    not?: NestedIntNullableFilter | number | null
  }

  export type NestedDateTimeNullableWithAggregatesFilter = {
    equals?: Date | string | null
    in?: Enumerable<Date> | Enumerable<string> | null
    notIn?: Enumerable<Date> | Enumerable<string> | null
    lt?: Date | string
    lte?: Date | string
    gt?: Date | string
    gte?: Date | string
    not?: NestedDateTimeNullableWithAggregatesFilter | Date | string | null
    _count?: NestedIntNullableFilter
    _min?: NestedDateTimeNullableFilter
    _max?: NestedDateTimeNullableFilter
  }

  export type NestedDateTimeWithAggregatesFilter = {
    equals?: Date | string
    in?: Enumerable<Date> | Enumerable<string>
    notIn?: Enumerable<Date> | Enumerable<string>
    lt?: Date | string
    lte?: Date | string
    gt?: Date | string
    gte?: Date | string
    not?: NestedDateTimeWithAggregatesFilter | Date | string
    _count?: NestedIntFilter
    _min?: NestedDateTimeFilter
    _max?: NestedDateTimeFilter
  }

  export type NestedIntNullableWithAggregatesFilter = {
    equals?: number | null
    in?: Enumerable<number> | null
    notIn?: Enumerable<number> | null
    lt?: number
    lte?: number
    gt?: number
    gte?: number
    not?: NestedIntNullableWithAggregatesFilter | number | null
    _count?: NestedIntNullableFilter
    _avg?: NestedFloatNullableFilter
    _sum?: NestedIntNullableFilter
    _min?: NestedIntNullableFilter
    _max?: NestedIntNullableFilter
  }

  export type NestedFloatNullableFilter = {
    equals?: number | null
    in?: Enumerable<number> | null
    notIn?: Enumerable<number> | null
    lt?: number
    lte?: number
    gt?: number
    gte?: number
    not?: NestedFloatNullableFilter | number | null
  }

  export type NestedBoolFilter = {
    equals?: boolean
    not?: NestedBoolFilter | boolean
  }
  export type NestedJsonFilter = 
    | PatchUndefined<
        Either<Required<NestedJsonFilterBase>, Exclude<keyof Required<NestedJsonFilterBase>, 'path'>>,
        Required<NestedJsonFilterBase>
      >
    | OptionalFlat<Omit<Required<NestedJsonFilterBase>, 'path'>>

  export type NestedJsonFilterBase = {
    equals?: JsonNullValueFilter | InputJsonValue
    not?: JsonNullValueFilter | InputJsonValue
  }

  export type NestedBoolWithAggregatesFilter = {
    equals?: boolean
    not?: NestedBoolWithAggregatesFilter | boolean
    _count?: NestedIntFilter
    _min?: NestedBoolFilter
    _max?: NestedBoolFilter
  }

  export type SessionCreateWithoutClientInput = {
    token: string
    createdAt?: Date | string
    updatedAt?: Date | string
  }

  export type SessionUncheckedCreateWithoutClientInput = {
    id?: number
    token: string
    createdAt?: Date | string
    updatedAt?: Date | string
  }

  export type SessionCreateOrConnectWithoutClientInput = {
    where: SessionWhereUniqueInput
    create: XOR<SessionCreateWithoutClientInput, SessionUncheckedCreateWithoutClientInput>
  }

  export type SessionCreateManyClientInputEnvelope = {
    data: Enumerable<SessionCreateManyClientInput>
    skipDuplicates?: boolean
  }

  export type AppointementCreateWithoutClientInput = {
    Medic?: MedicCreateNestedOneWithoutAppointmentInput
    appointementDate: Date | string
    createdAt?: Date | string
    updatedAt?: Date | string
  }

  export type AppointementUncheckedCreateWithoutClientInput = {
    id?: number
    medicId?: number | null
    appointementDate: Date | string
    createdAt?: Date | string
    updatedAt?: Date | string
  }

  export type AppointementCreateOrConnectWithoutClientInput = {
    where: AppointementWhereUniqueInput
    create: XOR<AppointementCreateWithoutClientInput, AppointementUncheckedCreateWithoutClientInput>
  }

  export type AppointementCreateManyClientInputEnvelope = {
    data: Enumerable<AppointementCreateManyClientInput>
    skipDuplicates?: boolean
  }

  export type PrescriptionCreateWithoutClientInput = {
    Medic?: MedicCreateNestedOneWithoutPescriptionInput
    medications: JsonNullValueInput | InputJsonValue
    description: string
    requestingRenewal: boolean
    expirationDate: Date | string
    createdAt?: Date | string
    updatedAt?: Date | string
  }

  export type PrescriptionUncheckedCreateWithoutClientInput = {
    id?: number
    medicId?: number | null
    medications: JsonNullValueInput | InputJsonValue
    description: string
    requestingRenewal: boolean
    expirationDate: Date | string
    createdAt?: Date | string
    updatedAt?: Date | string
  }

  export type PrescriptionCreateOrConnectWithoutClientInput = {
    where: PrescriptionWhereUniqueInput
    create: XOR<PrescriptionCreateWithoutClientInput, PrescriptionUncheckedCreateWithoutClientInput>
  }

  export type PrescriptionCreateManyClientInputEnvelope = {
    data: Enumerable<PrescriptionCreateManyClientInput>
    skipDuplicates?: boolean
  }

  export type ReportCreateWithoutClientInput = {
    Medic?: MedicCreateNestedOneWithoutReportInput
    title: string
    text: string
    createdAt?: Date | string
    updatedAt?: Date | string
  }

  export type ReportUncheckedCreateWithoutClientInput = {
    id?: number
    medicId?: number | null
    title: string
    text: string
    createdAt?: Date | string
    updatedAt?: Date | string
  }

  export type ReportCreateOrConnectWithoutClientInput = {
    where: ReportWhereUniqueInput
    create: XOR<ReportCreateWithoutClientInput, ReportUncheckedCreateWithoutClientInput>
  }

  export type ReportCreateManyClientInputEnvelope = {
    data: Enumerable<ReportCreateManyClientInput>
    skipDuplicates?: boolean
  }

  export type ExamCreateWithoutClientInput = {
    Medic?: MedicCreateNestedOneWithoutExamInput
    title: string
    text: string
    createdAt?: Date | string
    updatedAt?: Date | string
  }

  export type ExamUncheckedCreateWithoutClientInput = {
    id?: number
    medicId?: number | null
    title: string
    text: string
    createdAt?: Date | string
    updatedAt?: Date | string
  }

  export type ExamCreateOrConnectWithoutClientInput = {
    where: ExamWhereUniqueInput
    create: XOR<ExamCreateWithoutClientInput, ExamUncheckedCreateWithoutClientInput>
  }

  export type ExamCreateManyClientInputEnvelope = {
    data: Enumerable<ExamCreateManyClientInput>
    skipDuplicates?: boolean
  }

  export type SessionUpsertWithWhereUniqueWithoutClientInput = {
    where: SessionWhereUniqueInput
    update: XOR<SessionUpdateWithoutClientInput, SessionUncheckedUpdateWithoutClientInput>
    create: XOR<SessionCreateWithoutClientInput, SessionUncheckedCreateWithoutClientInput>
  }

  export type SessionUpdateWithWhereUniqueWithoutClientInput = {
    where: SessionWhereUniqueInput
    data: XOR<SessionUpdateWithoutClientInput, SessionUncheckedUpdateWithoutClientInput>
  }

  export type SessionUpdateManyWithWhereWithoutClientInput = {
    where: SessionScalarWhereInput
    data: XOR<SessionUpdateManyMutationInput, SessionUncheckedUpdateManyWithoutSessionInput>
  }

  export type SessionScalarWhereInput = {
    AND?: Enumerable<SessionScalarWhereInput>
    OR?: Enumerable<SessionScalarWhereInput>
    NOT?: Enumerable<SessionScalarWhereInput>
    id?: IntFilter | number
    clientId?: IntNullableFilter | number | null
    token?: StringFilter | string
    createdAt?: DateTimeFilter | Date | string
    updatedAt?: DateTimeFilter | Date | string
  }

  export type AppointementUpsertWithWhereUniqueWithoutClientInput = {
    where: AppointementWhereUniqueInput
    update: XOR<AppointementUpdateWithoutClientInput, AppointementUncheckedUpdateWithoutClientInput>
    create: XOR<AppointementCreateWithoutClientInput, AppointementUncheckedCreateWithoutClientInput>
  }

  export type AppointementUpdateWithWhereUniqueWithoutClientInput = {
    where: AppointementWhereUniqueInput
    data: XOR<AppointementUpdateWithoutClientInput, AppointementUncheckedUpdateWithoutClientInput>
  }

  export type AppointementUpdateManyWithWhereWithoutClientInput = {
    where: AppointementScalarWhereInput
    data: XOR<AppointementUpdateManyMutationInput, AppointementUncheckedUpdateManyWithoutAppointmentInput>
  }

  export type AppointementScalarWhereInput = {
    AND?: Enumerable<AppointementScalarWhereInput>
    OR?: Enumerable<AppointementScalarWhereInput>
    NOT?: Enumerable<AppointementScalarWhereInput>
    id?: IntFilter | number
    clientId?: IntNullableFilter | number | null
    medicId?: IntNullableFilter | number | null
    appointementDate?: DateTimeFilter | Date | string
    createdAt?: DateTimeFilter | Date | string
    updatedAt?: DateTimeFilter | Date | string
  }

  export type PrescriptionUpsertWithWhereUniqueWithoutClientInput = {
    where: PrescriptionWhereUniqueInput
    update: XOR<PrescriptionUpdateWithoutClientInput, PrescriptionUncheckedUpdateWithoutClientInput>
    create: XOR<PrescriptionCreateWithoutClientInput, PrescriptionUncheckedCreateWithoutClientInput>
  }

  export type PrescriptionUpdateWithWhereUniqueWithoutClientInput = {
    where: PrescriptionWhereUniqueInput
    data: XOR<PrescriptionUpdateWithoutClientInput, PrescriptionUncheckedUpdateWithoutClientInput>
  }

  export type PrescriptionUpdateManyWithWhereWithoutClientInput = {
    where: PrescriptionScalarWhereInput
    data: XOR<PrescriptionUpdateManyMutationInput, PrescriptionUncheckedUpdateManyWithoutPescriptionInput>
  }

  export type PrescriptionScalarWhereInput = {
    AND?: Enumerable<PrescriptionScalarWhereInput>
    OR?: Enumerable<PrescriptionScalarWhereInput>
    NOT?: Enumerable<PrescriptionScalarWhereInput>
    id?: IntFilter | number
    clientId?: IntNullableFilter | number | null
    medicId?: IntNullableFilter | number | null
    medications?: JsonFilter
    description?: StringFilter | string
    requestingRenewal?: BoolFilter | boolean
    expirationDate?: DateTimeFilter | Date | string
    createdAt?: DateTimeFilter | Date | string
    updatedAt?: DateTimeFilter | Date | string
  }

  export type ReportUpsertWithWhereUniqueWithoutClientInput = {
    where: ReportWhereUniqueInput
    update: XOR<ReportUpdateWithoutClientInput, ReportUncheckedUpdateWithoutClientInput>
    create: XOR<ReportCreateWithoutClientInput, ReportUncheckedCreateWithoutClientInput>
  }

  export type ReportUpdateWithWhereUniqueWithoutClientInput = {
    where: ReportWhereUniqueInput
    data: XOR<ReportUpdateWithoutClientInput, ReportUncheckedUpdateWithoutClientInput>
  }

  export type ReportUpdateManyWithWhereWithoutClientInput = {
    where: ReportScalarWhereInput
    data: XOR<ReportUpdateManyMutationInput, ReportUncheckedUpdateManyWithoutReportInput>
  }

  export type ReportScalarWhereInput = {
    AND?: Enumerable<ReportScalarWhereInput>
    OR?: Enumerable<ReportScalarWhereInput>
    NOT?: Enumerable<ReportScalarWhereInput>
    id?: IntFilter | number
    clientId?: IntNullableFilter | number | null
    medicId?: IntNullableFilter | number | null
    title?: StringFilter | string
    text?: StringFilter | string
    createdAt?: DateTimeFilter | Date | string
    updatedAt?: DateTimeFilter | Date | string
  }

  export type ExamUpsertWithWhereUniqueWithoutClientInput = {
    where: ExamWhereUniqueInput
    update: XOR<ExamUpdateWithoutClientInput, ExamUncheckedUpdateWithoutClientInput>
    create: XOR<ExamCreateWithoutClientInput, ExamUncheckedCreateWithoutClientInput>
  }

  export type ExamUpdateWithWhereUniqueWithoutClientInput = {
    where: ExamWhereUniqueInput
    data: XOR<ExamUpdateWithoutClientInput, ExamUncheckedUpdateWithoutClientInput>
  }

  export type ExamUpdateManyWithWhereWithoutClientInput = {
    where: ExamScalarWhereInput
    data: XOR<ExamUpdateManyMutationInput, ExamUncheckedUpdateManyWithoutExamInput>
  }

  export type ExamScalarWhereInput = {
    AND?: Enumerable<ExamScalarWhereInput>
    OR?: Enumerable<ExamScalarWhereInput>
    NOT?: Enumerable<ExamScalarWhereInput>
    id?: IntFilter | number
    clientId?: IntNullableFilter | number | null
    medicId?: IntNullableFilter | number | null
    title?: StringFilter | string
    text?: StringFilter | string
    createdAt?: DateTimeFilter | Date | string
    updatedAt?: DateTimeFilter | Date | string
  }

  export type ClientCreateWithoutSessionInput = {
    cpf: string
    name: string
    email?: string | null
    password: string
    adress?: string | null
    phone?: string | null
    birthday?: Date | string | null
    createdAt?: Date | string
    updatedAt?: Date | string
    Appointment?: AppointementCreateNestedManyWithoutClientInput
    Pescription?: PrescriptionCreateNestedManyWithoutClientInput
    Report?: ReportCreateNestedManyWithoutClientInput
    Exam?: ExamCreateNestedManyWithoutClientInput
  }

  export type ClientUncheckedCreateWithoutSessionInput = {
    id?: number
    cpf: string
    name: string
    email?: string | null
    password: string
    adress?: string | null
    phone?: string | null
    birthday?: Date | string | null
    createdAt?: Date | string
    updatedAt?: Date | string
    Appointment?: AppointementUncheckedCreateNestedManyWithoutClientInput
    Pescription?: PrescriptionUncheckedCreateNestedManyWithoutClientInput
    Report?: ReportUncheckedCreateNestedManyWithoutClientInput
    Exam?: ExamUncheckedCreateNestedManyWithoutClientInput
  }

  export type ClientCreateOrConnectWithoutSessionInput = {
    where: ClientWhereUniqueInput
    create: XOR<ClientCreateWithoutSessionInput, ClientUncheckedCreateWithoutSessionInput>
  }

  export type ClientUpsertWithoutSessionInput = {
    update: XOR<ClientUpdateWithoutSessionInput, ClientUncheckedUpdateWithoutSessionInput>
    create: XOR<ClientCreateWithoutSessionInput, ClientUncheckedCreateWithoutSessionInput>
  }

  export type ClientUpdateWithoutSessionInput = {
    cpf?: StringFieldUpdateOperationsInput | string
    name?: StringFieldUpdateOperationsInput | string
    email?: NullableStringFieldUpdateOperationsInput | string | null
    password?: StringFieldUpdateOperationsInput | string
    adress?: NullableStringFieldUpdateOperationsInput | string | null
    phone?: NullableStringFieldUpdateOperationsInput | string | null
    birthday?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
    Appointment?: AppointementUpdateManyWithoutClientInput
    Pescription?: PrescriptionUpdateManyWithoutClientInput
    Report?: ReportUpdateManyWithoutClientInput
    Exam?: ExamUpdateManyWithoutClientInput
  }

  export type ClientUncheckedUpdateWithoutSessionInput = {
    id?: IntFieldUpdateOperationsInput | number
    cpf?: StringFieldUpdateOperationsInput | string
    name?: StringFieldUpdateOperationsInput | string
    email?: NullableStringFieldUpdateOperationsInput | string | null
    password?: StringFieldUpdateOperationsInput | string
    adress?: NullableStringFieldUpdateOperationsInput | string | null
    phone?: NullableStringFieldUpdateOperationsInput | string | null
    birthday?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
    Appointment?: AppointementUncheckedUpdateManyWithoutClientInput
    Pescription?: PrescriptionUncheckedUpdateManyWithoutClientInput
    Report?: ReportUncheckedUpdateManyWithoutClientInput
    Exam?: ExamUncheckedUpdateManyWithoutClientInput
  }

  export type SessionReceptionistCreateWithoutReceptionistInput = {
    token: string
    createdAt?: Date | string
    updatedAt?: Date | string
  }

  export type SessionReceptionistUncheckedCreateWithoutReceptionistInput = {
    id?: number
    token: string
    createdAt?: Date | string
    updatedAt?: Date | string
  }

  export type SessionReceptionistCreateOrConnectWithoutReceptionistInput = {
    where: SessionReceptionistWhereUniqueInput
    create: XOR<SessionReceptionistCreateWithoutReceptionistInput, SessionReceptionistUncheckedCreateWithoutReceptionistInput>
  }

  export type SessionReceptionistCreateManyReceptionistInputEnvelope = {
    data: Enumerable<SessionReceptionistCreateManyReceptionistInput>
    skipDuplicates?: boolean
  }

  export type SessionReceptionistUpsertWithWhereUniqueWithoutReceptionistInput = {
    where: SessionReceptionistWhereUniqueInput
    update: XOR<SessionReceptionistUpdateWithoutReceptionistInput, SessionReceptionistUncheckedUpdateWithoutReceptionistInput>
    create: XOR<SessionReceptionistCreateWithoutReceptionistInput, SessionReceptionistUncheckedCreateWithoutReceptionistInput>
  }

  export type SessionReceptionistUpdateWithWhereUniqueWithoutReceptionistInput = {
    where: SessionReceptionistWhereUniqueInput
    data: XOR<SessionReceptionistUpdateWithoutReceptionistInput, SessionReceptionistUncheckedUpdateWithoutReceptionistInput>
  }

  export type SessionReceptionistUpdateManyWithWhereWithoutReceptionistInput = {
    where: SessionReceptionistScalarWhereInput
    data: XOR<SessionReceptionistUpdateManyMutationInput, SessionReceptionistUncheckedUpdateManyWithoutSessionReceptionistInput>
  }

  export type SessionReceptionistScalarWhereInput = {
    AND?: Enumerable<SessionReceptionistScalarWhereInput>
    OR?: Enumerable<SessionReceptionistScalarWhereInput>
    NOT?: Enumerable<SessionReceptionistScalarWhereInput>
    id?: IntFilter | number
    receptionistId?: IntNullableFilter | number | null
    token?: StringFilter | string
    createdAt?: DateTimeFilter | Date | string
    updatedAt?: DateTimeFilter | Date | string
  }

  export type ReceptionistCreateWithoutSessionReceptionistInput = {
    cpf: string
    name: string
    email?: string | null
    password: string
    adress?: string | null
    phone?: string | null
    birthday?: Date | string | null
    createdAt?: Date | string
    updatedAt?: Date | string
  }

  export type ReceptionistUncheckedCreateWithoutSessionReceptionistInput = {
    id?: number
    cpf: string
    name: string
    email?: string | null
    password: string
    adress?: string | null
    phone?: string | null
    birthday?: Date | string | null
    createdAt?: Date | string
    updatedAt?: Date | string
  }

  export type ReceptionistCreateOrConnectWithoutSessionReceptionistInput = {
    where: ReceptionistWhereUniqueInput
    create: XOR<ReceptionistCreateWithoutSessionReceptionistInput, ReceptionistUncheckedCreateWithoutSessionReceptionistInput>
  }

  export type ReceptionistUpsertWithoutSessionReceptionistInput = {
    update: XOR<ReceptionistUpdateWithoutSessionReceptionistInput, ReceptionistUncheckedUpdateWithoutSessionReceptionistInput>
    create: XOR<ReceptionistCreateWithoutSessionReceptionistInput, ReceptionistUncheckedCreateWithoutSessionReceptionistInput>
  }

  export type ReceptionistUpdateWithoutSessionReceptionistInput = {
    cpf?: StringFieldUpdateOperationsInput | string
    name?: StringFieldUpdateOperationsInput | string
    email?: NullableStringFieldUpdateOperationsInput | string | null
    password?: StringFieldUpdateOperationsInput | string
    adress?: NullableStringFieldUpdateOperationsInput | string | null
    phone?: NullableStringFieldUpdateOperationsInput | string | null
    birthday?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
  }

  export type ReceptionistUncheckedUpdateWithoutSessionReceptionistInput = {
    id?: IntFieldUpdateOperationsInput | number
    cpf?: StringFieldUpdateOperationsInput | string
    name?: StringFieldUpdateOperationsInput | string
    email?: NullableStringFieldUpdateOperationsInput | string | null
    password?: StringFieldUpdateOperationsInput | string
    adress?: NullableStringFieldUpdateOperationsInput | string | null
    phone?: NullableStringFieldUpdateOperationsInput | string | null
    birthday?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
  }

  export type SessionMedicCreateWithoutMedicInput = {
    token: string
    createdAt?: Date | string
    updatedAt?: Date | string
  }

  export type SessionMedicUncheckedCreateWithoutMedicInput = {
    id?: number
    token: string
    createdAt?: Date | string
    updatedAt?: Date | string
  }

  export type SessionMedicCreateOrConnectWithoutMedicInput = {
    where: SessionMedicWhereUniqueInput
    create: XOR<SessionMedicCreateWithoutMedicInput, SessionMedicUncheckedCreateWithoutMedicInput>
  }

  export type SessionMedicCreateManyMedicInputEnvelope = {
    data: Enumerable<SessionMedicCreateManyMedicInput>
    skipDuplicates?: boolean
  }

  export type AppointementCreateWithoutMedicInput = {
    Client?: ClientCreateNestedOneWithoutAppointmentInput
    appointementDate: Date | string
    createdAt?: Date | string
    updatedAt?: Date | string
  }

  export type AppointementUncheckedCreateWithoutMedicInput = {
    id?: number
    clientId?: number | null
    appointementDate: Date | string
    createdAt?: Date | string
    updatedAt?: Date | string
  }

  export type AppointementCreateOrConnectWithoutMedicInput = {
    where: AppointementWhereUniqueInput
    create: XOR<AppointementCreateWithoutMedicInput, AppointementUncheckedCreateWithoutMedicInput>
  }

  export type AppointementCreateManyMedicInputEnvelope = {
    data: Enumerable<AppointementCreateManyMedicInput>
    skipDuplicates?: boolean
  }

  export type PrescriptionCreateWithoutMedicInput = {
    Client?: ClientCreateNestedOneWithoutPescriptionInput
    medications: JsonNullValueInput | InputJsonValue
    description: string
    requestingRenewal: boolean
    expirationDate: Date | string
    createdAt?: Date | string
    updatedAt?: Date | string
  }

  export type PrescriptionUncheckedCreateWithoutMedicInput = {
    id?: number
    clientId?: number | null
    medications: JsonNullValueInput | InputJsonValue
    description: string
    requestingRenewal: boolean
    expirationDate: Date | string
    createdAt?: Date | string
    updatedAt?: Date | string
  }

  export type PrescriptionCreateOrConnectWithoutMedicInput = {
    where: PrescriptionWhereUniqueInput
    create: XOR<PrescriptionCreateWithoutMedicInput, PrescriptionUncheckedCreateWithoutMedicInput>
  }

  export type PrescriptionCreateManyMedicInputEnvelope = {
    data: Enumerable<PrescriptionCreateManyMedicInput>
    skipDuplicates?: boolean
  }

  export type ReportCreateWithoutMedicInput = {
    Client?: ClientCreateNestedOneWithoutReportInput
    title: string
    text: string
    createdAt?: Date | string
    updatedAt?: Date | string
  }

  export type ReportUncheckedCreateWithoutMedicInput = {
    id?: number
    clientId?: number | null
    title: string
    text: string
    createdAt?: Date | string
    updatedAt?: Date | string
  }

  export type ReportCreateOrConnectWithoutMedicInput = {
    where: ReportWhereUniqueInput
    create: XOR<ReportCreateWithoutMedicInput, ReportUncheckedCreateWithoutMedicInput>
  }

  export type ReportCreateManyMedicInputEnvelope = {
    data: Enumerable<ReportCreateManyMedicInput>
    skipDuplicates?: boolean
  }

  export type ExamCreateWithoutMedicInput = {
    Client?: ClientCreateNestedOneWithoutExamInput
    title: string
    text: string
    createdAt?: Date | string
    updatedAt?: Date | string
  }

  export type ExamUncheckedCreateWithoutMedicInput = {
    id?: number
    clientId?: number | null
    title: string
    text: string
    createdAt?: Date | string
    updatedAt?: Date | string
  }

  export type ExamCreateOrConnectWithoutMedicInput = {
    where: ExamWhereUniqueInput
    create: XOR<ExamCreateWithoutMedicInput, ExamUncheckedCreateWithoutMedicInput>
  }

  export type ExamCreateManyMedicInputEnvelope = {
    data: Enumerable<ExamCreateManyMedicInput>
    skipDuplicates?: boolean
  }

  export type SessionMedicUpsertWithWhereUniqueWithoutMedicInput = {
    where: SessionMedicWhereUniqueInput
    update: XOR<SessionMedicUpdateWithoutMedicInput, SessionMedicUncheckedUpdateWithoutMedicInput>
    create: XOR<SessionMedicCreateWithoutMedicInput, SessionMedicUncheckedCreateWithoutMedicInput>
  }

  export type SessionMedicUpdateWithWhereUniqueWithoutMedicInput = {
    where: SessionMedicWhereUniqueInput
    data: XOR<SessionMedicUpdateWithoutMedicInput, SessionMedicUncheckedUpdateWithoutMedicInput>
  }

  export type SessionMedicUpdateManyWithWhereWithoutMedicInput = {
    where: SessionMedicScalarWhereInput
    data: XOR<SessionMedicUpdateManyMutationInput, SessionMedicUncheckedUpdateManyWithoutSessionMedicInput>
  }

  export type SessionMedicScalarWhereInput = {
    AND?: Enumerable<SessionMedicScalarWhereInput>
    OR?: Enumerable<SessionMedicScalarWhereInput>
    NOT?: Enumerable<SessionMedicScalarWhereInput>
    id?: IntFilter | number
    medicId?: IntNullableFilter | number | null
    token?: StringFilter | string
    createdAt?: DateTimeFilter | Date | string
    updatedAt?: DateTimeFilter | Date | string
  }

  export type AppointementUpsertWithWhereUniqueWithoutMedicInput = {
    where: AppointementWhereUniqueInput
    update: XOR<AppointementUpdateWithoutMedicInput, AppointementUncheckedUpdateWithoutMedicInput>
    create: XOR<AppointementCreateWithoutMedicInput, AppointementUncheckedCreateWithoutMedicInput>
  }

  export type AppointementUpdateWithWhereUniqueWithoutMedicInput = {
    where: AppointementWhereUniqueInput
    data: XOR<AppointementUpdateWithoutMedicInput, AppointementUncheckedUpdateWithoutMedicInput>
  }

  export type AppointementUpdateManyWithWhereWithoutMedicInput = {
    where: AppointementScalarWhereInput
    data: XOR<AppointementUpdateManyMutationInput, AppointementUncheckedUpdateManyWithoutAppointmentInput>
  }

  export type PrescriptionUpsertWithWhereUniqueWithoutMedicInput = {
    where: PrescriptionWhereUniqueInput
    update: XOR<PrescriptionUpdateWithoutMedicInput, PrescriptionUncheckedUpdateWithoutMedicInput>
    create: XOR<PrescriptionCreateWithoutMedicInput, PrescriptionUncheckedCreateWithoutMedicInput>
  }

  export type PrescriptionUpdateWithWhereUniqueWithoutMedicInput = {
    where: PrescriptionWhereUniqueInput
    data: XOR<PrescriptionUpdateWithoutMedicInput, PrescriptionUncheckedUpdateWithoutMedicInput>
  }

  export type PrescriptionUpdateManyWithWhereWithoutMedicInput = {
    where: PrescriptionScalarWhereInput
    data: XOR<PrescriptionUpdateManyMutationInput, PrescriptionUncheckedUpdateManyWithoutPescriptionInput>
  }

  export type ReportUpsertWithWhereUniqueWithoutMedicInput = {
    where: ReportWhereUniqueInput
    update: XOR<ReportUpdateWithoutMedicInput, ReportUncheckedUpdateWithoutMedicInput>
    create: XOR<ReportCreateWithoutMedicInput, ReportUncheckedCreateWithoutMedicInput>
  }

  export type ReportUpdateWithWhereUniqueWithoutMedicInput = {
    where: ReportWhereUniqueInput
    data: XOR<ReportUpdateWithoutMedicInput, ReportUncheckedUpdateWithoutMedicInput>
  }

  export type ReportUpdateManyWithWhereWithoutMedicInput = {
    where: ReportScalarWhereInput
    data: XOR<ReportUpdateManyMutationInput, ReportUncheckedUpdateManyWithoutReportInput>
  }

  export type ExamUpsertWithWhereUniqueWithoutMedicInput = {
    where: ExamWhereUniqueInput
    update: XOR<ExamUpdateWithoutMedicInput, ExamUncheckedUpdateWithoutMedicInput>
    create: XOR<ExamCreateWithoutMedicInput, ExamUncheckedCreateWithoutMedicInput>
  }

  export type ExamUpdateWithWhereUniqueWithoutMedicInput = {
    where: ExamWhereUniqueInput
    data: XOR<ExamUpdateWithoutMedicInput, ExamUncheckedUpdateWithoutMedicInput>
  }

  export type ExamUpdateManyWithWhereWithoutMedicInput = {
    where: ExamScalarWhereInput
    data: XOR<ExamUpdateManyMutationInput, ExamUncheckedUpdateManyWithoutExamInput>
  }

  export type ClientCreateWithoutAppointmentInput = {
    cpf: string
    name: string
    email?: string | null
    password: string
    adress?: string | null
    phone?: string | null
    birthday?: Date | string | null
    createdAt?: Date | string
    updatedAt?: Date | string
    Session?: SessionCreateNestedManyWithoutClientInput
    Pescription?: PrescriptionCreateNestedManyWithoutClientInput
    Report?: ReportCreateNestedManyWithoutClientInput
    Exam?: ExamCreateNestedManyWithoutClientInput
  }

  export type ClientUncheckedCreateWithoutAppointmentInput = {
    id?: number
    cpf: string
    name: string
    email?: string | null
    password: string
    adress?: string | null
    phone?: string | null
    birthday?: Date | string | null
    createdAt?: Date | string
    updatedAt?: Date | string
    Session?: SessionUncheckedCreateNestedManyWithoutClientInput
    Pescription?: PrescriptionUncheckedCreateNestedManyWithoutClientInput
    Report?: ReportUncheckedCreateNestedManyWithoutClientInput
    Exam?: ExamUncheckedCreateNestedManyWithoutClientInput
  }

  export type ClientCreateOrConnectWithoutAppointmentInput = {
    where: ClientWhereUniqueInput
    create: XOR<ClientCreateWithoutAppointmentInput, ClientUncheckedCreateWithoutAppointmentInput>
  }

  export type MedicCreateWithoutAppointmentInput = {
    cpf: string
    name: string
    email?: string | null
    password: string
    adress?: string | null
    phone?: string | null
    birthday?: Date | string | null
    specialty?: string | null
    createdAt?: Date | string
    updatedAt?: Date | string
    SessionMedic?: SessionMedicCreateNestedManyWithoutMedicInput
    Pescription?: PrescriptionCreateNestedManyWithoutMedicInput
    Report?: ReportCreateNestedManyWithoutMedicInput
    Exam?: ExamCreateNestedManyWithoutMedicInput
  }

  export type MedicUncheckedCreateWithoutAppointmentInput = {
    id?: number
    cpf: string
    name: string
    email?: string | null
    password: string
    adress?: string | null
    phone?: string | null
    birthday?: Date | string | null
    specialty?: string | null
    createdAt?: Date | string
    updatedAt?: Date | string
    SessionMedic?: SessionMedicUncheckedCreateNestedManyWithoutMedicInput
    Pescription?: PrescriptionUncheckedCreateNestedManyWithoutMedicInput
    Report?: ReportUncheckedCreateNestedManyWithoutMedicInput
    Exam?: ExamUncheckedCreateNestedManyWithoutMedicInput
  }

  export type MedicCreateOrConnectWithoutAppointmentInput = {
    where: MedicWhereUniqueInput
    create: XOR<MedicCreateWithoutAppointmentInput, MedicUncheckedCreateWithoutAppointmentInput>
  }

  export type ClientUpsertWithoutAppointmentInput = {
    update: XOR<ClientUpdateWithoutAppointmentInput, ClientUncheckedUpdateWithoutAppointmentInput>
    create: XOR<ClientCreateWithoutAppointmentInput, ClientUncheckedCreateWithoutAppointmentInput>
  }

  export type ClientUpdateWithoutAppointmentInput = {
    cpf?: StringFieldUpdateOperationsInput | string
    name?: StringFieldUpdateOperationsInput | string
    email?: NullableStringFieldUpdateOperationsInput | string | null
    password?: StringFieldUpdateOperationsInput | string
    adress?: NullableStringFieldUpdateOperationsInput | string | null
    phone?: NullableStringFieldUpdateOperationsInput | string | null
    birthday?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
    Session?: SessionUpdateManyWithoutClientInput
    Pescription?: PrescriptionUpdateManyWithoutClientInput
    Report?: ReportUpdateManyWithoutClientInput
    Exam?: ExamUpdateManyWithoutClientInput
  }

  export type ClientUncheckedUpdateWithoutAppointmentInput = {
    id?: IntFieldUpdateOperationsInput | number
    cpf?: StringFieldUpdateOperationsInput | string
    name?: StringFieldUpdateOperationsInput | string
    email?: NullableStringFieldUpdateOperationsInput | string | null
    password?: StringFieldUpdateOperationsInput | string
    adress?: NullableStringFieldUpdateOperationsInput | string | null
    phone?: NullableStringFieldUpdateOperationsInput | string | null
    birthday?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
    Session?: SessionUncheckedUpdateManyWithoutClientInput
    Pescription?: PrescriptionUncheckedUpdateManyWithoutClientInput
    Report?: ReportUncheckedUpdateManyWithoutClientInput
    Exam?: ExamUncheckedUpdateManyWithoutClientInput
  }

  export type MedicUpsertWithoutAppointmentInput = {
    update: XOR<MedicUpdateWithoutAppointmentInput, MedicUncheckedUpdateWithoutAppointmentInput>
    create: XOR<MedicCreateWithoutAppointmentInput, MedicUncheckedCreateWithoutAppointmentInput>
  }

  export type MedicUpdateWithoutAppointmentInput = {
    cpf?: StringFieldUpdateOperationsInput | string
    name?: StringFieldUpdateOperationsInput | string
    email?: NullableStringFieldUpdateOperationsInput | string | null
    password?: StringFieldUpdateOperationsInput | string
    adress?: NullableStringFieldUpdateOperationsInput | string | null
    phone?: NullableStringFieldUpdateOperationsInput | string | null
    birthday?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    specialty?: NullableStringFieldUpdateOperationsInput | string | null
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
    SessionMedic?: SessionMedicUpdateManyWithoutMedicInput
    Pescription?: PrescriptionUpdateManyWithoutMedicInput
    Report?: ReportUpdateManyWithoutMedicInput
    Exam?: ExamUpdateManyWithoutMedicInput
  }

  export type MedicUncheckedUpdateWithoutAppointmentInput = {
    id?: IntFieldUpdateOperationsInput | number
    cpf?: StringFieldUpdateOperationsInput | string
    name?: StringFieldUpdateOperationsInput | string
    email?: NullableStringFieldUpdateOperationsInput | string | null
    password?: StringFieldUpdateOperationsInput | string
    adress?: NullableStringFieldUpdateOperationsInput | string | null
    phone?: NullableStringFieldUpdateOperationsInput | string | null
    birthday?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    specialty?: NullableStringFieldUpdateOperationsInput | string | null
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
    SessionMedic?: SessionMedicUncheckedUpdateManyWithoutMedicInput
    Pescription?: PrescriptionUncheckedUpdateManyWithoutMedicInput
    Report?: ReportUncheckedUpdateManyWithoutMedicInput
    Exam?: ExamUncheckedUpdateManyWithoutMedicInput
  }

  export type ClientCreateWithoutPescriptionInput = {
    cpf: string
    name: string
    email?: string | null
    password: string
    adress?: string | null
    phone?: string | null
    birthday?: Date | string | null
    createdAt?: Date | string
    updatedAt?: Date | string
    Session?: SessionCreateNestedManyWithoutClientInput
    Appointment?: AppointementCreateNestedManyWithoutClientInput
    Report?: ReportCreateNestedManyWithoutClientInput
    Exam?: ExamCreateNestedManyWithoutClientInput
  }

  export type ClientUncheckedCreateWithoutPescriptionInput = {
    id?: number
    cpf: string
    name: string
    email?: string | null
    password: string
    adress?: string | null
    phone?: string | null
    birthday?: Date | string | null
    createdAt?: Date | string
    updatedAt?: Date | string
    Session?: SessionUncheckedCreateNestedManyWithoutClientInput
    Appointment?: AppointementUncheckedCreateNestedManyWithoutClientInput
    Report?: ReportUncheckedCreateNestedManyWithoutClientInput
    Exam?: ExamUncheckedCreateNestedManyWithoutClientInput
  }

  export type ClientCreateOrConnectWithoutPescriptionInput = {
    where: ClientWhereUniqueInput
    create: XOR<ClientCreateWithoutPescriptionInput, ClientUncheckedCreateWithoutPescriptionInput>
  }

  export type MedicCreateWithoutPescriptionInput = {
    cpf: string
    name: string
    email?: string | null
    password: string
    adress?: string | null
    phone?: string | null
    birthday?: Date | string | null
    specialty?: string | null
    createdAt?: Date | string
    updatedAt?: Date | string
    SessionMedic?: SessionMedicCreateNestedManyWithoutMedicInput
    Appointment?: AppointementCreateNestedManyWithoutMedicInput
    Report?: ReportCreateNestedManyWithoutMedicInput
    Exam?: ExamCreateNestedManyWithoutMedicInput
  }

  export type MedicUncheckedCreateWithoutPescriptionInput = {
    id?: number
    cpf: string
    name: string
    email?: string | null
    password: string
    adress?: string | null
    phone?: string | null
    birthday?: Date | string | null
    specialty?: string | null
    createdAt?: Date | string
    updatedAt?: Date | string
    SessionMedic?: SessionMedicUncheckedCreateNestedManyWithoutMedicInput
    Appointment?: AppointementUncheckedCreateNestedManyWithoutMedicInput
    Report?: ReportUncheckedCreateNestedManyWithoutMedicInput
    Exam?: ExamUncheckedCreateNestedManyWithoutMedicInput
  }

  export type MedicCreateOrConnectWithoutPescriptionInput = {
    where: MedicWhereUniqueInput
    create: XOR<MedicCreateWithoutPescriptionInput, MedicUncheckedCreateWithoutPescriptionInput>
  }

  export type ClientUpsertWithoutPescriptionInput = {
    update: XOR<ClientUpdateWithoutPescriptionInput, ClientUncheckedUpdateWithoutPescriptionInput>
    create: XOR<ClientCreateWithoutPescriptionInput, ClientUncheckedCreateWithoutPescriptionInput>
  }

  export type ClientUpdateWithoutPescriptionInput = {
    cpf?: StringFieldUpdateOperationsInput | string
    name?: StringFieldUpdateOperationsInput | string
    email?: NullableStringFieldUpdateOperationsInput | string | null
    password?: StringFieldUpdateOperationsInput | string
    adress?: NullableStringFieldUpdateOperationsInput | string | null
    phone?: NullableStringFieldUpdateOperationsInput | string | null
    birthday?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
    Session?: SessionUpdateManyWithoutClientInput
    Appointment?: AppointementUpdateManyWithoutClientInput
    Report?: ReportUpdateManyWithoutClientInput
    Exam?: ExamUpdateManyWithoutClientInput
  }

  export type ClientUncheckedUpdateWithoutPescriptionInput = {
    id?: IntFieldUpdateOperationsInput | number
    cpf?: StringFieldUpdateOperationsInput | string
    name?: StringFieldUpdateOperationsInput | string
    email?: NullableStringFieldUpdateOperationsInput | string | null
    password?: StringFieldUpdateOperationsInput | string
    adress?: NullableStringFieldUpdateOperationsInput | string | null
    phone?: NullableStringFieldUpdateOperationsInput | string | null
    birthday?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
    Session?: SessionUncheckedUpdateManyWithoutClientInput
    Appointment?: AppointementUncheckedUpdateManyWithoutClientInput
    Report?: ReportUncheckedUpdateManyWithoutClientInput
    Exam?: ExamUncheckedUpdateManyWithoutClientInput
  }

  export type MedicUpsertWithoutPescriptionInput = {
    update: XOR<MedicUpdateWithoutPescriptionInput, MedicUncheckedUpdateWithoutPescriptionInput>
    create: XOR<MedicCreateWithoutPescriptionInput, MedicUncheckedCreateWithoutPescriptionInput>
  }

  export type MedicUpdateWithoutPescriptionInput = {
    cpf?: StringFieldUpdateOperationsInput | string
    name?: StringFieldUpdateOperationsInput | string
    email?: NullableStringFieldUpdateOperationsInput | string | null
    password?: StringFieldUpdateOperationsInput | string
    adress?: NullableStringFieldUpdateOperationsInput | string | null
    phone?: NullableStringFieldUpdateOperationsInput | string | null
    birthday?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    specialty?: NullableStringFieldUpdateOperationsInput | string | null
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
    SessionMedic?: SessionMedicUpdateManyWithoutMedicInput
    Appointment?: AppointementUpdateManyWithoutMedicInput
    Report?: ReportUpdateManyWithoutMedicInput
    Exam?: ExamUpdateManyWithoutMedicInput
  }

  export type MedicUncheckedUpdateWithoutPescriptionInput = {
    id?: IntFieldUpdateOperationsInput | number
    cpf?: StringFieldUpdateOperationsInput | string
    name?: StringFieldUpdateOperationsInput | string
    email?: NullableStringFieldUpdateOperationsInput | string | null
    password?: StringFieldUpdateOperationsInput | string
    adress?: NullableStringFieldUpdateOperationsInput | string | null
    phone?: NullableStringFieldUpdateOperationsInput | string | null
    birthday?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    specialty?: NullableStringFieldUpdateOperationsInput | string | null
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
    SessionMedic?: SessionMedicUncheckedUpdateManyWithoutMedicInput
    Appointment?: AppointementUncheckedUpdateManyWithoutMedicInput
    Report?: ReportUncheckedUpdateManyWithoutMedicInput
    Exam?: ExamUncheckedUpdateManyWithoutMedicInput
  }

  export type ClientCreateWithoutReportInput = {
    cpf: string
    name: string
    email?: string | null
    password: string
    adress?: string | null
    phone?: string | null
    birthday?: Date | string | null
    createdAt?: Date | string
    updatedAt?: Date | string
    Session?: SessionCreateNestedManyWithoutClientInput
    Appointment?: AppointementCreateNestedManyWithoutClientInput
    Pescription?: PrescriptionCreateNestedManyWithoutClientInput
    Exam?: ExamCreateNestedManyWithoutClientInput
  }

  export type ClientUncheckedCreateWithoutReportInput = {
    id?: number
    cpf: string
    name: string
    email?: string | null
    password: string
    adress?: string | null
    phone?: string | null
    birthday?: Date | string | null
    createdAt?: Date | string
    updatedAt?: Date | string
    Session?: SessionUncheckedCreateNestedManyWithoutClientInput
    Appointment?: AppointementUncheckedCreateNestedManyWithoutClientInput
    Pescription?: PrescriptionUncheckedCreateNestedManyWithoutClientInput
    Exam?: ExamUncheckedCreateNestedManyWithoutClientInput
  }

  export type ClientCreateOrConnectWithoutReportInput = {
    where: ClientWhereUniqueInput
    create: XOR<ClientCreateWithoutReportInput, ClientUncheckedCreateWithoutReportInput>
  }

  export type MedicCreateWithoutReportInput = {
    cpf: string
    name: string
    email?: string | null
    password: string
    adress?: string | null
    phone?: string | null
    birthday?: Date | string | null
    specialty?: string | null
    createdAt?: Date | string
    updatedAt?: Date | string
    SessionMedic?: SessionMedicCreateNestedManyWithoutMedicInput
    Appointment?: AppointementCreateNestedManyWithoutMedicInput
    Pescription?: PrescriptionCreateNestedManyWithoutMedicInput
    Exam?: ExamCreateNestedManyWithoutMedicInput
  }

  export type MedicUncheckedCreateWithoutReportInput = {
    id?: number
    cpf: string
    name: string
    email?: string | null
    password: string
    adress?: string | null
    phone?: string | null
    birthday?: Date | string | null
    specialty?: string | null
    createdAt?: Date | string
    updatedAt?: Date | string
    SessionMedic?: SessionMedicUncheckedCreateNestedManyWithoutMedicInput
    Appointment?: AppointementUncheckedCreateNestedManyWithoutMedicInput
    Pescription?: PrescriptionUncheckedCreateNestedManyWithoutMedicInput
    Exam?: ExamUncheckedCreateNestedManyWithoutMedicInput
  }

  export type MedicCreateOrConnectWithoutReportInput = {
    where: MedicWhereUniqueInput
    create: XOR<MedicCreateWithoutReportInput, MedicUncheckedCreateWithoutReportInput>
  }

  export type ClientUpsertWithoutReportInput = {
    update: XOR<ClientUpdateWithoutReportInput, ClientUncheckedUpdateWithoutReportInput>
    create: XOR<ClientCreateWithoutReportInput, ClientUncheckedCreateWithoutReportInput>
  }

  export type ClientUpdateWithoutReportInput = {
    cpf?: StringFieldUpdateOperationsInput | string
    name?: StringFieldUpdateOperationsInput | string
    email?: NullableStringFieldUpdateOperationsInput | string | null
    password?: StringFieldUpdateOperationsInput | string
    adress?: NullableStringFieldUpdateOperationsInput | string | null
    phone?: NullableStringFieldUpdateOperationsInput | string | null
    birthday?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
    Session?: SessionUpdateManyWithoutClientInput
    Appointment?: AppointementUpdateManyWithoutClientInput
    Pescription?: PrescriptionUpdateManyWithoutClientInput
    Exam?: ExamUpdateManyWithoutClientInput
  }

  export type ClientUncheckedUpdateWithoutReportInput = {
    id?: IntFieldUpdateOperationsInput | number
    cpf?: StringFieldUpdateOperationsInput | string
    name?: StringFieldUpdateOperationsInput | string
    email?: NullableStringFieldUpdateOperationsInput | string | null
    password?: StringFieldUpdateOperationsInput | string
    adress?: NullableStringFieldUpdateOperationsInput | string | null
    phone?: NullableStringFieldUpdateOperationsInput | string | null
    birthday?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
    Session?: SessionUncheckedUpdateManyWithoutClientInput
    Appointment?: AppointementUncheckedUpdateManyWithoutClientInput
    Pescription?: PrescriptionUncheckedUpdateManyWithoutClientInput
    Exam?: ExamUncheckedUpdateManyWithoutClientInput
  }

  export type MedicUpsertWithoutReportInput = {
    update: XOR<MedicUpdateWithoutReportInput, MedicUncheckedUpdateWithoutReportInput>
    create: XOR<MedicCreateWithoutReportInput, MedicUncheckedCreateWithoutReportInput>
  }

  export type MedicUpdateWithoutReportInput = {
    cpf?: StringFieldUpdateOperationsInput | string
    name?: StringFieldUpdateOperationsInput | string
    email?: NullableStringFieldUpdateOperationsInput | string | null
    password?: StringFieldUpdateOperationsInput | string
    adress?: NullableStringFieldUpdateOperationsInput | string | null
    phone?: NullableStringFieldUpdateOperationsInput | string | null
    birthday?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    specialty?: NullableStringFieldUpdateOperationsInput | string | null
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
    SessionMedic?: SessionMedicUpdateManyWithoutMedicInput
    Appointment?: AppointementUpdateManyWithoutMedicInput
    Pescription?: PrescriptionUpdateManyWithoutMedicInput
    Exam?: ExamUpdateManyWithoutMedicInput
  }

  export type MedicUncheckedUpdateWithoutReportInput = {
    id?: IntFieldUpdateOperationsInput | number
    cpf?: StringFieldUpdateOperationsInput | string
    name?: StringFieldUpdateOperationsInput | string
    email?: NullableStringFieldUpdateOperationsInput | string | null
    password?: StringFieldUpdateOperationsInput | string
    adress?: NullableStringFieldUpdateOperationsInput | string | null
    phone?: NullableStringFieldUpdateOperationsInput | string | null
    birthday?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    specialty?: NullableStringFieldUpdateOperationsInput | string | null
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
    SessionMedic?: SessionMedicUncheckedUpdateManyWithoutMedicInput
    Appointment?: AppointementUncheckedUpdateManyWithoutMedicInput
    Pescription?: PrescriptionUncheckedUpdateManyWithoutMedicInput
    Exam?: ExamUncheckedUpdateManyWithoutMedicInput
  }

  export type ClientCreateWithoutExamInput = {
    cpf: string
    name: string
    email?: string | null
    password: string
    adress?: string | null
    phone?: string | null
    birthday?: Date | string | null
    createdAt?: Date | string
    updatedAt?: Date | string
    Session?: SessionCreateNestedManyWithoutClientInput
    Appointment?: AppointementCreateNestedManyWithoutClientInput
    Pescription?: PrescriptionCreateNestedManyWithoutClientInput
    Report?: ReportCreateNestedManyWithoutClientInput
  }

  export type ClientUncheckedCreateWithoutExamInput = {
    id?: number
    cpf: string
    name: string
    email?: string | null
    password: string
    adress?: string | null
    phone?: string | null
    birthday?: Date | string | null
    createdAt?: Date | string
    updatedAt?: Date | string
    Session?: SessionUncheckedCreateNestedManyWithoutClientInput
    Appointment?: AppointementUncheckedCreateNestedManyWithoutClientInput
    Pescription?: PrescriptionUncheckedCreateNestedManyWithoutClientInput
    Report?: ReportUncheckedCreateNestedManyWithoutClientInput
  }

  export type ClientCreateOrConnectWithoutExamInput = {
    where: ClientWhereUniqueInput
    create: XOR<ClientCreateWithoutExamInput, ClientUncheckedCreateWithoutExamInput>
  }

  export type MedicCreateWithoutExamInput = {
    cpf: string
    name: string
    email?: string | null
    password: string
    adress?: string | null
    phone?: string | null
    birthday?: Date | string | null
    specialty?: string | null
    createdAt?: Date | string
    updatedAt?: Date | string
    SessionMedic?: SessionMedicCreateNestedManyWithoutMedicInput
    Appointment?: AppointementCreateNestedManyWithoutMedicInput
    Pescription?: PrescriptionCreateNestedManyWithoutMedicInput
    Report?: ReportCreateNestedManyWithoutMedicInput
  }

  export type MedicUncheckedCreateWithoutExamInput = {
    id?: number
    cpf: string
    name: string
    email?: string | null
    password: string
    adress?: string | null
    phone?: string | null
    birthday?: Date | string | null
    specialty?: string | null
    createdAt?: Date | string
    updatedAt?: Date | string
    SessionMedic?: SessionMedicUncheckedCreateNestedManyWithoutMedicInput
    Appointment?: AppointementUncheckedCreateNestedManyWithoutMedicInput
    Pescription?: PrescriptionUncheckedCreateNestedManyWithoutMedicInput
    Report?: ReportUncheckedCreateNestedManyWithoutMedicInput
  }

  export type MedicCreateOrConnectWithoutExamInput = {
    where: MedicWhereUniqueInput
    create: XOR<MedicCreateWithoutExamInput, MedicUncheckedCreateWithoutExamInput>
  }

  export type ClientUpsertWithoutExamInput = {
    update: XOR<ClientUpdateWithoutExamInput, ClientUncheckedUpdateWithoutExamInput>
    create: XOR<ClientCreateWithoutExamInput, ClientUncheckedCreateWithoutExamInput>
  }

  export type ClientUpdateWithoutExamInput = {
    cpf?: StringFieldUpdateOperationsInput | string
    name?: StringFieldUpdateOperationsInput | string
    email?: NullableStringFieldUpdateOperationsInput | string | null
    password?: StringFieldUpdateOperationsInput | string
    adress?: NullableStringFieldUpdateOperationsInput | string | null
    phone?: NullableStringFieldUpdateOperationsInput | string | null
    birthday?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
    Session?: SessionUpdateManyWithoutClientInput
    Appointment?: AppointementUpdateManyWithoutClientInput
    Pescription?: PrescriptionUpdateManyWithoutClientInput
    Report?: ReportUpdateManyWithoutClientInput
  }

  export type ClientUncheckedUpdateWithoutExamInput = {
    id?: IntFieldUpdateOperationsInput | number
    cpf?: StringFieldUpdateOperationsInput | string
    name?: StringFieldUpdateOperationsInput | string
    email?: NullableStringFieldUpdateOperationsInput | string | null
    password?: StringFieldUpdateOperationsInput | string
    adress?: NullableStringFieldUpdateOperationsInput | string | null
    phone?: NullableStringFieldUpdateOperationsInput | string | null
    birthday?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
    Session?: SessionUncheckedUpdateManyWithoutClientInput
    Appointment?: AppointementUncheckedUpdateManyWithoutClientInput
    Pescription?: PrescriptionUncheckedUpdateManyWithoutClientInput
    Report?: ReportUncheckedUpdateManyWithoutClientInput
  }

  export type MedicUpsertWithoutExamInput = {
    update: XOR<MedicUpdateWithoutExamInput, MedicUncheckedUpdateWithoutExamInput>
    create: XOR<MedicCreateWithoutExamInput, MedicUncheckedCreateWithoutExamInput>
  }

  export type MedicUpdateWithoutExamInput = {
    cpf?: StringFieldUpdateOperationsInput | string
    name?: StringFieldUpdateOperationsInput | string
    email?: NullableStringFieldUpdateOperationsInput | string | null
    password?: StringFieldUpdateOperationsInput | string
    adress?: NullableStringFieldUpdateOperationsInput | string | null
    phone?: NullableStringFieldUpdateOperationsInput | string | null
    birthday?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    specialty?: NullableStringFieldUpdateOperationsInput | string | null
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
    SessionMedic?: SessionMedicUpdateManyWithoutMedicInput
    Appointment?: AppointementUpdateManyWithoutMedicInput
    Pescription?: PrescriptionUpdateManyWithoutMedicInput
    Report?: ReportUpdateManyWithoutMedicInput
  }

  export type MedicUncheckedUpdateWithoutExamInput = {
    id?: IntFieldUpdateOperationsInput | number
    cpf?: StringFieldUpdateOperationsInput | string
    name?: StringFieldUpdateOperationsInput | string
    email?: NullableStringFieldUpdateOperationsInput | string | null
    password?: StringFieldUpdateOperationsInput | string
    adress?: NullableStringFieldUpdateOperationsInput | string | null
    phone?: NullableStringFieldUpdateOperationsInput | string | null
    birthday?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    specialty?: NullableStringFieldUpdateOperationsInput | string | null
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
    SessionMedic?: SessionMedicUncheckedUpdateManyWithoutMedicInput
    Appointment?: AppointementUncheckedUpdateManyWithoutMedicInput
    Pescription?: PrescriptionUncheckedUpdateManyWithoutMedicInput
    Report?: ReportUncheckedUpdateManyWithoutMedicInput
  }

  export type MedicCreateWithoutSessionMedicInput = {
    cpf: string
    name: string
    email?: string | null
    password: string
    adress?: string | null
    phone?: string | null
    birthday?: Date | string | null
    specialty?: string | null
    createdAt?: Date | string
    updatedAt?: Date | string
    Appointment?: AppointementCreateNestedManyWithoutMedicInput
    Pescription?: PrescriptionCreateNestedManyWithoutMedicInput
    Report?: ReportCreateNestedManyWithoutMedicInput
    Exam?: ExamCreateNestedManyWithoutMedicInput
  }

  export type MedicUncheckedCreateWithoutSessionMedicInput = {
    id?: number
    cpf: string
    name: string
    email?: string | null
    password: string
    adress?: string | null
    phone?: string | null
    birthday?: Date | string | null
    specialty?: string | null
    createdAt?: Date | string
    updatedAt?: Date | string
    Appointment?: AppointementUncheckedCreateNestedManyWithoutMedicInput
    Pescription?: PrescriptionUncheckedCreateNestedManyWithoutMedicInput
    Report?: ReportUncheckedCreateNestedManyWithoutMedicInput
    Exam?: ExamUncheckedCreateNestedManyWithoutMedicInput
  }

  export type MedicCreateOrConnectWithoutSessionMedicInput = {
    where: MedicWhereUniqueInput
    create: XOR<MedicCreateWithoutSessionMedicInput, MedicUncheckedCreateWithoutSessionMedicInput>
  }

  export type MedicUpsertWithoutSessionMedicInput = {
    update: XOR<MedicUpdateWithoutSessionMedicInput, MedicUncheckedUpdateWithoutSessionMedicInput>
    create: XOR<MedicCreateWithoutSessionMedicInput, MedicUncheckedCreateWithoutSessionMedicInput>
  }

  export type MedicUpdateWithoutSessionMedicInput = {
    cpf?: StringFieldUpdateOperationsInput | string
    name?: StringFieldUpdateOperationsInput | string
    email?: NullableStringFieldUpdateOperationsInput | string | null
    password?: StringFieldUpdateOperationsInput | string
    adress?: NullableStringFieldUpdateOperationsInput | string | null
    phone?: NullableStringFieldUpdateOperationsInput | string | null
    birthday?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    specialty?: NullableStringFieldUpdateOperationsInput | string | null
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
    Appointment?: AppointementUpdateManyWithoutMedicInput
    Pescription?: PrescriptionUpdateManyWithoutMedicInput
    Report?: ReportUpdateManyWithoutMedicInput
    Exam?: ExamUpdateManyWithoutMedicInput
  }

  export type MedicUncheckedUpdateWithoutSessionMedicInput = {
    id?: IntFieldUpdateOperationsInput | number
    cpf?: StringFieldUpdateOperationsInput | string
    name?: StringFieldUpdateOperationsInput | string
    email?: NullableStringFieldUpdateOperationsInput | string | null
    password?: StringFieldUpdateOperationsInput | string
    adress?: NullableStringFieldUpdateOperationsInput | string | null
    phone?: NullableStringFieldUpdateOperationsInput | string | null
    birthday?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    specialty?: NullableStringFieldUpdateOperationsInput | string | null
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
    Appointment?: AppointementUncheckedUpdateManyWithoutMedicInput
    Pescription?: PrescriptionUncheckedUpdateManyWithoutMedicInput
    Report?: ReportUncheckedUpdateManyWithoutMedicInput
    Exam?: ExamUncheckedUpdateManyWithoutMedicInput
  }

  export type SessionCreateManyClientInput = {
    id?: number
    token: string
    createdAt?: Date | string
    updatedAt?: Date | string
  }

  export type AppointementCreateManyClientInput = {
    id?: number
    medicId?: number | null
    appointementDate: Date | string
    createdAt?: Date | string
    updatedAt?: Date | string
  }

  export type PrescriptionCreateManyClientInput = {
    id?: number
    medicId?: number | null
    medications: JsonNullValueInput | InputJsonValue
    description: string
    requestingRenewal: boolean
    expirationDate: Date | string
    createdAt?: Date | string
    updatedAt?: Date | string
  }

  export type ReportCreateManyClientInput = {
    id?: number
    medicId?: number | null
    title: string
    text: string
    createdAt?: Date | string
    updatedAt?: Date | string
  }

  export type ExamCreateManyClientInput = {
    id?: number
    medicId?: number | null
    title: string
    text: string
    createdAt?: Date | string
    updatedAt?: Date | string
  }

  export type SessionUpdateWithoutClientInput = {
    token?: StringFieldUpdateOperationsInput | string
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
  }

  export type SessionUncheckedUpdateWithoutClientInput = {
    id?: IntFieldUpdateOperationsInput | number
    token?: StringFieldUpdateOperationsInput | string
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
  }

  export type SessionUncheckedUpdateManyWithoutSessionInput = {
    id?: IntFieldUpdateOperationsInput | number
    token?: StringFieldUpdateOperationsInput | string
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
  }

  export type AppointementUpdateWithoutClientInput = {
    Medic?: MedicUpdateOneWithoutAppointmentInput
    appointementDate?: DateTimeFieldUpdateOperationsInput | Date | string
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
  }

  export type AppointementUncheckedUpdateWithoutClientInput = {
    id?: IntFieldUpdateOperationsInput | number
    medicId?: NullableIntFieldUpdateOperationsInput | number | null
    appointementDate?: DateTimeFieldUpdateOperationsInput | Date | string
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
  }

  export type AppointementUncheckedUpdateManyWithoutAppointmentInput = {
    id?: IntFieldUpdateOperationsInput | number
    medicId?: NullableIntFieldUpdateOperationsInput | number | null
    appointementDate?: DateTimeFieldUpdateOperationsInput | Date | string
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
  }

  export type PrescriptionUpdateWithoutClientInput = {
    Medic?: MedicUpdateOneWithoutPescriptionInput
    medications?: JsonNullValueInput | InputJsonValue
    description?: StringFieldUpdateOperationsInput | string
    requestingRenewal?: BoolFieldUpdateOperationsInput | boolean
    expirationDate?: DateTimeFieldUpdateOperationsInput | Date | string
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
  }

  export type PrescriptionUncheckedUpdateWithoutClientInput = {
    id?: IntFieldUpdateOperationsInput | number
    medicId?: NullableIntFieldUpdateOperationsInput | number | null
    medications?: JsonNullValueInput | InputJsonValue
    description?: StringFieldUpdateOperationsInput | string
    requestingRenewal?: BoolFieldUpdateOperationsInput | boolean
    expirationDate?: DateTimeFieldUpdateOperationsInput | Date | string
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
  }

  export type PrescriptionUncheckedUpdateManyWithoutPescriptionInput = {
    id?: IntFieldUpdateOperationsInput | number
    medicId?: NullableIntFieldUpdateOperationsInput | number | null
    medications?: JsonNullValueInput | InputJsonValue
    description?: StringFieldUpdateOperationsInput | string
    requestingRenewal?: BoolFieldUpdateOperationsInput | boolean
    expirationDate?: DateTimeFieldUpdateOperationsInput | Date | string
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
  }

  export type ReportUpdateWithoutClientInput = {
    Medic?: MedicUpdateOneWithoutReportInput
    title?: StringFieldUpdateOperationsInput | string
    text?: StringFieldUpdateOperationsInput | string
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
  }

  export type ReportUncheckedUpdateWithoutClientInput = {
    id?: IntFieldUpdateOperationsInput | number
    medicId?: NullableIntFieldUpdateOperationsInput | number | null
    title?: StringFieldUpdateOperationsInput | string
    text?: StringFieldUpdateOperationsInput | string
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
  }

  export type ReportUncheckedUpdateManyWithoutReportInput = {
    id?: IntFieldUpdateOperationsInput | number
    medicId?: NullableIntFieldUpdateOperationsInput | number | null
    title?: StringFieldUpdateOperationsInput | string
    text?: StringFieldUpdateOperationsInput | string
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
  }

  export type ExamUpdateWithoutClientInput = {
    Medic?: MedicUpdateOneWithoutExamInput
    title?: StringFieldUpdateOperationsInput | string
    text?: StringFieldUpdateOperationsInput | string
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
  }

  export type ExamUncheckedUpdateWithoutClientInput = {
    id?: IntFieldUpdateOperationsInput | number
    medicId?: NullableIntFieldUpdateOperationsInput | number | null
    title?: StringFieldUpdateOperationsInput | string
    text?: StringFieldUpdateOperationsInput | string
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
  }

  export type ExamUncheckedUpdateManyWithoutExamInput = {
    id?: IntFieldUpdateOperationsInput | number
    medicId?: NullableIntFieldUpdateOperationsInput | number | null
    title?: StringFieldUpdateOperationsInput | string
    text?: StringFieldUpdateOperationsInput | string
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
  }

  export type SessionReceptionistCreateManyReceptionistInput = {
    id?: number
    token: string
    createdAt?: Date | string
    updatedAt?: Date | string
  }

  export type SessionReceptionistUpdateWithoutReceptionistInput = {
    token?: StringFieldUpdateOperationsInput | string
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
  }

  export type SessionReceptionistUncheckedUpdateWithoutReceptionistInput = {
    id?: IntFieldUpdateOperationsInput | number
    token?: StringFieldUpdateOperationsInput | string
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
  }

  export type SessionReceptionistUncheckedUpdateManyWithoutSessionReceptionistInput = {
    id?: IntFieldUpdateOperationsInput | number
    token?: StringFieldUpdateOperationsInput | string
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
  }

  export type SessionMedicCreateManyMedicInput = {
    id?: number
    token: string
    createdAt?: Date | string
    updatedAt?: Date | string
  }

  export type AppointementCreateManyMedicInput = {
    id?: number
    clientId?: number | null
    appointementDate: Date | string
    createdAt?: Date | string
    updatedAt?: Date | string
  }

  export type PrescriptionCreateManyMedicInput = {
    id?: number
    clientId?: number | null
    medications: JsonNullValueInput | InputJsonValue
    description: string
    requestingRenewal: boolean
    expirationDate: Date | string
    createdAt?: Date | string
    updatedAt?: Date | string
  }

  export type ReportCreateManyMedicInput = {
    id?: number
    clientId?: number | null
    title: string
    text: string
    createdAt?: Date | string
    updatedAt?: Date | string
  }

  export type ExamCreateManyMedicInput = {
    id?: number
    clientId?: number | null
    title: string
    text: string
    createdAt?: Date | string
    updatedAt?: Date | string
  }

  export type SessionMedicUpdateWithoutMedicInput = {
    token?: StringFieldUpdateOperationsInput | string
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
  }

  export type SessionMedicUncheckedUpdateWithoutMedicInput = {
    id?: IntFieldUpdateOperationsInput | number
    token?: StringFieldUpdateOperationsInput | string
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
  }

  export type SessionMedicUncheckedUpdateManyWithoutSessionMedicInput = {
    id?: IntFieldUpdateOperationsInput | number
    token?: StringFieldUpdateOperationsInput | string
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
  }

  export type AppointementUpdateWithoutMedicInput = {
    Client?: ClientUpdateOneWithoutAppointmentInput
    appointementDate?: DateTimeFieldUpdateOperationsInput | Date | string
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
  }

  export type AppointementUncheckedUpdateWithoutMedicInput = {
    id?: IntFieldUpdateOperationsInput | number
    clientId?: NullableIntFieldUpdateOperationsInput | number | null
    appointementDate?: DateTimeFieldUpdateOperationsInput | Date | string
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
  }

  export type PrescriptionUpdateWithoutMedicInput = {
    Client?: ClientUpdateOneWithoutPescriptionInput
    medications?: JsonNullValueInput | InputJsonValue
    description?: StringFieldUpdateOperationsInput | string
    requestingRenewal?: BoolFieldUpdateOperationsInput | boolean
    expirationDate?: DateTimeFieldUpdateOperationsInput | Date | string
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
  }

  export type PrescriptionUncheckedUpdateWithoutMedicInput = {
    id?: IntFieldUpdateOperationsInput | number
    clientId?: NullableIntFieldUpdateOperationsInput | number | null
    medications?: JsonNullValueInput | InputJsonValue
    description?: StringFieldUpdateOperationsInput | string
    requestingRenewal?: BoolFieldUpdateOperationsInput | boolean
    expirationDate?: DateTimeFieldUpdateOperationsInput | Date | string
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
  }

  export type ReportUpdateWithoutMedicInput = {
    Client?: ClientUpdateOneWithoutReportInput
    title?: StringFieldUpdateOperationsInput | string
    text?: StringFieldUpdateOperationsInput | string
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
  }

  export type ReportUncheckedUpdateWithoutMedicInput = {
    id?: IntFieldUpdateOperationsInput | number
    clientId?: NullableIntFieldUpdateOperationsInput | number | null
    title?: StringFieldUpdateOperationsInput | string
    text?: StringFieldUpdateOperationsInput | string
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
  }

  export type ExamUpdateWithoutMedicInput = {
    Client?: ClientUpdateOneWithoutExamInput
    title?: StringFieldUpdateOperationsInput | string
    text?: StringFieldUpdateOperationsInput | string
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
  }

  export type ExamUncheckedUpdateWithoutMedicInput = {
    id?: IntFieldUpdateOperationsInput | number
    clientId?: NullableIntFieldUpdateOperationsInput | number | null
    title?: StringFieldUpdateOperationsInput | string
    text?: StringFieldUpdateOperationsInput | string
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
  }



  /**
   * Batch Payload for updateMany & deleteMany & createMany
   */

  export type BatchPayload = {
    count: number
  }

  /**
   * DMMF
   */
  export const dmmf: runtime.DMMF.Document;
}